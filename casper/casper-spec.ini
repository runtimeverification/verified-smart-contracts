; casper commit: master b2a1189
; vyper  commit: master 7b1e018
; k      commit: master aa5aa63
; kevm   commit: ABI    77ebe3d

[recommended_target_hash]
comment: 
k: (#execute => #halt) ~> _
output: _ => #asByteStackInWidth(#recommendedBlockHash(BLOCK_HASHES, BLOCK_NUM, CUR_EPOCH, EPOCH_LENGTH), 32)
statusCode: _ => EVMC_SUCCESS
callStack: _
callData: #abiCallData("recommended_target_hash", .TypedArgs)
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: GCAP => GCAP -Int 893
memoryUsed: 0 => _
callDepth: CD
log: _
refund: _
coinbase: _
activeAccounts: SetItem(CASPER_ACCT_ID) _:Set
casperBalance: CASPER_BAL
storage:
    // self.current_epoch
    (#hashedLocation({COMPILER}, {CURRENT_EPOCH}, .IntList) |-> CUR_EPOCH)
    // self.EPOCH_LENGTH
    (#hashedLocation({COMPILER}, {EPOCH_LENGTH}, .IntList) |-> EPOCH_LENGTH)
    _:Map
accounts: 
requires:
    andBool 0  <Int CUR_EPOCH    andBool CUR_EPOCH    <=Int maxSInt128
    andBool 0  <Int EPOCH_LENGTH andBool EPOCH_LENGTH <=Int maxSInt128
    andBool 0 <=Int CASPER_BAL   andBool CASPER_BAL   <=Int maxUInt256
    // Overflow check
    andBool (CUR_EPOCH *Int EPOCH_LENGTH) <=Int maxSInt128
    andBool BLOCK_NUM -Int 256 <=Int #expectedBlockNumber(CUR_EPOCH, EPOCH_LENGTH)
    andBool #expectedBlockNumber(CUR_EPOCH, EPOCH_LENGTH) <Int BLOCK_NUM
    // Call depth
    andBool 0 <=Int CD andBool CD <Int 1024
    // Gas
    andBool GCAP >=Int 893
ensures:
attribute: 

[proc_reward]
comment: 
k: (#execute => #halt) ~> _
output: _ => .WordStack
statusCode: _ => EVMC_SUCCESS
callStack: _
callData: #abiCallData("proc_reward", #int128(VINDEX), #int128(REWARD))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: 100000 => _
memoryUsed: 0 => _
callDepth: CD
log: _
refund: _ => _
coinbase: COINBASE_ACCT_ID
activeAccounts: SetItem(CASPER_ACCT_ID) SetItem(COINBASE_ACCT_ID) _:Set
casperBalance: CASPER_BAL => CASPER_BAL -Int ((REWARD *Int CUR_EPOCH_SCALE_FACTOR /Int 8) /Int 10000000000)
storage:
    // self.validators[validator_index].deposit
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {DEPOSIT}) |-> (VDEPOSIT => VDEPOSIT +Int REWARD *Int 10000000000))
    // self.validators[validator_index].end_dynasty
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {END_DYNASTY}) |-> END_DYN)
    // self.validators[validator_index].start_dynasty
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {START_DYNASTY}) |-> START_DYN)
    // self.dynasty
    (#hashedLocation({COMPILER}, {DYNASTY}, .IntList) |-> CUR_DYN)
    // self.dynasty_wei_delta[end_dynasty]
    (#hashedLocation({COMPILER}, {DYNASTY_WEI_DELTA}, END_DYN) |-> (#signed(DYN_WEI_DELTA) => #signed(DYN_WEI_DELTA -Int REWARD *Int 10000000000)))
    // self.total_curdyn_deposits
    (#hashedLocation({COMPILER}, {TOTAL_CURDYN_DEPOSITS}, .IntList) |-> (TOTAL_CUR_DYN_DEPOSITS => TOTAL_CUR_DYN_DEPOSITS  +Int REWARD *Int 10000000000))
    // self.total_prevdyn_deposits
    (#hashedLocation({COMPILER}, {TOTAL_PREVDYN_DEPOSITS}, .IntList) |-> (TOTAL_PREV_DYN_DEPOSITS => TOTAL_PREV_DYN_DEPOSITS +Int REWARD *Int 10000000000))
    // self.deposit_scale_factor[self.current_epoch]
    (#hashedLocation({COMPILER}, {DEPOSIT_SCALE_FACTOR}, CUR_EPOCH) |-> CUR_EPOCH_SCALE_FACTOR)
    // self.current_epoch
    (#hashedLocation({COMPILER}, {CURRENT_EPOCH}, .IntList) |-> CUR_EPOCH)
    // self.default_end_dynasty
    (#hashedLocation({COMPILER}, {DEFAULT_END_DYNASTY}, .IntList) |-> DEFAULT_END_DYN)
    _:Map
accounts:
    <account>
      <acctID> COINBASE_ACCT_ID </acctID>
      <balance> COINBASE_BAL => COINBASE_BAL +Int ((REWARD *Int CUR_EPOCH_SCALE_FACTOR /Int 8) /Int 10000000000) </balance>
      <code> .WordStack </code>
      <storage> _ </storage>
      <nonce> COINBASE_NOUNCE </nonce>
    </account>
requires:
    // Type constraint
    andBool 0  <Int VINDEX                  andBool VINDEX                  <=Int maxSInt128
    andBool 0 <=Int REWARD                  andBool REWARD                  <=Int maxSInt128
    andBool 0  <Int COINBASE_ACCT_ID        andBool COINBASE_ACCT_ID        <=Int maxUInt160
    andBool (notBool COINBASE_ACCT_ID in #precompiledAccounts(BYZANTIUM))
    andBool 0 <=Int CASPER_BAL              andBool CASPER_BAL              <=Int maxUInt256
    andBool 0 <=Int VDEPOSIT                andBool VDEPOSIT                <=Int maxDecimal
    andBool 0 <=Int END_DYN                 andBool END_DYN                 <=Int maxSInt128
    andBool 0 <=Int START_DYN               andBool START_DYN               <=Int maxSInt128
    andBool 0 <=Int CUR_DYN                 andBool CUR_DYN                 <=Int maxSInt128
    andBool minDecimal <=Int DYN_WEI_DELTA  andBool DYN_WEI_DELTA           <=Int maxDecimal
    andBool 0 <=Int TOTAL_CUR_DYN_DEPOSITS  andBool TOTAL_CUR_DYN_DEPOSITS  <=Int maxDecimal
    andBool 0 <=Int TOTAL_PREV_DYN_DEPOSITS andBool TOTAL_PREV_DYN_DEPOSITS <=Int maxDecimal
    andBool 0  <Int CUR_EPOCH_SCALE_FACTOR  andBool CUR_EPOCH_SCALE_FACTOR  <=Int maxDecimal
    andBool 0  <Int CUR_EPOCH               andBool CUR_EPOCH               <=Int maxSInt128
    andBool 0 <=Int DEFAULT_END_DYN         andBool DEFAULT_END_DYN         <=Int maxSInt128
    andBool COINBASE_NOUNCE ==Int 1
    // andBool 0  <Int COINBASE_NOUNCE
    andBool 0 <=Int COINBASE_BAL            andBool COINBASE_BAL            <=Int maxUInt256
    // Overflow check
    andBool (VDEPOSIT +Int REWARD *Int 10000000000) <=Int maxDecimal
    andBool minDecimal <=Int (DYN_WEI_DELTA -Int REWARD *Int 10000000000)
    andBool TOTAL_CUR_DYN_DEPOSITS  +Int REWARD *Int 10000000000 <=Int maxDecimal
    andBool TOTAL_PREV_DYN_DEPOSITS +Int REWARD *Int 10000000000 <=Int maxDecimal
    andBool REWARD *Int CUR_EPOCH_SCALE_FACTOR <=Int maxDecimal
    andBool 0 <=Int CASPER_BAL -Int ((REWARD *Int CUR_EPOCH_SCALE_FACTOR /Int 8) /Int 10000000000)
    andBool COINBASE_BAL +Int ((REWARD *Int CUR_EPOCH_SCALE_FACTOR /Int 8) /Int 10000000000) <=Int maxUInt256
    // Path condition
    andBool CALLER_ID ==Int CASPER_ACCT_ID
    andBool #inCurDynasty(START_DYN, END_DYN, CUR_DYN)
    andBool #inPrevDynasty(START_DYN, END_DYN, CUR_DYN)
    andBool END_DYN <Int DEFAULT_END_DYN
    andBool 0  <Int (REWARD *Int CUR_EPOCH_SCALE_FACTOR /Int 8) /Int 10000000000
    andBool CASPER_ACCT_ID =/=Int COINBASE_ACCT_ID
    // Call Depth
    andBool 0 <=Int CD andBool CD <Int 1024
    // Gas
    // andBool GCAP >=Int (92207 +Int 2300) // Gcallstipend
ensures: 
attribute: 


[vote]
comment: 
k: (#execute => #halt) ~> _
output: _ => .WordStack
statusCode: _ => EVMC_SUCCESS
callStack: _
callData: #abiCallData("vote", #int128(VINDEX), #bytes32(T_HASH), #int128(T_EPOCH), #int128(S_EPOCH))
;callData: #abiCallData("vote", #bytes(1024, RLP(#int128(VINDEX), #bytes32(T_HASH), #int128(T_EPOCH), #int128(S_EPOCH), #bytes(1024, SIG))))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: 10000000 => _
memoryUsed: 0 => _
callDepth: 0
log: _:List ( .List
            => ListItem(#abiEventLog(CASPER_ACCT_ID, "Epoch", #indexed(#int128(T_EPOCH)), #indexed(#bytes32(T_EPOCH_HASH)), #bool(1), #bool(0)))
               ListItem(#abiEventLog(CASPER_ACCT_ID, "Epoch", #indexed(#int128(S_EPOCH)), #indexed(#bytes32(S_EPOCH_HASH)), #bool(1), #bool(1)))
               ListItem(#abiEventLog(CASPER_ACCT_ID, "Vote", #indexed(#address(VWITHDRAWALADDR)), #indexed(#int128(VINDEX)), #indexed(#bytes32(T_HASH)), #int128(T_EPOCH), #int128(S_EPOCH)))
            )
refund: _ => _
coinbase: COINBASE_ACCT_ID
activeAccounts: SetItem(CASPER_ACCT_ID) SetItem(COINBASE_ACCT_ID) _:Set
casperBalance: CASPER_BAL
storage:
    // self.validators[validator_index].deposit
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {DEPOSIT}) |-> VDEPOSIT)
    // (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {DEPOSIT}) |-> (VDEPOSIT => VDEPOSIT +Int REWARD *Int 10000000000))
    // self.validators[validator_index].end_dynasty
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {END_DYNASTY}) |-> END_DYN)
    // self.validators[validator_index].start_dynasty
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {START_DYNASTY}) |-> START_DYN)
    // self.validators[validator_index].withdrawal_addr
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {WITHDRAWAL_ADDR}) |-> VWITHDRAWALADDR)
    // self.checkpoint_hashes[source_epoch]
    (#hashedLocation({COMPILER}, {CHECKPOINT_HASHES}, S_EPOCH) |-> S_EPOCH_HASH)
    // self.checkpoint_hashes[target_epoch]
    (#hashedLocation({COMPILER}, {CHECKPOINT_HASHES}, T_EPOCH) |-> T_EPOCH_HASH)
    // self.dynasty
    (#hashedLocation({COMPILER}, {DYNASTY}, .IntList) |-> CUR_DYN)
    // self.dynasty_wei_delta[end_dynasty]
    (#hashedLocation({COMPILER}, {DYNASTY_WEI_DELTA}, END_DYN) |-> DYN_WEI_DELTA)
    // (#hashedLocation({COMPILER}, {DYNASTY_WEI_DELTA}, END_DYN) |-> (#signed(DYN_WEI_DELTA) => #signed(DYN_WEI_DELTA -Int REWARD *Int 10000000000)))
    // self.total_curdyn_deposits
    (#hashedLocation({COMPILER}, {TOTAL_CURDYN_DEPOSITS}, .IntList) |-> TOTAL_CUR_DYN_DEPOSITS)
    // (#hashedLocation({COMPILER}, {TOTAL_CURDYN_DEPOSITS}, .IntList) |-> (TOTAL_CUR_DYN_DEPOSITS => TOTAL_CUR_DYN_DEPOSITS  +Int REWARD *Int 10000000000))
    // self.total_prevdyn_deposits
    (#hashedLocation({COMPILER}, {TOTAL_PREVDYN_DEPOSITS}, .IntList) |-> TOTAL_PREV_DYN_DEPOSITS)
    // (#hashedLocation({COMPILER}, {TOTAL_PREVDYN_DEPOSITS}, .IntList) |-> (TOTAL_PREV_DYN_DEPOSITS => TOTAL_PREV_DYN_DEPOSITS +Int REWARD *Int 10000000000))
    // assert self.votes[source_epoch].is_justified
    (#hashedLocation({COMPILER}, {VOTES}, S_EPOCH {IS_JUSTIFIED}) |-> 1)
    // self.votes[source_epoch].is_finalized
    (#hashedLocation({COMPILER}, {VOTES}, S_EPOCH {IS_FINALIZED}) |-> (_ => 1))
    // self.votes[target_epoch].cur_dyn_votes[source_epoch]
    (#hashedLocation({COMPILER}, {VOTES}, T_EPOCH {CUR_DYN_VOTES} S_EPOCH) |-> (CUR_DYN_VOTES => CUR_DYN_VOTES +Int VDEPOSIT))
    // self.votes[target_epoch].is_justified
    (#hashedLocation({COMPILER}, {VOTES}, T_EPOCH {IS_JUSTIFIED}) |-> (0 => 1))
    // self.votes[target_epoch].prev_dyn_votes[source_epoch]
    (#hashedLocation({COMPILER}, {VOTES}, T_EPOCH {PREV_DYN_VOTES} S_EPOCH) |-> (PREV_DYN_VOTES => PREV_DYN_VOTES +Int VDEPOSIT))
    // self.votes[target_epoch].vote_bitmap[floor(validator_index / 256)]
    (#hashedLocation({COMPILER}, {VOTES}, T_EPOCH {VOTE_BITMAP} VIDKEY) |-> (VOTE_VECTOR => #setVoteBit(VOTE_VECTOR, VINDEX)))
    // self.main_hash_justified
    (#hashedLocation({COMPILER}, {MAIN_HASH_JUSTIFIED}, .IntList) |-> (_ => 1))
    // self.deposit_scale_factor[self.current_epoch]
    (#hashedLocation({COMPILER}, {DEPOSIT_SCALE_FACTOR}, CUR_EPOCH) |-> CUR_EPOCH_SCALE_FACTOR)
    // self.current_epoch
    (#hashedLocation({COMPILER}, {CURRENT_EPOCH}, .IntList) |-> CUR_EPOCH)
    // self.last_finalized_epoch
    (#hashedLocation({COMPILER}, {LAST_FINALIZED_EPOCH}, .IntList) |-> (_ => S_EPOCH))
    // self.last_justified_epoch
    (#hashedLocation({COMPILER}, {LAST_JUSTIFIED_EPOCH}, .IntList) |-> (_ => T_EPOCH))
    // self.reward_factor
    (#hashedLocation({COMPILER}, {REWARD_FACTOR}, .IntList) |-> REWARD_FACTOR)
    // self.expected_source_epoch
    (#hashedLocation({COMPILER}, {EXPECTED_SOURCE_EPOCH}, .IntList) |-> EXPECTED_SOURCE_EPOCH)
    // self.EPOCH_LENGTH
    (#hashedLocation({COMPILER}, {EPOCH_LENGTH}, .IntList) |-> EPOCH_LENGTH)
    // self.DEFAULT_END_DYNASTY
    (#hashedLocation({COMPILER}, {DEFAULT_END_DYNASTY}, .IntList) |-> DEFAULT_END_DYN)
    _:Map
accounts:
    <account>
      <acctID> COINBASE_ACCT_ID </acctID>
      <balance> COINBASE_BAL </balance>
      <code> .WordStack </code>
      <storage> _ </storage>
      <nonce> COINBASE_NOUNCE </nonce>
    </account>
requires:
    // Type constraint
    andBool 0  <Int VINDEX                  andBool VINDEX                  <=Int maxSInt128  // start validator index counter at 1
    andBool 0 <=Int T_HASH                  andBool T_HASH                  <=Int maxUInt256
    andBool 0 <=Int T_EPOCH                 andBool T_EPOCH                 <=Int maxSInt128
    andBool 0 <=Int S_EPOCH                 andBool S_EPOCH                 <=Int maxSInt128
    andBool 0 <=Int CASPER_BAL              andBool CASPER_BAL              <=Int maxUInt256
    andBool 0  <Int COINBASE_ACCT_ID        andBool COINBASE_ACCT_ID        <=Int maxUInt160
    andBool (notBool COINBASE_ACCT_ID in #precompiledAccounts(BYZANTIUM))
    andBool 0 <=Int VDEPOSIT                andBool VDEPOSIT                <=Int maxDecimal
    andBool 0 <=Int END_DYN                 andBool END_DYN                 <=Int maxSInt128
    andBool 0 <=Int START_DYN               andBool START_DYN               <=Int maxSInt128
    andBool 0 <=Int VWITHDRAWALADDR         andBool VWITHDRAWALADDR         <=Int maxUInt160
    andBool 0 <=Int S_EPOCH_HASH            andBool S_EPOCH_HASH            <=Int maxUInt256
    andBool 0 <=Int T_EPOCH_HASH            andBool T_EPOCH_HASH            <=Int maxUInt256
    andBool 0 <=Int CUR_DYN                 andBool CUR_DYN                 <=Int maxSInt128
    andBool minDecimal <=Int DYN_WEI_DELTA  andBool DYN_WEI_DELTA           <=Int maxDecimal
    andBool 0 <=Int TOTAL_CUR_DYN_DEPOSITS  andBool TOTAL_CUR_DYN_DEPOSITS  <=Int maxDecimal
    andBool 0 <=Int TOTAL_PREV_DYN_DEPOSITS andBool TOTAL_PREV_DYN_DEPOSITS <=Int maxDecimal
    andBool 0 <=Int CUR_DYN_VOTES           andBool CUR_DYN_VOTES           <=Int maxDecimal
    andBool 0 <=Int PREV_DYN_VOTES          andBool PREV_DYN_VOTES          <=Int maxDecimal
    andBool 0 <=Int VOTE_VECTOR             andBool VOTE_VECTOR             <=Int maxUInt256
    andBool 0  <Int CUR_EPOCH_SCALE_FACTOR  andBool CUR_EPOCH_SCALE_FACTOR  <=Int maxDecimal
    andBool 0  <Int CUR_EPOCH               andBool CUR_EPOCH               <=Int maxSInt128
    andBool 0  <Int REWARD_FACTOR           andBool REWARD_FACTOR           <=Int maxDecimal  // assert self.reward_factor > 0 in `initialize_epoch()`
    andBool 0 <=Int EXPECTED_SOURCE_EPOCH   andBool EXPECTED_SOURCE_EPOCH   <=Int maxSInt128
    andBool 0  <Int EPOCH_LENGTH            andBool EPOCH_LENGTH            <=Int maxSInt128
    andBool VIDKEY ==Int VINDEX /Int 256
    andBool COINBASE_NOUNCE ==Int 1
    andBool 0 <=Int COINBASE_BAL            andBool COINBASE_BAL            <=Int maxUInt256
    // FIXME
    andBool 0 <Int VINDEX modInt 256
    // Overflow check
    andBool (CUR_EPOCH *Int EPOCH_LENGTH)    <=Int maxSInt128
    andBool (CUR_DYN_VOTES +Int VDEPOSIT)    <=Int maxDecimal
    andBool (PREV_DYN_VOTES +Int VDEPOSIT)   <=Int maxDecimal
    andBool (VDEPOSIT *Int REWARD_FACTOR)    <=Int maxDecimal
    andBool (TOTAL_CUR_DYN_DEPOSITS *Int 2)  <=Int maxDecimal
    andBool (TOTAL_PREV_DYN_DEPOSITS *Int 2) <=Int maxDecimal
    andBool (S_EPOCH +Int 1)                 <=Int maxSInt128
    andBool (VDEPOSIT +Int REWARD *Int 10000000000) <=Int maxDecimal
    andBool minDecimal <=Int (DYN_WEI_DELTA -Int REWARD *Int 10000000000)
    andBool TOTAL_CUR_DYN_DEPOSITS  +Int REWARD *Int 10000000000 <=Int maxDecimal
    andBool TOTAL_PREV_DYN_DEPOSITS +Int REWARD *Int 10000000000 <=Int maxDecimal
    andBool REWARD *Int CUR_EPOCH_SCALE_FACTOR <=Int maxDecimal
    andBool 0 <=Int CASPER_BAL -Int ((REWARD *Int CUR_EPOCH_SCALE_FACTOR /Int 8) /Int 10000000000)
    andBool COINBASE_BAL +Int ((REWARD *Int CUR_EPOCH_SCALE_FACTOR /Int 8) /Int 10000000000) <=Int maxUInt256
    // Path constraint
    // recommended_target_hash
    andBool BLOCK_NUM -Int 256 <=Int #expectedBlockNumber(CUR_EPOCH, EPOCH_LENGTH)
    andBool #expectedBlockNumber(CUR_EPOCH, EPOCH_LENGTH) <Int BLOCK_NUM
    andBool #notVoteBefore(VOTE_VECTOR, VINDEX)
    // assert target_hash == self.recommended_target_hash()
    andBool T_HASH  ==Int #recommendedBlockHash(BLOCK_HASHES, BLOCK_NUM, CUR_EPOCH, EPOCH_LENGTH)
    // assert target_epoch == self.current_epoch
    andBool T_EPOCH ==Int CUR_EPOCH
    andBool #inCurDynasty(START_DYN, END_DYN, CUR_DYN)
    andBool #inPrevDynasty(START_DYN, END_DYN, CUR_DYN)
    // if self.expected_source_epoch == source_epoch
    andBool S_EPOCH ==Int EXPECTED_SOURCE_EPOCH
    // proc_reward
    andBool REWARD  ==Int ((VDEPOSIT *Int REWARD_FACTOR) /Int 10000000000) /Int 10000000000
    andBool END_DYN <Int DEFAULT_END_DYN
    andBool 0  <Int (REWARD *Int CUR_EPOCH_SCALE_FACTOR /Int 8) /Int 10000000000
    andBool CASPER_ACCT_ID =/=Int COINBASE_ACCT_ID
    // if (current_dynasty_votes >= self.total_curdyn_deposits * 2 / 3 and previous_dynasty_votes >= self.total_prevdyn_deposits * 2 / 3)
    andBool #isJustified(CUR_DYN_VOTES +Int VDEPOSIT, TOTAL_CUR_DYN_DEPOSITS, PREV_DYN_VOTES +Int VDEPOSIT, TOTAL_PREV_DYN_DEPOSITS)
    // if target_epoch == source_epoch + 1
    andBool T_EPOCH ==Int S_EPOCH +Int 1
ensures:
attribute:

[delete_validator]
comment: 
k: (#execute => #halt) ~> _
output: _ => .WordStack
statusCode: _ => EVMC_SUCCESS
callStack: _
callData: #abiCallData("delete_validator", #int128(VINDEX))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: GCAP => GCAP -Int 121213
memoryUsed: 0 => _
callDepth: CD
log: _
refund: _ => _
coinbase: _
activeAccounts: SetItem(CASPER_ACCT_ID) _:Set
casperBalance: CASPER_BAL
storage:
    // self.validators[validator_index].deposit
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {DEPOSIT}) |-> (VDEPOSIT => 0))
    // self.validators[validator_index].addr
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {ADDR}) |-> (VADDR => 0))
    // self.validators[validator_index].end_dynasty
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {END_DYNASTY}) |-> (END_DYN => 0))
    // self.validators[validator_index].start_dynasty
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {START_DYNASTY}) |-> (START_DYN => 0))
    // self.validators[validator_index].withdrawal_addr
    (#hashedLocation({COMPILER}, {VALIDATORS}, VINDEX {WITHDRAWAL_ADDR}) |-> (VWITHDRAWALADDR => 0))
    // self.validator_indexes[self.validators[validator_index].withdrawal_addr]
    (#hashedLocation({COMPILER}, {VALIDATOR_INDEXES}, VWITHDRAWALADDR) |-> (VAL_IDX => 0))
accounts: 
requires:
    // Type constraint
    andBool 0  <Int VINDEX          andBool VINDEX          <=Int maxSInt128
    andBool 0 <=Int CASPER_BAL      andBool CASPER_BAL      <=Int maxUInt256
    andBool 0 <=Int VDEPOSIT        andBool VDEPOSIT        <=Int maxDecimal
    andBool 0 <=Int VADDR           andBool VADDR           <=Int maxUInt160
    andBool 0 <=Int END_DYN         andBool END_DYN         <=Int maxSInt128
    andBool 0 <=Int START_DYN       andBool START_DYN       <=Int maxSInt128
    andBool 0 <=Int VWITHDRAWALADDR andBool VWITHDRAWALADDR <=Int maxUInt160
    andBool 0 <=Int VAL_IDX         andBool VAL_IDX         <=Int maxSInt128
    andBool 0 <=Int CASPER_BAL      andBool CASPER_BAL      <=Int maxUInt256
    // Path condition
    andBool CALLER_ID ==Int CASPER_ACCT_ID
    // Call depth
    andBool 0 <=Int CD andBool CD <Int 1024
    // Gas
    andBool GCAP >=Int 121213
ensures:
attribute:

[pgm]
compiler: "Vyper"
; self.validators
validators: 0
addr: 0
deposit: 1
end_dynasty: 2
start_dynasty: 3
withdrawal_addr: 4
; self.checkpoint_hashes
checkpoint_hashes: 1
; self.validator_indexes
validator_indexes: 3
; self.dynasty
dynasty: 4
; self.dynasty_wei_delta
dynasty_wei_delta: 5
; self.total_curdyn_deposits
total_curdyn_deposits: 6
; self.total_prevdyn_deposits
total_prevdyn_deposits: 7
; self.dynasty_in_epoch
dynasty_in_epoch: 9
; self.votes
votes: 10
cur_dyn_votes: 0
is_finalized: 1
is_justified: 2
prev_dyn_votes: 3
vote_bitmap: 4
; self.main_hash_justified
main_hash_justified: 11
; self.deposit_scale_factor
deposit_scale_factor: 12
; self.current_epoch
current_epoch: 15
; self.last_finalized_epoch
last_finalized_epoch: 16
; self.last_justified_epoch
last_justified_epoch: 17
; self.reward_factor
reward_factor: 18
; self.expected_source_epoch
expected_source_epoch: 19
; self.EPOCH_LENGTH
EPOCH_LENGTH: 21
; self.DEFAULT_END_DYNASTY
DEFAULT_END_DYNASTY: 30
code: ""
