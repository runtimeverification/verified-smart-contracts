[root]
k: #execute => #halt
code: {PROXY_CODE}

; This are our variables:
; Default statusCode is EVMC_REVERT
output: _ => _
callData:
log: _
refund: _ => _
msg_sender: RANDOM_ID
callValue: 0
storage:
    #hashedLocation({COMPILER}, {_MASTER_COPY}, .IntList) |-> MASTER_COPY_ID
requires:

; Proxy pattern functions

[implementation]
callData: #abiCallData("implementation", .TypedArgs)

[implementation-success]
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(MASTER_COPY_ID, 32)

[implementation-failure]
; non-zero call value
statusCode: _ => EVMC_REVERT
callValue: CALL_VALUE
+requires:
    andBool #rangeUInt(256, CALL_VALUE)
    andBool 0  <Int CALL_VALUE

[proxyType]
callData: #abiCallData("proxyType", .TypedArgs)

[proxyType-success]
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(2, 32)

[proxyType-failure]
; non-zero call value
statusCode: _ => EVMC_REVERT
callValue: CALL_VALUE
+requires:
    andBool #rangeUInt(256, CALL_VALUE)
    andBool 0  <Int CALL_VALUE

[changeMasterCopy]
callData: #abiCallData("changeMasterCopy", #address(NEW_MASTER_COPY_ID))
+storage:
    #hashedLocation({COMPILER}, {_CREATOR}, .IntList) |-> CREATOR_ID
+requires:
    andBool #rangeAddress(NEW_MASTER_COPY_ID)

[changeMasterCopy-success]
statusCode: _ => EVMC_SUCCESS
msg_sender: CREATOR_ID
storage:
    #hashedLocation({COMPILER}, {_MASTER_COPY}, .IntList) |-> (MASTER_COPY_ID => NEW_MASTER_COPY_ID)
    #hashedLocation({COMPILER}, {_CREATOR}, .IntList) |-> CREATOR_ID
+requires:
    andBool 0  <Int  NEW_MASTER_COPY_ID

[changeMasterCopy-failure-1]
; masterCopy with address 0 supplied
statusCode: _ => EVMC_REVERT
msg_sender: CREATOR_ID
+requires:
    andBool 0 ==Int NEW_MASTER_COPY_ID

[changeMasterCopy-failure-2]
; function called by address different from creator
statusCode: _ => EVMC_REVERT
msg_sender: RANDOM_ID
+requires:
    andBool 0  <Int  NEW_MASTER_COPY_ID

[changeMasterCopy-failure-3]
; non-zero call value
statusCode: _ => EVMC_REVERT
callValue: CALL_VALUE
msg_sender: CREATOR_ID
+requires:
    andBool #rangeUInt(256, CALL_VALUE)
    andBool 0  <Int  CALL_VALUE
    andBool 0  <Int  NEW_MASTER_COPY_ID

; ERC20 functions

[totalSupply]
callData: #abiCallData("totalSupply", .TypedArgs)

[totalSupply-success]
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(TOTAL, 32)
+storage:
    #hashedLocation({COMPILER}, {_TOTALTOKENS}, .IntList) |-> TOTAL
+requires:
    andBool #rangeUInt(256, TOTAL)

[totalSupply-failure]
statusCode: _ => EVMC_REVERT
callValue: CALL_VALUE
+requires:
    andBool #rangeUInt(256, CALL_VALUE)
    andBool 0  <Int  CALL_VALUE

[balanceOf]
callData: #abiCallData("balanceOf", #address(OWNER))
+requires:
    andBool #rangeAddress(OWNER)

[balanceOf-success]
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(BAL, 32)
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, OWNER) |-> BAL
+requires:
    andBool #rangeUInt(256, BAL)

[balanceOf-failure]
statusCode: _ => EVMC_REVERT
callValue: CALL_VALUE
+requires:
    andBool #rangeUInt(256, CALL_VALUE)
    andBool 0  <Int  CALL_VALUE

[allowance]
callData: #abiCallData("allowance", #address(OWNER), #address(SPENDER))
+requires:
    andBool #rangeAddress(OWNER)
    andBool #rangeAddress(SPENDER)

[allowance-success]
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(ALLOWANCE, 32)
+storage:
    #hashedLocation({COMPILER}, {_ALLOWANCES}, OWNER SPENDER) |-> ALLOWANCE
+requires:
    andBool #rangeUInt(256, ALLOWANCE)

[allowance-failure]
statusCode: _ => EVMC_REVERT
callValue: CALL_VALUE
+requires:
    andBool #rangeUInt(256, CALL_VALUE)
    andBool 0  <Int  CALL_VALUE

[approve]
callData: #abiCallData("approve", #address(SPENDER), #uint256(VALUE))
+requires:
    andBool #rangeAddress(SPENDER)
    andBool #rangeUInt(256, VALUE)

[approve-success]
statusCode: _ => EVMC_SUCCESS
; return true
output: _ => #asByteStackInWidth(1, 32)
log: _:List ( .List => ListItem(#abiEventLog(PROXY_ID, "Approval", #indexed(#address(RANDOM_ID)), #indexed(#address(SPENDER)), #uint256(VALUE))) )
+storage:
    #hashedLocation({COMPILER}, {_ALLOWANCES}, RANDOM_ID SPENDER) |-> (_:Int => VALUE)

[approve-failure]
statusCode: _ => EVMC_REVERT
callValue: CALL_VALUE
+requires:
    andBool #rangeUInt(256, CALL_VALUE)
    andBool 0  <Int  CALL_VALUE

[transfer]
; statusCode is success even for 2 failure cases, because the token returns false in those cases
statusCode: _ => EVMC_SUCCESS
callData: #abiCallData("transfer", #address(TO_ID), #uint256(VALUE))
+requires:
    andBool #rangeAddress(TO_ID)
    andBool #rangeUInt(256, VALUE)
    andBool #rangeUInt(256, BAL_FROM)
    andBool #rangeUInt(256, BAL_TO)

[transfer-success]
; return true
output: _ => #asByteStackInWidth(1, 32)
log: _:List ( .List => ListItem(#abiEventLog(PROXY_ID, "Transfer", #indexed(#address(RANDOM_ID)), #indexed(#address(TO_ID)), #uint256(VALUE))) )

[transfer-success-1]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, RANDOM_ID) |-> (BAL_FROM => BAL_FROM -Int VALUE)
    #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)     |-> (BAL_TO   => BAL_TO   +Int VALUE)
+requires:
    andBool RANDOM_ID =/=Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool BAL_TO +Int VALUE <Int pow256

[transfer-success-2]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, RANDOM_ID) |-> BAL_FROM
+requires:
    andBool RANDOM_ID ==Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool BAL_FROM +Int VALUE <Int pow256

[transfer-failure]
; return false
output: _ => #asByteStackInWidth(0, 32)

[transfer-failure-1]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, RANDOM_ID) |-> BAL_FROM
    #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)     |->  BAL_TO
+requires:
    andBool RANDOM_ID =/=Int TO_ID
    andBool ( VALUE >Int BAL_FROM
     orBool   BAL_TO +Int VALUE >=Int pow256 )

[transfer-failure-2]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, RANDOM_ID) |-> BAL_FROM
+requires:
    andBool RANDOM_ID ==Int TO_ID
    andBool ( VALUE >Int BAL_FROM
     orBool   BAL_FROM +Int VALUE >=Int pow256 )

[transfer-failure-3]
statusCode: _ => EVMC_REVERT
output: _ => _
callValue: CALL_VALUE
+requires:
    andBool #rangeUInt(256, CALL_VALUE)
    andBool 0  <Int CALL_VALUE

[transferFrom]
; statusCode is success even for 2 failure cases, because the token returns false in those cases
statusCode: _ => EVMC_SUCCESS
callData: #abiCallData("transferFrom", #address(FROM_ID), #address(TO_ID), #uint256(VALUE))
+requires:
    andBool #rangeAddress(FROM_ID)
    andBool #rangeAddress(TO_ID)
    andBool #rangeUInt(256, VALUE)
    andBool #rangeUInt(256, BAL_FROM)
    andBool #rangeUInt(256, BAL_TO)
    andBool #rangeUInt(256, ALLOW)

[transferFrom-success]
; return true
output: _ => #asByteStackInWidth(1, 32)
log: _:List ( .List => ListItem(#abiEventLog(PROXY_ID, "Transfer", #indexed(#address(FROM_ID)), #indexed(#address(TO_ID)), #uint256(VALUE))) )

[transferFrom-success-1]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> (BAL_FROM => BAL_FROM -Int VALUE)
    #hashedLocation({COMPILER}, {_BALANCES},   TO_ID)             |-> (BAL_TO   => BAL_TO   +Int VALUE)
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID RANDOM_ID) |-> (ALLOW    => ALLOW    -Int VALUE)
+requires:
    andBool FROM_ID =/=Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool BAL_TO +Int VALUE <Int pow256
    andBool VALUE <=Int ALLOW

[transferFrom-success-2]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID RANDOM_ID) |-> (ALLOW => ALLOW -Int VALUE)
+requires:
    andBool FROM_ID ==Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool BAL_FROM +Int VALUE <Int pow256
    andBool VALUE <=Int ALLOW

[transferFrom-failure]
; return false
output: _ => #asByteStackInWidth(0, 32) 

[transferFrom-failure-1]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM  // BAL_FROM
    #hashedLocation({COMPILER}, {_BALANCES},   TO_ID)             |-> BAL_TO    // BAL_TO
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID RANDOM_ID) |-> ALLOW
+requires:
    andBool FROM_ID =/=Int TO_ID
    andBool ( VALUE >Int BAL_FROM
     orBool   BAL_TO +Int VALUE >=Int pow256
     orBool   VALUE >Int ALLOW )

[transferFrom-failure-2]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID RANDOM_ID) |-> ALLOW
+requires:
    andBool FROM_ID ==Int TO_ID
    andBool ( VALUE >Int BAL_FROM
     orBool   BAL_FROM +Int VALUE >=Int pow256
     orBool   VALUE >Int ALLOW )

[transferFrom-failure-3]
statusCode: _ => EVMC_REVERT
output: _ => _
callValue: CALL_VALUE
+requires:
    andBool #rangeUInt(256, CALL_VALUE)
    andBool 0  <Int CALL_VALUE

[pgm]
compiler: "Solidity"
_master_copy: 0
_creator: 1
_balances: 2
_allowances: 3
_totalTokens: 4
master_copy_code: "0x6080604052600436106100825763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663095ea7b3811461008757806318160ddd146100bf57806323b872dd146100e657806370a08231146101105780637de7edef14610131578063a9059cbb14610154578063dd62ed3e14610178575b600080fd5b34801561009357600080fd5b506100ab600160a060020a036004351660243561019f565b604080519115158252519081900360200190f35b3480156100cb57600080fd5b506100d4610206565b60408051918252519081900360200190f35b3480156100f257600080fd5b506100ab600160a060020a036004358116906024351660443561020c565b34801561011c57600080fd5b506100d4600160a060020a0360043516610339565b34801561013d57600080fd5b50610152600160a060020a0360043516610354565b005b34801561016057600080fd5b506100ab600160a060020a0360043516602435610498565b34801561018457600080fd5b506100d4600160a060020a0360043581169060243516610565565b336000818152600360209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b60045490565b600160a060020a038316600090815260026020526040812054610235908363ffffffff61059016565b15806102725750600160a060020a0384166000908152600360209081526040808320338452909152902054610270908363ffffffff61059016565b155b806102a35750600160a060020a0383166000908152600260205260409020546102a1908363ffffffff61059516565b155b156102b057506000610332565b600160a060020a0380851660008181526002602081815260408084208054899003905560038252808420338552825280842080548990039055948816808452918152918490208054870190558351868152935190937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92908290030190a35060015b9392505050565b600160a060020a031660009081526002602052604090205490565b600154600160a060020a031633146103cd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f6e6c792063726561746f722063616e2063616c6c207468697320666e000000604482015290519081900360640190fd5b600160a060020a038116151561046957604080517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f496e76616c6964206d617374657220636f707920616464726573732070726f7660448201527f6964656400000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b336000908152600260205260408120546104b8908363ffffffff61059016565b15806104ea5750600160a060020a0383166000908152600260205260409020546104e8908363ffffffff61059516565b155b156104f757506000610200565b33600081815260026020908152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600192915050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b111590565b81011015905600a165627a7a72305820d5525c596e62924f7ee5638508a7c817bb64514534d427f24e5e261a89fb3e130029"
proxy_code: "0x60806040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416634555d5c981146100885780635c60da1b146100af575b73ffffffffffffffffffffffffffffffffffffffff600054163660008037600080366000845af43d6000803e801515610083573d6000fd5b3d6000f35b34801561009457600080fd5b5061009d6100ed565b60408051918252519081900360200190f35b3480156100bb57600080fd5b506100c46100f2565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600290565b60005473ffffffffffffffffffffffffffffffffffffffff16905600a165627a7a723058205a4daa0006070ba62da1eeee0f9d06b625c8c37118bf849f5a2badb108af57580029"
