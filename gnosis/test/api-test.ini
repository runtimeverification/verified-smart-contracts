[root]
comment:
k: (#execute => #halt) ~> _
callStack: _
wordStack: .WordStack => _
localMem: .IMap => _
pc: 0 => _
gas: #infinity => _
memoryUsed: 0 => _
callDepth: CD
log: _ => _
refund: _ => _
coinbase: _ => _
activeAccounts: SetItem(#MASTER_COPY_ID) SetItem(#PROXY_ID) SetItem(#ORIGIN_ID) SetItem(1) _:Set
master_copy_bal: _
master_copy_storage: _:Map
master_copy_nonce: _
proxy_bal: 1000000000 => _
proxy_nonce: _
origin_bal: _
origin_code: ""
origin_storage: _:Map
origin_nonce: _
accounts:
code: {MASTER_COPY_CODE}
this: #PROXY_ID
msg_sender: MSG_SENDER
proxy_storage: _:Map
requires:
    andBool #range(0 <= CD < 1024)
ensures:
attribute:

[testKeccak]
output: _ => #buf(32, keccak(#buf(DATA_LEN, DATA)))
statusCode: _ => EVMC_SUCCESS
this: #PROXY_ID
msg_sender: MSG_SENDER
callData: #abiCallData("testKeccak", #bytes(#buf(DATA_LEN, DATA)))
callValue: 0
+requires:
    // Range
    andBool #rangeAddress(MSG_SENDER)
    andBool #rangeUInt(256, DATA_LEN)

    andBool DATA_LEN <Int 2 ^Int 16

[testKeccak-1]
+requires:
    andBool DATA_LEN ==Int 0

[testKeccak-2]
+requires:
    andBool 0 <Int DATA_LEN

; Encodes the arguments into a byte array according to ABI specification.
; Some examples here:
; https://medium.com/@libertylocked/what-are-abi-encoding-functions-in-solidity-0-4-24-c1a90b5ddce8
; The byte array in <output> cell is ABI-encoded once again, as part of function return semantics.
[testAbiEncode]
output: _ => #encodeArgs( #bytes( #encodeArgs(
                         #bytes32(#parseHexWord({SAFE_TX_TYPEHASH})),
                         #address(TO),
                         #uint256(VALUE),
                         #bytes32(KECCAK_OUT),
                         #uint8(OPERATION),
                         #uint256(SAFE_TX_GAS),
                         #uint256(DATA_GAS),
                         #uint256(GAS_PRICE),
                         #address(GAS_TOKEN),
                         #address(REFUND_RECEIVER),
                         #uint256(NONCE) )))
statusCode: _ => EVMC_SUCCESS
code: {MASTER_COPY_CODE}
this: #PROXY_ID
msg_sender: MSG_SENDER
callData: #abiCallData("testAbiEncode",
            #address(TO),
            #uint256(VALUE),
            #bytes32(KECCAK_OUT),
            ; Enum.Operation operation, represented as uint8
            #uint8(OPERATION),
            #uint256(SAFE_TX_GAS),
            #uint256(DATA_GAS),
            #uint256(GAS_PRICE),
            #address(GAS_TOKEN),
            #address(REFUND_RECEIVER),
            #uint256(NONCE) )
callValue: 0
+requires:
    // Range
    andBool #rangeAddress(MSG_SENDER)

    andBool #rangeAddress(          TO)
    andBool #rangeUInt( 256,        VALUE)
    andBool #rangeBytes( 32,        KECCAK_OUT)
    andBool #rangeUInt(   8,        OPERATION)
    ; enum Enum.Operation, 3 possible values encoded to 0-2.
    andBool OPERATION <=Int 2
    andBool #rangeUInt( 256,        SAFE_TX_GAS)
    andBool #rangeUInt( 256,        DATA_GAS)
    andBool #rangeUInt( 256,        GAS_PRICE)
    andBool #rangeAddress(          GAS_TOKEN)
    andBool #rangeAddress(          REFUND_RECEIVER)
    andBool #rangeUInt( 256,        NONCE)

    andBool #rangeAddress(          MASTER_COPY_ID)
    andBool #rangeBytes( 32,        DOMAIN_SEPARATOR)

    andBool TO =/=Int GAS_TOKEN
    andBool TO =/=Int REFUND_RECEIVER
    andBool GAS_TOKEN =/=Int REFUND_RECEIVER

; other cells inherited
[testAbiEncode-AndKeccak]
callData: #abiCallData("testAbiEncodeAndKeccak",
            #address(TO),
            #uint256(VALUE),
            #bytes(#buf(DATA_LEN, DATA)),
            #uint8(OPERATION),
            #uint256(SAFE_TX_GAS),
            #uint256(DATA_GAS),
            #uint256(GAS_PRICE),
            #address(GAS_TOKEN),
            #address(REFUND_RECEIVER),
            #uint256(NONCE) )
+requires:
    andBool #rangeUInt( 256,        DATA_LEN)
    andBool DATA_LEN <Int 2 ^Int 16

    andBool KECCAK_OUT ==Int keccak(#buf(DATA_LEN, DATA))

[testAbiEncode-AndKeccak-1]
+requires:
    andBool DATA_LEN ==Int 0

[testAbiEncode-AndKeccak-2]
+requires:
    andBool 0 <Int DATA_LEN

; return abi.encodePacked(byte(0x19), byte(1), domainSeparator, safeTxHash)
[testAbiEncodePacked]
output: _ => #encodeArgs( #bytes(
                #parseHexWord("0x19") : #parseHexWord("0x1")
                : #encodeArgs(#bytes32(DOMAIN_SEPARATOR), #bytes32(SAFE_TX_HASH))
             ))
statusCode: _ => EVMC_SUCCESS
this: #PROXY_ID
msg_sender: MSG_SENDER
callData: #abiCallData("testAbiEncodePacked", #bytes32(SAFE_TX_HASH))
callValue: 0
proxy_storage:
    store(M, #hashedLocation({COMPILER}, {DOMAIN_SEPARATOR}, .IntList), DOMAIN_SEPARATOR)
+requires:
    // Range
    andBool #rangeAddress(          MSG_SENDER)
    andBool #rangeBytes( 32,        SAFE_TX_HASH)
    andBool #rangeBytes( 32,        DOMAIN_SEPARATOR)

; return ecrecover(hash, v, r, s);
; bytes32 hash, uint8 v, bytes32 r, bytes32 s
[testEcrecover]
statusCode: _ => EVMC_SUCCESS
callData: #abiCallData("testEcrecover", #bytes32(HASH), #uint8(SIG_V), #bytes32(SIG_R), #bytes32(SIG_S))
callValue: 0
proxy_storage: _:Map
+requires:
    // Range
    andBool #rangeBytes( 32,        HASH)
    andBool #rangeUInt(   8,        SIG_V)
    andBool #rangeBytes( 32,        SIG_R)
    andBool #rangeBytes( 32,        SIG_S)

    andBool ECREC_DATA ==K #encodeArgs( #bytes32(HASH), #uint8(SIG_V), #bytes32(SIG_R), #bytes32(SIG_S) )

[testEcrecover-non-empty]
output: _ =>  #encodeArgs( #bytes32(#symEcrec( ECREC_DATA )) )
+requires:
    ; ECREC undefinedness case
    andBool notBool #ecrecEmpty( ECREC_DATA )

[testEcrecover-empty]
output: _ => #encodeArgs( #bytes32(0) )
+requires:
    ; ECREC undefinedness case
    andBool #ecrecEmpty( ECREC_DATA )


[pgm]
compiler: "Solidity"
safe_tx_typehash: "0x14d461bc7412367e924637b363c7bf29b8f47e2f84869f4426e5633d8af47b20"
domain_separator: 0
master_copy_code: "0x608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806328f8ec991461008857806367b0fe371461012457806397798725146101d8578063b9874538146102b4578063ccafc38714610495578063e580940c146104c0578063f698da2514610614575b600080fd5b34801561009457600080fd5b506100e2600480360360808110156100ab57600080fd5b8101908080359060200190929190803560ff169060200190929190803590602001909291908035906020019092919050505061063f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561013057600080fd5b5061015d6004803603602081101561014757600080fd5b81019080803590602001909291905050506106b2565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561019d578082015181840152602081019050610182565b50505050905090810190601f1680156101ca5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e457600080fd5b5061029e600480360360208110156101fb57600080fd5b810190808035906020019064010000000081111561021857600080fd5b82018360208201111561022a57600080fd5b8035906020019184600183028401116401000000008311171561024c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506107c3565b6040518082815260200191505060405180910390f35b3480156102c057600080fd5b5061041a60048036036101408110156102d857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561031f57600080fd5b82018360208201111561033157600080fd5b8035906020019184600183028401116401000000008311171561035357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107d4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561045a57808201518184015260208101905061043f565b50505050905090810190601f1680156104875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104a157600080fd5b506104aa610912565b6040518082815260200191505060405180910390f35b3480156104cc57600080fd5b5061059960048036036101408110156104e457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610939565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105d95780820151818401526020810190506105be565b50505050905090810190601f1680156106065780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561062057600080fd5b50610629610a70565b6040518082815260200191505060405180910390f35b600060018585858560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561069e573d6000803e3d6000fd5b505050602060405103519050949350505050565b606060197f01000000000000000000000000000000000000000000000000000000000000000260017f0100000000000000000000000000000000000000000000000000000000000000026000548460405160200180857effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600101847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526001018381526020018281526020019450505050506040516020818303038152906040529050919050565b600081805190602001209050919050565b60607f14d461bc7412367e924637b363c7bf29b8f47e2f84869f4426e5633d8af47b206001028b8b8b805190602001208b8b8b8b8b8b8b604051602001808c81526020018b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018a815260200189815260200188600281111561086257fe5b60ff1681526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019b50505050505050505050505060405160208183030381529060405290509a9950505050505050505050565b7f14d461bc7412367e924637b363c7bf29b8f47e2f84869f4426e5633d8af47b2060010281565b60607f14d461bc7412367e924637b363c7bf29b8f47e2f84869f4426e5633d8af47b206001028b8b8b8b8b8b8b8b8b8b604051602001808c81526020018b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018a81526020018981526020018860028111156109c057fe5b60ff1681526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019b50505050505050505050505060405160208183030381529060405290509a9950505050505050505050565b6000548156fea165627a7a723058208f312966c5bcac235980204ae62647af885c77f2168340a3203a20a83f73a5170029"
proxy_code: "0x60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634555d5c91461008b5780635c60da1b146100b6575b73ffffffffffffffffffffffffffffffffffffffff600054163660008037600080366000845af43d6000803e6000811415610086573d6000fd5b3d6000f35b34801561009757600080fd5b506100a061010d565b6040518082815260200191505060405180910390f35b3480156100c257600080fd5b506100cb610116565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006002905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050905600a165627a7a723058209831bad75772164414931a91aa4e9e2be55d2879d839299b8d19bbe1a373cde60029"
