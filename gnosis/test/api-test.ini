[root]
comment:
k: (#execute => #halt) ~> _
callStack: _
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: 10000000 => _
memoryUsed: 0 => _
callDepth: CD
log: _ => _
refund: _ => _
coinbase: _ => _
activeAccounts: SetItem(MASTER_COPY_ID) SetItem(PROXY_ID) SetItem(ORIGIN_ID) _:Set
master_copy_bal: _
master_copy_storage: _:Map
master_copy_nonce: _
proxy_bal: 1000000000 => _
proxy_nonce: _
origin_bal: _
origin_code: ""
origin_storage: _:Map
origin_nonce: _
accounts:
code: {MASTER_COPY_CODE}
this: PROXY_ID
msg_sender: MSG_SENDER
proxy_storage: _:Map
requires:
    andBool #range(0 <= CD < 1024)
ensures:
attribute:

[testKeccak]
output: _ => #asByteStackInWidth(keccak(#asByteStackInWidth(DATA, DATA_LEN)), 32)
statusCode: _ => EVMC_SUCCESS
this: PROXY_ID
msg_sender: MSG_SENDER
callData: #abiCallData("testKeccak", #toBytes(DATA, DATA_LEN))
callValue: 0
+requires:
    // Range
    andBool #rangeAddress(PROXY_ID)
    andBool #rangeAddress(MSG_SENDER)

    andBool #rangeUInt( 256,        DATA_LEN)
    andBool #rangeBytes( DATA_LEN,  DATA)

; also tested: 16, 64.
[testKeccak-data1]
+requires:
    andBool DATA_LEN ==Int 1

[testKeccak-data32]
+requires:
    andBool DATA_LEN ==Int 32

[testKeccak-data33]
+requires:
    andBool DATA_LEN ==Int 33

; Encodes the arguments into a byte array according to ABI specification.
; Some examples here:
; https://medium.com/@libertylocked/what-are-abi-encoding-functions-in-solidity-0-4-24-c1a90b5ddce8
; The byte array in <output> cell is ABI-encoded once again, as part of function return semantics.
[testAbiEncode]
output: _ => #encodeArgs( #bytes( #encodeArgs(
                         #bytes32(#parseHexWord({SAFE_TX_TYPEHASH})),
                         #address(TO),
                         #uint256(VALUE),
                         #bytes32(KECCAK_OUT),
                         #uint8(OPERATION),
                         #uint256(SAFE_TX_GAS),
                         #uint256(DATA_GAS),
                         #uint256(GAS_PRICE),
                         #address(GAS_TOKEN),
                         #address(REFUND_RECEIVER),
                         #uint256(NONCE) )))
statusCode: _ => EVMC_SUCCESS
code: {MASTER_COPY_CODE}
this: PROXY_ID
msg_sender: MSG_SENDER
callData: #abiCallData("testAbiEncode",
            #address(TO),
            #uint256(VALUE),
            #bytes32(KECCAK_OUT),
            ; Enum.Operation operation, represented as uint8
            #uint8(OPERATION),
            #uint256(SAFE_TX_GAS),
            #uint256(DATA_GAS),
            #uint256(GAS_PRICE),
            #address(GAS_TOKEN),
            #address(REFUND_RECEIVER),
            #uint256(NONCE) )
callValue: 0
+requires:
    // Range
    andBool #rangeAddress(PROXY_ID)
    andBool #rangeAddress(MSG_SENDER)

    andBool #rangeAddress(          TO)
    andBool #rangeUInt( 256,        VALUE)
    andBool #rangeBytes( 32,        KECCAK_OUT)
    andBool #rangeUInt(   8,        OPERATION)
    ; enum Enum.Operation, 3 possible values encoded to 0-2.
    andBool OPERATION <=Int 2
    andBool #rangeUInt( 256,        SAFE_TX_GAS)
    andBool #rangeUInt( 256,        DATA_GAS)
    andBool #rangeUInt( 256,        GAS_PRICE)
    andBool #rangeAddress(          GAS_TOKEN)
    andBool #rangeAddress(          REFUND_RECEIVER)
    andBool #rangeUInt( 256,        NONCE)

    andBool #rangeAddress(          MASTER_COPY_ID)
    andBool #rangeBytes( 32,        DOMAIN_SEPARATOR)

    andBool TO =/=Int GAS_TOKEN
    andBool TO =/=Int REFUND_RECEIVER
    andBool GAS_TOKEN =/=Int REFUND_RECEIVER

; other cells inherited
[testAbiEncode-AndKeccak]
callData: #abiCallData("testAbiEncodeAndKeccak",
            #address(TO),
            #uint256(VALUE),
            #toBytes(DATA, DATA_LEN),
            #uint8(OPERATION),
            #uint256(SAFE_TX_GAS),
            #uint256(DATA_GAS),
            #uint256(GAS_PRICE),
            #address(GAS_TOKEN),
            #address(REFUND_RECEIVER),
            #uint256(NONCE) )
+requires:
    andBool #rangeUInt( 256,        DATA_LEN)
    andBool #rangeBytes( DATA_LEN,  DATA)

    andBool KECCAK_OUT ==Int keccak(#asByteStackInWidth(DATA, DATA_LEN))

[testAbiEncode-AndKeccak-data1]
+requires:
    andBool DATA_LEN ==Int 1

; return abi.encodePacked(byte(0x19), byte(1), domainSeparator, safeTxHash)
[testAbiEncodePacked]
output: _ => #encodeArgs( #bytes(
                #parseHexWord("0x19") : #parseHexWord("0x1")
                : #encodeArgs(#bytes32(DOMAIN_SEPARATOR), #bytes32(SAFE_TX_HASH))
             ))
statusCode: _ => EVMC_SUCCESS
this: PROXY_ID
msg_sender: MSG_SENDER
callData: #abiCallData("testAbiEncodePacked", #bytes32(SAFE_TX_HASH))
callValue: 0
proxy_storage:
    (#hashedLocation({COMPILER}, {DOMAIN_SEPARATOR}, .IntList) |-> DOMAIN_SEPARATOR)
    _:Map
+requires:
    // Range
    andBool #rangeAddress(          PROXY_ID)
    andBool #rangeAddress(          MSG_SENDER)
    andBool #rangeBytes( 32,        SAFE_TX_HASH)
    andBool #rangeBytes( 32,        DOMAIN_SEPARATOR)

[testSignatureSplit]
output: _ => #encodeArgs(#uint8(SIG_V), #bytes32(SIG_R), #bytes32(SIG_S))
statusCode: _ => EVMC_SUCCESS
this: PROXY_ID
msg_sender: MSG_SENDER
callData: #abiCallData("testSignatureSplit", #toBytes(SIGNATURES, 65 *Int NR_SIG), #uint256(POS))
callValue: 0
proxy_storage:
    _:Map
+requires:
    // Range
    andBool #rangeAddress(PROXY_ID)
    andBool #rangeAddress(MSG_SENDER)
    andBool #rangeUInt(256, 65 *Int NR_SIG)
    andBool #range(0 <= POS < NR_SIG)
    andBool #rangeBytes(65 *Int NR_SIG, SIGNATURES)

    //substitutions
    andBool SIG_R ==Int #asWord( #bytesSegment(SIGNATURES, 65 *Int POS,         32, 65 *Int NR_SIG) )
    andBool SIG_S ==Int #asWord( #bytesSegment(SIGNATURES, 65 *Int POS +Int 32, 32, 65 *Int NR_SIG) )
    andBool SIG_V ==Int #asWord( #bytesSegment(SIGNATURES, 65 *Int POS +Int 64,  1, 65 *Int NR_SIG) )

    //fixed length
    andBool NR_SIG ==Int 3

[testSignatureSplit-pos0]
+requires:
    andBool POS ==Int 0

[testSignatureSplit-pos1]
+requires:
    andBool POS ==Int 1

[testSignatureSplit-pos2]
+requires:
    andBool POS ==Int 2

; return ecrecover(hash, v, r, s);
; bytes32 hash, uint8 v, bytes32 r, bytes32 s
[testEcrecover]
statusCode: _ => EVMC_SUCCESS
callData: #abiCallData("testEcrecover", #bytes32(HASH), #uint8(SIG_V), #bytes32(SIG_R), #bytes32(SIG_S))
callValue: 0
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(MASTER_COPY_ID) SetItem(PROXY_ID) SetItem(ORIGIN_ID) SetItem(1) _:Set
accounts:
    <account>
      ; precompiled account for ECCREC
      <acctID> 1 </acctID>
      <balance> 0 </balance>
      <code> .WordStack </code>
      <storage> .Map </storage>
      <origStorage> .Map </origStorage>
      <nonce> 0 </nonce>
    </account>
proxy_storage: _:Map
+requires:
    // Range
    andBool #rangeBytes( 32,        HASH)
    andBool #rangeUInt(   8,        SIG_V)
    andBool #rangeBytes( 32,        SIG_R)
    andBool #rangeBytes( 32,        SIG_S)

    andBool ECREC_DATA ==K #encodeArgs( #bytes32(HASH), #uint8(SIG_V), #bytes32(SIG_R), #bytes32(SIG_S) )

[testEcrecover-non-empty]
output: _ =>  #encodeArgs( #bytes32(#symEcrec( ECREC_DATA )) )
+requires:
    ; ECREC undefinedness case
    andBool notBool #ecrecEmpty( ECREC_DATA )

[testEcrecover-empty]
output: _ => #encodeArgs( #bytes32(0) )
+requires:
    ; ECREC undefinedness case
    andBool #ecrecEmpty( ECREC_DATA )


[pgm]
compiler: "Solidity"
safe_tx_typehash: "0x14d461bc7412367e924637b363c7bf29b8f47e2f84869f4426e5633d8af47b20"
domain_separator: 0
master_copy_code: "0x60806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806328f8ec991461009357806367b0fe371461012d57806380197293146101d75780639779872514610282578063b987453814610307578063ccafc38714610488578063e580940c146104bb578063f698da2514610604575b600080fd5b34801561009f57600080fd5b506100eb6004803603810190808035600019169060200190929190803560ff16906020019092919080356000191690602001909291908035600019169060200190929190505050610637565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561013957600080fd5b5061015c60048036038101908080356000191690602001909291905050506106c4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561019c578082015181840152602081019050610181565b50505050905090810190601f1680156101c95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e357600080fd5b50610248600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291905050506107e5565b604051808460ff1660ff16815260200183600019166000191681526020018260001916600019168152602001935050505060405180910390f35b34801561028e57600080fd5b506102e9600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610807565b60405180826000191660001916815260200191505060405180910390f35b34801561031357600080fd5b5061040d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610873565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561044d578082015181840152602081019050610432565b50505050905090810190601f16801561047a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561049457600080fd5b5061049d610a1c565b60405180826000191660001916815260200191505060405180910390f35b3480156104c757600080fd5b50610589600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035600019169060200190929190803560ff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a43565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105c95780820151818401526020810190506105ae565b50505050905090810190601f1680156105f65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561061057600080fd5b50610619610b8a565b60405180826000191660001916815260200191505060405180910390f35b6000600185858585604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af11580156106b0573d6000803e3d6000fd5b505050602060405103519050949350505050565b606060197f01000000000000000000000000000000000000000000000000000000000000000260017f0100000000000000000000000000000000000000000000000000000000000000026000548460405160200180857effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600101847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600101836000191660001916815260200182600019166000191681526020019450505050506040516020818303038152906040529050919050565b60008060006107f48585610b90565b8093508194508295505050509250925092565b6000816040518082805190602001908083835b60208310151561083f578051825260208201915060208101905060208303925061081a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b60607f14d461bc7412367e924637b363c7bf29b8f47e2f84869f4426e5633d8af47b206001028b8b8b6040518082805190602001908083835b6020831015156108d157805182526020820191506020810190506020830392506108ac565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208b8b8b8b8b8b8b604051602001808c600019166000191681526020018b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018a8152602001896000191660001916815260200188600281111561096c57fe5b60ff1681526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019b50505050505050505050505060405160208183030381529060405290509a9950505050505050505050565b7f14d461bc7412367e924637b363c7bf29b8f47e2f84869f4426e5633d8af47b2060010281565b60607f14d461bc7412367e924637b363c7bf29b8f47e2f84869f4426e5633d8af47b206001028b8b8b8b8b8b8b8b8b8b604051602001808c600019166000191681526020018b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018a81526020018960001916600019168152602001886002811115610ada57fe5b60ff1681526020018781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019b50505050505050505050505060405160208183030381529060405290509a9950505050505050505050565b60005481565b60008060008360410260208101860151925060408101860151915060ff604182018701511693505092509250925600a165627a7a723058205216ba96ba46fcb1befbb587e688a14a53b248f4286a11781dba3b08de7994c00029"
proxy_code: "0x60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634555d5c91461008b5780635c60da1b146100b6575b73ffffffffffffffffffffffffffffffffffffffff600054163660008037600080366000845af43d6000803e6000811415610086573d6000fd5b3d6000f35b34801561009757600080fd5b506100a061010d565b6040518082815260200191505060405180910390f35b3480156100c257600080fd5b506100cb610116565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006002905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050905600a165627a7a723058209831bad75772164414931a91aa4e9e2be55d2879d839299b8d19bbe1a373cde60029"
