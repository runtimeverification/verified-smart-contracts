; gnosis: v0.0.1 from https://github.com/gnosis/safe-contracts/releases/tag/v0.0.1
;   files GnosisSafePersonalEdition.json and Proxy.json, bytecode version: deployedBytecode
; k      branch: casper_logs_rebased_2
; kevm   commit: master da45d15f93d7872e06e83d1d753079ccc6e5007c , 07/05/2018.

[root]
code: {MASTER_COPY_CODE}
comment:
callDepth: CD
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
activeAccounts: SetItem(#MASTER_COPY_ID) SetItem(#PROXY_ID) SetItem(#ORIGIN_ID) SetItem(#EXEC_ACCT_TO) SetItem(#REFUND_RECEIVER) SetItem(#TOKEN_CONTRACT) SetItem(1) _:Set
; master_copy
master_copy_bal: MASTER_BAL
master_copy_storage: _
master_copy_origstorage: _
master_copy_nonce: _
; proxy
proxy_bal: PROXY_BAL
proxy_storage: _
proxy_origstorage: _
proxy_nonce: _
; origin
origin_bal: ORIGIN_BAL
origin_code: _
origin_storage: _
origin_origstorage: _
origin_nonce: _
; acct_to
acct_to_bal: ACCT_TO_BAL
acct_to_code: _
acct_to_storage: _
acct_to_origstorage: _
acct_to_nonce: _
; refund_receiver
receiver_bal: RECEIVER_BAL
receiver_code: _
receiver_storage: _
receiver_origstorage: _
receiver_nonce: _
; token_contract
token_contract_bal: TOKEN_CONTRACT_BAL
token_contract_code: _
token_contract_storage: _
token_contract_origstorage: _
token_contract_nonce: _
accounts:
requires:
    andBool #rangeUInt(256, MASTER_BAL)
    andBool #rangeUInt(256, PROXY_BAL)
    andBool #rangeUInt(256, ORIGIN_BAL)
    andBool #rangeUInt(256, ACCT_TO_BAL)
    andBool #rangeUInt(256, RECEIVER_BAL)
    andBool #rangeUInt(256, TOKEN_CONTRACT_BAL)
ensures:
attribute:

;
; GnosisSafe
;

[signatureSplit]
k: #execute ~> _
output: _
statusCode: _
callStack: _
this: #PROXY_ID
msg_sender: MSG_SENDER
callData: _
callValue: 0
wordStack: POS : SIGS_LOC : RETURN_LOC : WS =>
           RETURN_LOC : #asWord(#bufSeg(SIGS_BUF, 65 *Int POS +Int 32, 32)) : #asWord(#bufSeg(SIGS_BUF, 65 *Int POS, 32)) : #bufElm(SIGS_BUF, 65 *Int POS +Int 64) : WS
pc: 22163 => 22209
gas: #gas(INITGAS, NONMEMGAS, MEMGAS) => #gas(INITGAS, NONMEMGAS +Int 111, MEMGAS +Int (Cmem(BYZANTIUM, FINAL_MEM_USAGE) -Int Cmem(BYZANTIUM, MU)))
memoryUsed: MU => FINAL_MEM_USAGE
log: _
refund: _
coinbase: _
+requires:
    andBool #rangeUInt(256, SIGS_LOC)
    andBool #rangeAddress(MSG_SENDER)

    andBool #range(0 <= #sizeWordStack(WS) <= 1000)
    andBool #range(0 <= CD < 1024)

    andBool LAST_LOC ==Int SIGS_LOC +Int (65 *Int POS +Int 65)
    andBool FINAL_MEM_USAGE ==K #memoryUsageUpdate(MU, LAST_LOC, 32)

    andBool 0 <=Int POS
    andBool (POS +Int 1) *Int 65 <=Int SIGS_LEN
    andBool LAST_LOC +Int 32 <Int pow256

[signatureSplit-proof]
localMem: storeRange(storeRange(M, SIGS_LOC        , 32      , #buf(32, SIGS_LEN)),
                                   SIGS_LOC +Int 32, SIGS_LEN, #buf(SIGS_LEN, SIGNATURES))
+requires:
    andBool SIGS_BUF ==K #buf(SIGS_LEN, SIGNATURES)

[signatureSplit-trusted]
localMem: M
+requires:
    andBool SIGS_LEN ==Int #asWord(selectRange(M, SIGS_LOC, 32))
    andBool SIGS_BUF ==K selectRange(M, SIGS_LOC +Int 32, SIGS_LEN)
+attribute: [trusted, matching(#gas)]

; external call to signatureSplit should not change the state
[signatureSplit_external]
k: (#execute => #halt) ~> _
output: _ => .WordStack
statusCode: _ => EVMC_SUCCESS
callStack: _
this: #PROXY_ID
msg_sender: _
callData: #abiCallData("signatureSplit", (
            #bytes(_),
            #uint256(_) ))
callValue: _
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => {STOP_EXTERNAL_CALL}
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
log: _
refund: _
coinbase: _
proxy_storage: _:Map

[encodeTransactionData-internal]
; output = bytes32(32) bytes32(66) bytes1(0x19) bytes1(0x1) bytes32(DOMAIN_SEPARATOR) bytes32(SAFE_TX_HASH) bytes30(0)
; size = 160
k: #execute ~> _
output: _
statusCode: _
callStack: _
this: #PROXY_ID
msg_sender: MSG_SENDER
callData: _
callValue: 0
wordStack: NONCE : REFUND_RECEIVER : GAS_TOKEN : GAS_PRICE : DATA_GAS : SAFE_TX_GAS : OPERATION
                 : DATA_LEN_LOC : VALUE : TO : RETURN_LOC : WS
           => RETURN_LOC : INIT_USED_MEM_PTR +Int 384 : WS
localMem:INIT_MEM =>
  storeRange( storeRange( storeRange( storeRange( storeRange( storeRange( storeRange(
  storeRange( storeRange( storeRange( storeRange( storeRange( storeRange( storeRange(
  storeRange( storeRange( storeRange( storeRange(
  storeRange( INIT_MEM,
    ; internal computations, memory no longer used
    INIT_USED_MEM_PTR +Int 32,  32, _),
    INIT_USED_MEM_PTR +Int 64,  32, _),
    INIT_USED_MEM_PTR +Int 96,  32, _),
    INIT_USED_MEM_PTR +Int 128, 32, _),
    INIT_USED_MEM_PTR +Int 160, 32, _),
    INIT_USED_MEM_PTR +Int 192, 32, _),
    INIT_USED_MEM_PTR +Int 224, 32, _),
    INIT_USED_MEM_PTR +Int 256, 32, _),
    INIT_USED_MEM_PTR +Int 288, 32, _),
    INIT_USED_MEM_PTR +Int 320, 32, _),
    INIT_USED_MEM_PTR +Int 352, 32, _),
    INIT_USED_MEM_PTR,          32, _),
    64,                         32, _),

    ;start of result, divided into 4 parts:
    ;return abi.encodePacked(byte(0x19), byte(0x01), domainSeparator, safeTxHash)
    INIT_USED_MEM_PTR +Int 416, CONST_LEN, HEX_19_WS ),
    INIT_USED_MEM_PTR +Int 417, CONST_LEN, HEX_01_WS ),
    INIT_USED_MEM_PTR +Int 418, 32,        #buf(32, DOMAIN_SEPARATOR) ),
    INIT_USED_MEM_PTR +Int 450, 32,        #buf(32, SAFE_TX_HASH ) ),
    ;output len
    INIT_USED_MEM_PTR +Int 384, 32,        #buf(32, 66) ),
    ;next free memory loc
    64,                         32,        #buf(32, INIT_USED_MEM_PTR +Int 482) )
pc: 16193 => 16786
gas: #gas(INITGAS,
          NONMEMGAS => (NONMEMGAS +Int 6 *Int ((DATA_LEN +Int 31) /Int 32)) +Int 941,
          MEMGAS    =>  MEMGAS +Int (Cmem(BYZANTIUM, END_MEM_USED) -Int Cmem(BYZANTIUM, MU)) )
memoryUsed: MU => END_MEM_USED
log: _
refund: _
coinbase: _
proxy_storage: STORAGE
+requires:
    ; Range
    andBool #rangeAddress(MSG_SENDER)

    andBool #rangeAddress(          TO)
    andBool #rangeUInt( 256,        VALUE)
    andBool #rangeUInt( 256,        DATA_LEN)
    ;andBool #rangeBytes( DATA_LEN,  DATA)
    andBool #rangeUInt(   8,        OPERATION)
    ; enum Enum.Operation, 3 possible values encoded to 0-2.
    andBool OPERATION <=Int 2
    andBool #rangeUInt( 256,        SAFE_TX_GAS)
    andBool #rangeUInt( 256,        DATA_GAS)
    andBool #rangeUInt( 256,        GAS_PRICE)
    andBool #rangeAddress(          GAS_TOKEN)
    andBool #rangeAddress(          REFUND_RECEIVER)
    andBool #rangeUInt( 256,        NONCE)

    andBool #rangeBytes( 32,        DOMAIN_SEPARATOR)

    ; TODO more precise value. 1000 is too little.
    andBool #range(0 <= #sizeWordStack(WS) <= 900)

    andBool DATA_LEN <Int 2 ^Int 16

    andBool SAFE_TX_HASH ==Int keccak( #encodeArgs(
                                 #bytes32(#parseHexWord({SAFE_TX_TYPEHASH})),
                                 #address(TO),
                                 #uint256(VALUE),
                                 #bytes32(keccak(DATA_BUF)),
                                 #uint8(OPERATION),
                                 #uint256(SAFE_TX_GAS),
                                 #uint256(DATA_GAS),
                                 #uint256(GAS_PRICE),
                                 #address(GAS_TOKEN),
                                 #address(REFUND_RECEIVER),
                                 #uint256(NONCE) ))
    andBool INIT_USED_MEM_PTR  ==Int #ceil32(DATA_LEN) +Int DATA_LEN_LOC +Int 32

    ; local memory ranges
    ; on encodeTransactionData-public:
    ; andBool DATA_LEN_LOC ==Int 128
    ; DATA_LEN_LOC is the base memory location for all other locations.
    ; We give a wider range enough to cover all execution paths.
    andBool #range(128 <= DATA_LEN_LOC <= 2 ^Int 16)
    andBool DATA_LEN_LOC modInt 32 ==Int 0
    andBool DATA_BUF_LOC  ==Int DATA_LEN_LOC +Int 32
    ; required to resolve select...store expressions.
    andBool INIT_USED_MEM_ACTUAL ==Int DATA_LEN_LOC +Int 32 +Int DATA_LEN
    andBool END_MEM_USED   ==Int #memoryUsageUpdate(MU, INIT_USED_MEM_PTR +Int 450, 32)

    ; storage
    andBool select(STORAGE, #hashedLocation({COMPILER}, {DOMAIN_SEPARATOR}, .IntList)) ==Int DOMAIN_SEPARATOR

[encodeTransactionData-internal-proof]
+requires:
    andBool CONST_LEN ==Int 32
    andBool HEX_19_WS ==K #padRightToWidth(32, #parseByteStack("0x19"))
    andBool HEX_01_WS ==K #padRightToWidth(32, #parseByteStack("0x01"))
    andBool INIT_MEM  ==K storeRange( storeRange( storeRange( storeRange( _,
                              64,                   32,       #buf(32, INIT_USED_MEM_PTR) ),
                              DATA_LEN_LOC,         32,       #buf(32, DATA_LEN) ),
                              DATA_BUF_LOC,         DATA_LEN, DATA_BUF ),
                              INIT_USED_MEM_ACTUAL, 32,       #buf(32, 0) )
    andBool DATA_BUF  ==K #buf(DATA_LEN, DATA)

[encodeTransactionData-internal-proof-1]
+requires:
    andBool DATA_LEN ==Int 0

[encodeTransactionData-internal-proof-2]
+requires:
    andBool 0 <Int DATA_LEN

[encodeTransactionData-internal-trusted]
localMem: INIT_MEM =>
  storeRange( storeRange( storeRange( storeRange( storeRange( storeRange(
  storeRange( INIT_MEM,
    ; internal computations, memory no longer used
    INIT_USED_MEM_PTR,          384, _ ),

    ;start of result, divided into 4 parts:
    ;return abi.encodePacked(byte(0x19), byte(0x01), domainSeparator, safeTxHash)
    INIT_USED_MEM_PTR +Int 416, CONST_LEN, HEX_19_WS ),
    INIT_USED_MEM_PTR +Int 417, CONST_LEN, HEX_01_WS ),
    INIT_USED_MEM_PTR +Int 418, 32,        #buf(32, DOMAIN_SEPARATOR) ),
    INIT_USED_MEM_PTR +Int 450, 32,        #buf(32, SAFE_TX_HASH ) ),
    ;output len
    INIT_USED_MEM_PTR +Int 384, 32,        #buf(32, 66) ),
    ;next free memory loc
    64,                         32,        #buf(32, INIT_USED_MEM_PTR +Int 482) )
+requires:
    andBool CONST_LEN         ==Int 1
    andBool HEX_19_WS         ==K   #parseByteStack("0x19")
    andBool HEX_01_WS         ==K   #parseByteStack("0x01")
    andBool INIT_USED_MEM_PTR ==Int #asWord(selectRange(INIT_MEM, 64,                   32))
    andBool DATA_LEN          ==Int #asWord(selectRange(INIT_MEM, DATA_LEN_LOC,         32))
    andBool DATA_BUF          ==K           selectRange(INIT_MEM, DATA_BUF_LOC,         DATA_LEN)
    andBool #buf(32, 0)       ==K           selectRange(INIT_MEM, INIT_USED_MEM_ACTUAL, 32)
+attribute: [trusted, matching(#gas)]

[encodeTransactionData-public]
; output = bytes32(32) bytes32(66) bytes1(0x19) bytes1(0x1) bytes32(DOMAIN_SEPARATOR) bytes32(SAFE_TX_HASH) bytes30(0)
; size = 160
k: (#execute => #halt) ~> _
output: _ => #encodeArgs( #bytes(
                #parseHexWord("0x19") : #parseHexWord("0x1")
                : #encodeArgs(#bytes32(DOMAIN_SEPARATOR), #bytes32(SAFE_TX_HASH))
             ))
statusCode: _ => EVMC_SUCCESS
callStack: _
this: #PROXY_ID
msg_sender: MSG_SENDER
callData: #abiCallData("encodeTransactionData", (
            #address(TO),
            #uint256(VALUE),
            #bytes(#buf(DATA_LEN, DATA)),
            ; Enum.Operation operation, represented as uint8
            #uint8(OPERATION),
            #uint256(SAFE_TX_GAS),
            #uint256(DATA_GAS),
            #uint256(GAS_PRICE),
            #address(GAS_TOKEN),
            #address(REFUND_RECEIVER),
            #uint256(NONCE) ))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
log: _
refund: _
coinbase: _
proxy_storage:
    store(M, #hashedLocation({COMPILER}, {DOMAIN_SEPARATOR}, .IntList), DOMAIN_SEPARATOR)
+requires:
    ; Range
    andBool #rangeAddress(MSG_SENDER)
    andBool #rangeAddress(          TO)
    andBool #rangeUInt( 256,        VALUE)
    andBool #rangeUInt( 256,        DATA_LEN)
    ;andBool #rangeBytes( DATA_LEN,  DATA)
    andBool #rangeUInt(   8,        OPERATION)
    ; enum Enum.Operation, 3 possible values encoded to 0-2.
    andBool OPERATION <=Int 2
    andBool #rangeUInt( 256,        SAFE_TX_GAS)
    andBool #rangeUInt( 256,        DATA_GAS)
    andBool #rangeUInt( 256,        GAS_PRICE)
    andBool #rangeAddress(          GAS_TOKEN)
    andBool #rangeAddress(          REFUND_RECEIVER)
    andBool #rangeUInt( 256,        NONCE)

    andBool #rangeBytes( 32,        DOMAIN_SEPARATOR)
    andBool #range(0 <= CD < 1024)

    andBool DATA_LEN <Int 2 ^Int 16

    andBool SAFE_TX_HASH ==Int keccak( #encodeArgs(
                                 #bytes32(#parseHexWord({SAFE_TX_TYPEHASH})),
                                 #address(TO),
                                 #uint256(VALUE),
                                 #bytes32(keccak(#buf(DATA_LEN, DATA))),
                                 #uint8(OPERATION),
                                 #uint256(SAFE_TX_GAS),
                                 #uint256(DATA_GAS),
                                 #uint256(GAS_PRICE),
                                 #address(GAS_TOKEN),
                                 #address(REFUND_RECEIVER),
                                 #uint256(NONCE) ))

[encodeTransactionData-public-1]
+requires:
    andBool DATA_LEN ==Int 0

[encodeTransactionData-public-2]
+requires:
    andBool 0 <Int DATA_LEN

[getTransactionHash]
k: (#execute => #halt) ~> _
output: _ => #padToWidth(32, #asByteStack(keccak(TRANSACTION_DATA)) )
statusCode: _ => EVMC_SUCCESS
callStack: _
this: #PROXY_ID
msg_sender: MSG_SENDER
callData: #abiCallData("getTransactionHash", (
            #address(TO),
            #uint256(VALUE),
            #bytes(#buf(DATA_LEN, DATA)),
            #uint8(OPERATION),
            #uint256(SAFE_TX_GAS),
            #uint256(DATA_GAS),
            #uint256(GAS_PRICE),
            #address(GAS_TOKEN),
            #address(REFUND_RECEIVER),
            #uint256(NONCE) ))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
log: _
refund: _
coinbase: _
proxy_storage:
    store(M, #hashedLocation({COMPILER}, {DOMAIN_SEPARATOR}, .IntList), DOMAIN_SEPARATOR)
+requires:
    ; Range
    andBool #rangeAddress(MSG_SENDER)

    andBool #rangeAddress(          TO)
    andBool #rangeUInt( 256,        VALUE)
    andBool #rangeUInt( 256,        DATA_LEN)
    andBool #rangeUInt(   8,        OPERATION)
    andBool OPERATION <=Int 2
    andBool #rangeUInt( 256,        SAFE_TX_GAS)
    andBool #rangeUInt( 256,        DATA_GAS)
    andBool #rangeUInt( 256,        GAS_PRICE)
    andBool #rangeAddress(          GAS_TOKEN)
    andBool #rangeAddress(          REFUND_RECEIVER)
    andBool #rangeUInt( 256,        NONCE)

    andBool #rangeBytes( 32,        DOMAIN_SEPARATOR)

    andBool DATA_LEN <Int 2 ^Int 16

    ; computed data
    andBool SAFE_TX_HASH ==Int keccak( #encodeArgs(
                                 #bytes32(#parseHexWord({SAFE_TX_TYPEHASH})),
                                 #address(TO),
                                 #uint256(VALUE),
                                 #bytes32(keccak(#buf(DATA_LEN, DATA))),
                                 #uint8(OPERATION),
                                 #uint256(SAFE_TX_GAS),
                                 #uint256(DATA_GAS),
                                 #uint256(GAS_PRICE),
                                 #address(GAS_TOKEN),
                                 #address(REFUND_RECEIVER),
                                 #uint256(NONCE) ))
    andBool TRANSACTION_DATA ==K
                #parseHexWord("0x19") : #parseHexWord("0x1")
              : #encodeArgs(#bytes32(DOMAIN_SEPARATOR), #bytes32(SAFE_TX_HASH))

[getTransactionHash-1]
+requires:
    andBool DATA_LEN ==Int 0

[getTransactionHash-2]
+requires:
    andBool 0 <Int DATA_LEN

; Simplified handlePayment
[handlePayment_trusted]
k: (#execute => #handlePaymentSpecApplied) ~> _
output: _
statusCode: _
callStack: _
this: #PROXY_ID
msg_sender: MSG_SENDER
callData: _
callValue: 0
wordStack: REFUND_RECEIVER : GAS_TOKEN : GAS_PRICE : DATA_GAS : START_GAS : RETURN_LOC : WS
localMem: _
pc: 19729
gas: _
memoryUsed: _
log: _
refund: _
coinbase: _
+requires:
    andBool #rangeAddress(MSG_SENDER)
    andBool #rangeUInt(256, START_GAS)
    andBool #rangeUInt(256, DATA_GAS)
    andBool #rangeUInt(256, GAS_PRICE)
    andBool #rangeAddress(GAS_TOKEN)
    andBool #rangeAddress(REFUND_RECEIVER)

    andBool #range(0 <= #sizeWordStack(WS) <= 1000)
    // call send() in the handlePayment
    andBool #range(0 <= CD < 1023)
    ; GAS_LEFT <Int START_GAS is always satisfied in the context of execTransaction
    ;andBool GAS_LEFT <Int START_GAS
    andBool 0 <Int GAS_PRICE
+attribute: [trusted]

[handlePayment]
callStack: _
this: #PROXY_ID
msg_sender: MSG_SENDER
callData: _
callValue: 0
localMem: _
log: _
refund: _
coinbase: _
+requires:
    andBool #rangeUInt(256, START_GAS)
    andBool #rangeUInt(256, DATA_GAS)
    andBool #rangeUInt(256, GAS_PRICE)
    andBool #rangeAddress(GAS_TOKEN)

    andBool #range(0 <= #sizeWordStack(WS) <= 1000)
    // call send() in the handlePayment
    andBool #range(0 <= CD < 1023)

    andBool GAS_LEFT ==Int #gas(INITGAS, NONMEMGAS +Int 21, MEMGAS)
    andBool TOTAL_GAS ==Int (START_GAS -Int GAS_LEFT) +Int DATA_GAS
    andBool TOTAL_AMOUNT ==Int TOTAL_GAS *Int GAS_PRICE

    // The function is only used in execTransction and START_GAS > gasleft()
    andBool GAS_LEFT <Int START_GAS
    // The function is only used in execTransction and GAS_PRICE > 0
    andBool 0 <Int GAS_PRICE

[handlePayment-arithmetic-overflow]
k: (#execute => #halt) ~> _
output: _ => .WordStack
statusCode: _ => EVMC_REVERT
wordStack: REFUND_RECEIVER : GAS_TOKEN : GAS_PRICE : DATA_GAS : START_GAS : RETURN_LOC : WS => _
memoryUsed: MU

[handlePayment-arithmetic-overflow-1]
pc: 19729 => 22332
gas: #gas(INITGAS, NONMEMGAS, MEMGAS) => #gas(INITGAS, NONMEMGAS +Int 216, MEMGAS)
+requires:
    andBool pow256 <=Int TOTAL_GAS

[handlePayment-arithmetic-overflow-2]
pc: 19729 => 22393
gas: #gas(INITGAS, NONMEMGAS, MEMGAS) => #gas(INITGAS, NONMEMGAS +Int 380, MEMGAS)
+requires:
    andBool TOTAL_GAS <Int pow256
    andBool pow256 <=Int TOTAL_AMOUNT

[handlePayment-send]
memoryUsed: MU => FINAL_MEM_USAGE
+requires:
    // ether payment
    andBool GAS_TOKEN ==Int 0
    andBool CALL_PC ==Int 19952
    // (START_GAS - gasleft()) + DATA_GAS < pow256
    andBool TOTAL_GAS <Int pow256
    andBool TOTAL_AMOUNT <Int pow256

[handlePayment-send-success]
k: (#execute => #execute) ~> _
output: _ => _
statusCode: _
wordStack: REFUND_RECEIVER : GAS_TOKEN : GAS_PRICE : DATA_GAS : START_GAS : RETURN_LOC : WS => RETURN_LOC : WS
pc: 19729 => 20290
+requires:
    andBool FINAL_MEM_USAGE ==K #memoryUsageUpdate(MU, 64, 32)

;TODO: 1) ORIGIN_ID == #EXEC_ACCT_TO
;      2) ORIGIN_ID == #REFUND_RECEIVER
;      3) ORIGIN_ID == #EXEC_TO
[handlePayment-send-success-origin]
gas: #gas(INITGAS, NONMEMGAS, MEMGAS) => #gas(INITGAS, NONMEMGAS +Int #callGas(BYZANTIUM, 0, #ORIGIN_ID, TOTAL_AMOUNT, true) +Int 618, MEMGAS +Int (Cmem(BYZANTIUM, FINAL_MEM_USAGE) -Int Cmem(BYZANTIUM, MU)))
proxy_bal: PROXY_BAL => PROXY_BAL -Int TOTAL_AMOUNT
origin_bal: ORIGIN_BAL => ORIGIN_BAL +Int TOTAL_AMOUNT
+requires:
    andBool REFUND_RECEIVER ==Int 0
    andBool ORIGIN_ID ==Int #ORIGIN_ID
    andBool #callSuccess(CALL_PC, #ORIGIN_ID)
    andBool TOTAL_AMOUNT <=Int PROXY_BAL
    andBool ORIGIN_BAL +Int TOTAL_AMOUNT <Int pow256

[handlePayment-send-success-origin-trusted]
+attribute: [trusted, matching(#gas)]

;TODO: 1) REFUND_RECEIVER == #PROXY_ID
;      2) REFUND_RECEIVER == #MASTER_COPY_ID
;      3) REFUND_RECEIVER == #ORIGIN_ID
;      4) REFUND_RECEIVER == #EXEC_TO
[handlePayment-send-success-receiver]
gas: #gas(INITGAS, NONMEMGAS, MEMGAS) => #gas(INITGAS, NONMEMGAS +Int #callGas(BYZANTIUM, 0, #REFUND_RECEIVER, TOTAL_AMOUNT, true) +Int 629, MEMGAS +Int (Cmem(BYZANTIUM, FINAL_MEM_USAGE) -Int Cmem(BYZANTIUM, MU)))
proxy_bal: PROXY_BAL => PROXY_BAL -Int TOTAL_AMOUNT
receiver_bal: RECEIVER_BAL => RECEIVER_BAL +Int TOTAL_AMOUNT
+requires:
    andBool REFUND_RECEIVER ==Int #REFUND_RECEIVER

    andBool #callSuccess(CALL_PC, #REFUND_RECEIVER)
    andBool TOTAL_AMOUNT <=Int PROXY_BAL
    andBool RECEIVER_BAL +Int TOTAL_AMOUNT <Int pow256

[handlePayment-send-failure]
k: (#execute => #halt) ~> _
output: _ => _
statusCode: _ => EVMC_REVERT
wordStack: REFUND_RECEIVER : GAS_TOKEN : GAS_PRICE : DATA_GAS : START_GAS : RETURN_LOC : WS => _
localMem: storeRange(M, 64, 32, #buf(32, NEXT_LOC)) => _
pc: 19729 => 20110
+requires:
    andBool #rangeUInt(256, NEXT_LOC)
    // Practical bound to help memory reasoning
    andBool #range(96 <= NEXT_LOC < 2 ^Int 32)

    andBool FINAL_MEM_USAGE ==K #memoryUsageUpdate(MU, NEXT_LOC +Int 100, 32)

[handlePayment-send-failure-origin]
gas: #gas(INITGAS, NONMEMGAS, MEMGAS) => #gas(INITGAS, NONMEMGAS +Int #callGas(BYZANTIUM, 0, #ORIGIN_ID, TOTAL_AMOUNT, false) +Int 714, MEMGAS +Int (Cmem(BYZANTIUM, FINAL_MEM_USAGE) -Int Cmem(BYZANTIUM, MU)))
+requires:
    andBool REFUND_RECEIVER ==Int 0
    andBool ORIGIN_ID ==Int #ORIGIN_ID
    andBool #callFailure(CALL_PC, #ORIGIN_ID)

[handlePayment-send-failure-receiver]
gas: #gas(INITGAS, NONMEMGAS, MEMGAS) => #gas(INITGAS, NONMEMGAS +Int #callGas(BYZANTIUM, 0, #REFUND_RECEIVER, TOTAL_AMOUNT, false) +Int 725, MEMGAS +Int (Cmem(BYZANTIUM, FINAL_MEM_USAGE) -Int Cmem(BYZANTIUM, MU)))
+requires:
    andBool REFUND_RECEIVER ==Int #REFUND_RECEIVER
    andBool #callFailure(CALL_PC, #REFUND_RECEIVER)

[handlePayment-transferToken]
output: _ => _
gas: #gas(INITGAS, NONMEMGAS, MEMGAS) => _
memoryUsed: MU => FINAL_MEM_USAGE
token_contract_storage: _ => _
+requires:
    // ERC20 token payment
    andBool GAS_TOKEN =/=Int 0
    andBool GAS_TOKEN ==Int #TOKEN_CONTRACT
    // TODO: GAS_TOKEN ==Int ... ?
    // call to `transfer`in transferToken
    andBool CALL_PC ==Int 22623
    // (START_GAS - gasleft()) + DATA_GAS < pow256
    andBool TOTAL_GAS <Int pow256
    andBool TOTAL_AMOUNT <Int pow256

[handlePayment-transferToken-success]
k: (#execute => #execute) ~> _
statusCode: _
wordStack: REFUND_RECEIVER : GAS_TOKEN : GAS_PRICE : DATA_GAS : START_GAS : RETURN_LOC : WS => RETURN_LOC : WS
pc: 19729 => 20290
localMem: storeRange(M, 64, 32, #buf(32, NEXT_LOC)) => _
+requires:
    // Practical bound to help memory reasoning
    andBool #range(96 <= NEXT_LOC < 2 ^Int 32)

    andBool #tokenTransferCallSuccess(CALL_PC, GAS_TOKEN)

; returndatasize == 0
[handlePayment-transferToken-success-no_return]
+requires:
    andBool #tokenTransferCallReturnSize(CALL_PC, GAS_TOKEN, NOW) ==Int 0
    ; andBool FINAL_MEM_USAGE ==K #memoryUsageUpdate(MU, NEXT_LOC +Int 68, 32)

; returndatasize == 0x20, success == 1, mload(ptr) =/= 0
[handlePayment-transferToken-success-return_nonzero]
+requires:
    andBool #tokenTransferCallReturnSize(CALL_PC, GAS_TOKEN, NOW) ==Int 32
    andBool #range(0 < #tokenTransferCallReturnValue(CALL_PC, GAS_TOKEN, NOW) <= maxUInt256)

    ; andBool FINAL_MEM_USAGE ==K #memoryUsageUpdate(MU, NEXT_LOC +Int 100, #tokenTransferCallReturnSize(CALL_PC, GAS_TOKEN, NOW))

[handlePayment-transferToken-failure]
k: (#execute => #halt) ~> _
statusCode: _ => EVMC_REVERT
wordStack: REFUND_RECEIVER : GAS_TOKEN : GAS_PRICE : DATA_GAS : START_GAS : RETURN_LOC : WS => _
localMem: storeRange(M, 64, 32, #buf(32, NEXT_LOC)) => _
pc: 19729 => 20280
+requires:
    andBool #rangeUInt(256, NEXT_LOC)
    // Practical bound to help memory reasoning
    andBool #range(96 <= NEXT_LOC < 2 ^Int 32)


; returndatasize == 0, success == 0
[handlePayment-transferToken-failure-no_return]
+requires:
    andBool #tokenTransferCallFailure(CALL_PC, GAS_TOKEN)
    andBool #tokenTransferCallReturnSize(CALL_PC, GAS_TOKEN, NOW) ==Int 0

; returndatasize == 0x20, success == 1, mload(ptr) == 0
[handlePayment-transferToken-failure-return0]
+requires:
    andBool #tokenTransferCallSuccess(CALL_PC, GAS_TOKEN)
    andBool #tokenTransferCallReturnSize(CALL_PC, GAS_TOKEN, NOW) ==Int 32
    andBool #tokenTransferCallReturnValue(CALL_PC, GAS_TOKEN, NOW) ==Int 0

    andBool FINAL_MEM_USAGE ==K #memoryUsageUpdate(MU, NEXT_LOC +Int 200, 32)

; returndatasize == 0x20, success == 0
[handlePayment-transferToken-failure-call_failure]
+requires:
    andBool #tokenTransferCallFailure(CALL_PC, GAS_TOKEN)
    andBool #tokenTransferCallReturnSize(CALL_PC, GAS_TOKEN, NOW) ==Int 32
    andBool #rangeUInt(256, #tokenTransferCallReturnValue(CALL_PC, GAS_TOKEN, NOW))

; default
[handlePayment-transferToken-failure-default]
+requires:
    andBool #rangeUInt(256, #tokenTransferCallReturnSize(CALL_PC, GAS_TOKEN, NOW))
    andBool #tokenTransferCallReturnSize(CALL_PC, GAS_TOKEN, NOW) =/=Int 0
    andBool #tokenTransferCallReturnSize(CALL_PC, GAS_TOKEN, NOW) =/=Int 32

[handlePayment-transferToken-failure-default-call_success]
+requires:
    andBool #tokenTransferCallSuccess(CALL_PC, GAS_TOKEN)

[handlePayment-transferToken-failure-default-call_failure]
+requires:
    andBool #tokenTransferCallFailure(CALL_PC, GAS_TOKEN)

; external call to handlePayment should not change the state
[handlePayment_external]
k: (#execute => #halt) ~> _
output: _ => .WordStack
statusCode: _ => EVMC_SUCCESS
callStack: _
this: #PROXY_ID
msg_sender: _
callData: #abiCallData("handlePayment", (
            #uint256(_),
            #uint256(_),
            #uint256(_),
            #address(_),
            #address(_) ))
callValue: _
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => {STOP_EXTERNAL_CALL}
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
log: _
refund: _
coinbase: _
proxy_storage: _:Map

[checkSignatures_trusted_exception]
k: (#execute => #halt) ~> _
output: _ => _
statusCode: _ => EVMC_REVERT
callStack: _
this: #PROXY_ID
msg_sender: _
callData: _
callValue: _
log: _ => _
refund: _ => _
coinbase: _
pc: {PC_FUN_START} => 18693
gas: #gas(_, _ => _, _ => _)
memoryUsed: _ => _
wordStack: _ => _
localMem: _ => _
+requires:
    ; enough signatures
    andBool THRESHOLD *Int 65 <=Int SIGS_LEN
    andBool #checkSignaturesException
attribute: [trusted, matching(#gas)]
PC_FUN_START: 18250

[checkSignatures_trusted]
k: #execute ~> _
output: _ => _
statusCode: _ => _
callStack: _
this: #PROXY_ID
msg_sender: MSG_SENDER
callData: _
callValue: 0
log: _
refund: _
coinbase: _
pc: {PC_FUN_START} => {PC_FUN_END}
gas: #gas(INITGAS,
          NONMEMGAS => NONMEMGAS +Int #checkSigsGasNonMem,
          MEMGAS    => MEMGAS +Int (Cmem(BYZANTIUM, FINAL_MEM_USAGE) -Int Cmem(BYZANTIUM, MU)))
memoryUsed: MU => FINAL_MEM_USAGE
wordStack:
    ; parameters
    {CONSUME_HASH} : SIGS_LOC : TX_DATA_LOC : TX_DATA_HASH :
    ; return address
    RETURN_LOC : WS
    =>
    {WORD_STACK_RHS}
localMem: M1 =>
    storeRange(storeRange(storeRange(storeRange(storeRange(M2,
      TX_DATA_LOC        , 32         , #buf(32, TX_DATA_LEN)),
      TX_DATA_LOC +Int 32, TX_DATA_LEN, TX_DATA_BUF),
      SIGS_LOC           , 32         , #buf(32, SIGS_LEN)),
      SIGS_LOC +Int 32   , SIGS_LEN   , SIGS_BUF),
      64                 , 32         , #buf(32, #checkSigsNextLoc(MU)))
proxy_storage:
   S:Map
+requires:
    ; elements
    andBool FINAL_MEM_USAGE ==Int #checkSigsFinalMemUsed(MU)
    andBool THRESHOLD       ==Int select(S, #hashedLocation({COMPILER}, {THRESHOLD}, .IntList))
    andBool TX_DATA_LEN     ==Int #asWord(selectRange(M1, TX_DATA_LOC, 32))
    andBool SIGS_LEN        ==Int #asWord(selectRange(M1, SIGS_LOC,    32))

    andBool TX_DATA_BUF ==K selectRange(M1, TX_DATA_LOC +Int 32, TX_DATA_LEN)
    andBool SIGS_BUF    ==K selectRange(M1, SIGS_LOC +Int 32, SIGS_LEN)

    ; no overflow
    andBool #rangeUInt(256, THRESHOLD *Int 65)

    ; ranges
    andBool #range(0 <= #sizeWordStack(WS) <= 1000 -Int 12)

    andBool #range(0 <= CD < 1023)
    ; bool consumeHash
    andBool #range(0 <= {CONSUME_HASH} <= 1)
    ; bytes memory signatures
    andBool #rangeUInt(256, SIGS_LOC)
    ; bytes memory data
    andBool #rangeUInt(256, TX_DATA_LOC)
    ; bytes32 dataHash
    andBool #rangeUInt(256, TX_DATA_HASH)
    andBool #rangeUInt(256, THRESHOLD)
    andBool #rangeUInt(256, TX_DATA_LEN)
    andBool #rangeUInt(256, SIGS_LEN)
    andBool #rangeAddress(MSG_SENDER)

    ; practical bounds for localMem address
    andBool #range(96 <= SIGS_LOC          < 2 ^Int 32)
    andBool #range(96 <= TX_DATA_LOC       < 2 ^Int 32)
    ; rough bounds for lengths related to localMem address
    andBool TX_DATA_LEN <Int 2 ^Int 16
    andBool SIGS_LEN    <Int 2 ^Int 16
    andBool THRESHOLD   <Int 2 ^Int 32

    ; no overlap between data and sigatures
    andBool TX_DATA_LOC +Int 32 +Int TX_DATA_LEN <=Int SIGS_LOC

    ; contract invariants
    andBool 1 <=Int THRESHOLD
+ensures:
    andBool #rangeUInt(256, #checkSigsNextLoc(MU))
    andBool #range(96 <= #checkSigsNextLoc(MU) < 2 ^Int 32)
    andBool #range(SIGS_LOC +Int 32 +Int #ceil32(SIGS_LEN) <= #checkSigsNextLoc(MU) < 2 ^Int 32)

+attribute: [trusted, matching(#gas)]

CONSUME_HASH: 1

PC_FUN_START: 18250
PC_FUN_END:   19453

[checkSignatures_trusted-success]
+requires:
    ; enough signatures
    andBool THRESHOLD *Int 65 <=Int SIGS_LEN
    ; valid signatures
    andBool #enoughValidSigs
WORD_STACK_RHS: RETURN_LOC : 1 : WS


[checkSignatures_trusted-failure]
+requires:
    ; not enough signaures or invalid signatures
    andBool ( SIGS_LEN <Int THRESHOLD *Int 65
       orBool notBool #enoughValidSigs )
WORD_STACK_RHS: RETURN_LOC : 0 : WS

; internal
[checkSignatures]
k: #execute ~> _
output: _ => _
statusCode: _ => _
callStack: _
this: #PROXY_ID
msg_sender: MSG_SENDER
callData: _
callValue: 0
memoryUsed: MU => FINAL_MEM_USAGE
gas: #gas(INITGAS, NONMEMGAS, MEMGAS) => _
log: _
refund: _
coinbase: _
proxy_storage:
   S:Map
pc: {PC_FUN_START} => {PC_FUN_END}
wordStack:
    ; parameters
    {CONSUME_HASH} : SIGS_LOC : TX_DATA_LOC : TX_DATA_HASH :
    ; return address
    RETURN_LOC : WS
    =>
    {WORD_STACK_RHS}
localMem:
    storeRange(storeRange(storeRange(storeRange(storeRange(M,
      TX_DATA_LOC        , 32         , #buf(32, TX_DATA_LEN)),
      TX_DATA_LOC +Int 32, TX_DATA_LEN, #buf(TX_DATA_LEN, TX_DATA)),
      SIGS_LOC           , 32         , #buf(32, SIGS_LEN)),
      SIGS_LOC +Int 32   , SIGS_LEN   , #buf(SIGS_LEN, SIGS)),
      64                 , 32         , #buf(32, NEXT_LOC))
    =>
    {MEM_RHS}
MEM_RHS: M2
+requires:
    ; elements
    andBool THRESHOLD ==Int select(S, #hashedLocation({COMPILER}, {THRESHOLD}, .IntList))

    ; no overflow
    andBool #rangeUInt(256, THRESHOLD *Int 65)

    ; <wordStack> when calling signatureSplit:
    ; I : SIGS_LOC : RETURN_LOC : I : S0 : ... : RETURN_LOC : WS
    ;                             ^^^^^^^^^^^^^^^^^^^^^^^^^ 12 elems
    ; NOTE: need to consider the peak size of stack during the execution
    andBool #range(0 <= #sizeWordStack(WS) <= 1000 -Int 12)

    andBool #range(SIGS_LOC +Int 32 +Int #ceil32(SIGS_LEN) <= NEXT_LOC < 2 ^Int 32)

    ; ranges
    andBool #range(0 <= CD < 1023)
    ; bool consumeHash
    andBool #range(0 <= {CONSUME_HASH} <= 1)
    ; bytes memory signatures
    andBool #rangeUInt(256, SIGS_LOC)
    ; bytes memory data
    andBool #rangeUInt(256, TX_DATA_LOC)
    ; bytes32 dataHash
    andBool #rangeUInt(256, TX_DATA_HASH)
    ; andBool #range(0 <= #sizeWordStack(WS) <= 990)
    andBool #rangeUInt(256, THRESHOLD)
    andBool #rangeUInt(256, TX_DATA_LEN)
    andBool #rangeUInt(256, SIGS_LEN)
    andBool #rangeUInt(256, NEXT_LOC)
    andBool #rangeAddress(MSG_SENDER)

    ; practical bounds for localMem address
    andBool #range(96 <= SIGS_LOC    < 2 ^Int 32)
    andBool #range(96 <= TX_DATA_LOC < 2 ^Int 32)
    andBool #range(96 <= NEXT_LOC    < 2 ^Int 32)
    ; rough bounds for lengths related to localMem address
    andBool TX_DATA_LEN <Int 2 ^Int 16
    andBool SIGS_LEN    <Int 2 ^Int 16
    andBool THRESHOLD   <Int 2 ^Int 32

    ; no overlap between data and sigatures
    andBool TX_DATA_LOC +Int 32 +Int TX_DATA_LEN <=Int SIGS_LOC

    ; accounts
    andBool #PROXY_ID =/=Int 1

    ; contract invariants
    andBool 1 <=Int THRESHOLD

    ; assumption
    andBool #rangeAddress(select(S, #hashedLocation({COMPILER}, {OWNERS}, #signer({SIGS_BUF}, 0, TX_DATA_HASH))))
    andBool #rangeAddress(#signer({SIGS_BUF}, 0, TX_DATA_HASH))

+ensures:
    andBool selectRange(M2, TX_DATA_LOC        , 32      ) ==K #buf(32, TX_DATA_LEN)
    andBool selectRange(M2, TX_DATA_LOC +Int 32, TX_DATA_LEN) ==K #buf(TX_DATA_LEN, TX_DATA)
    andBool selectRange(M2, SIGS_LOC        , 32      ) ==K #buf(32, SIGS_LEN)
    andBool selectRange(M2, SIGS_LOC +Int 32, SIGS_LEN) ==K #buf(SIGS_LEN, SIGS)
    andBool #asWord(selectRange(M2, 64, 32)) >=Int NEXT_LOC

CONSUME_HASH: 1

PC_FUN_START: 18250
PC_LOOP_HEAD: 18292
PC_FUN_END:   19453

SIGS_BUF: #buf(SIGS_LEN, SIGS)
DATA_BUF: #buf(TX_DATA_LEN, TX_DATA)


[checkSignatures-success]
+requires:
    ; enough signatures
    andBool SIGS_LEN >=Int THRESHOLD *Int 65
    ; valid signatures
    andBool #fii({SIGS_BUF}, TX_DATA_HASH, {DATA_BUF}, S, MSG_SENDER) >=Int THRESHOLD
WORD_STACK_RHS: RETURN_LOC : 1 : WS

[checkSignatures-failure]
WORD_STACK_RHS: RETURN_LOC : 0 : WS

[checkSignatures-failure-1]
+requires:
    ; not enough signatures
    andBool SIGS_LEN <Int THRESHOLD *Int 65

[checkSignatures-failure-2]
+requires:
    ; enough signatures
    andBool SIGS_LEN >=Int THRESHOLD *Int 65
    ; invalid signatures
    andBool #fii({SIGS_BUF}, TX_DATA_HASH, {DATA_BUF}, S, MSG_SENDER) <Int THRESHOLD


[checkSignatures-loop]
pc: {PC_LOOP_HEAD} => {PC_FUN_END}
memoryUsed: MU => MEM_USAGE_LOOP
gas: #gas(INITGAS, NONMEMGAS, MEMGAS) => _
wordStack:
    ; local variables
    I : S0 : R0 : V0 : CURRENT_OWNER0 : LAST_OWNER :
    ; return values
    RET :
    ; parameters
    {CONSUME_HASH} : SIGS_LOC : TX_DATA_LOC : TX_DATA_HASH :
    ; return address
    RETURN_LOC : WS
    =>
    {WORD_STACK_RHS}
+requires:
    ; <wordStack> when calling signatureSplit:
    ; I : SIGS_LOC : RETURN_LOC : I : S0 : ... : RETURN_LOC : WS
    ;                             ^^^^^^^^^^^^^^^^^^^^^^^^^ 12 elems
    andBool #range(0 <= #sizeWordStack(WS) <= 1000 -Int 12)

    ; signatures.length >= threshold * 65
    andBool SIGS_LEN >=Int THRESHOLD *Int 65

    andBool #rangeAddress({INIT_CURRENT_OWNER})
    andBool #rangeAddress({CURRENT_OWNER})
    andBool #rangeAddress(LAST_OWNER)
    andBool SIGS_LOC +Int (65 *Int I +Int 65) +Int 32 <Int pow256
    ; invariant
    andBool #range(0 <= I < THRESHOLD)
    andBool I <=Int #fii({SIGS_BUF}, TX_DATA_HASH, {DATA_BUF}, S, MSG_SENDER)
    andBool LAST_OWNER ==Int #signer({SIGS_BUF}, I -Int 1, TX_DATA_HASH)
INIT_CURRENT_OWNER: select(S, #hashedLocation({COMPILER}, {OWNERS}, {CURRENT_OWNER}))
CURRENT_OWNER:      #signer({SIGS_BUF}, I, TX_DATA_HASH)
attribute: [matching(#gas,storeRange,#buf)]

[checkSignatures-loop-trusted]
gas: #gas(INITGAS, NONMEMGAS, MEMGAS) => #gas(INITGAS, NONMEMGAS +Int NONMEMGAS_USAGE_LOOP, MEMGAS +Int (Cmem(BYZANTIUM, MEM_USAGE_LOOP) -Int Cmem(BYZANTIUM, MU)))
attribute: [trusted, matching(#gas,storeRange,#buf)]

[checkSignatures-loop-success]
+requires:
    andBool #fii({SIGS_BUF}, TX_DATA_HASH, {DATA_BUF}, S, MSG_SENDER) >=Int THRESHOLD
WORD_STACK_RHS: RETURN_LOC : 1 : WS

[checkSignatures-loop-success-middle]
+requires:
    andBool I +Int 1  <Int THRESHOLD

[checkSignatures-loop-success-end]
+requires:
    andBool I +Int 1 >=Int THRESHOLD

[checkSignatures-loop-success-trusted]
attribute: [trusted, matching(#gas,storeRange,#buf)]

[checkSignatures-loop-failure]
+requires:
    andBool #fii({SIGS_BUF}, TX_DATA_HASH, {DATA_BUF}, S, MSG_SENDER) <Int THRESHOLD
WORD_STACK_RHS: RETURN_LOC : 0 : WS

[checkSignatures-loop-failure-trusted]
attribute: [trusted, matching(#gas,storeRange,#buf)]

[checkSignatures-loop-failure-now]
+requires:
    andBool I ==Int #fii({SIGS_BUF}, TX_DATA_HASH, {DATA_BUF}, S, MSG_SENDER)
attribute: [matching(#gas,storeRange,#buf)]

[checkSignatures-loop-failure-later]
+requires:
    andBool I <Int #fii({SIGS_BUF}, TX_DATA_HASH, {DATA_BUF}, S, MSG_SENDER)
attribute: [matching(#gas,storeRange,#buf)]


; check i < threshold, run the body, i++, return to the loop header
[checkSignatures-loop-body-success]
pc: {PC_LOOP_HEAD}
memoryUsed: MU => MEM_USAGE_SINGLE_LOOP
gas: #gas(INITGAS, NONMEMGAS, MEMGAS) => _
wordStack: (I => I +Int 1) : (S0 => S1) : (R0 => R1) : (V0 => V1) : (CURRENT_OWNER0 => {CURRENT_OWNER}) : (LAST_OWNER => {CURRENT_OWNER})
           : RET : {CONSUME_HASH} : SIGS_LOC : TX_DATA_LOC : TX_DATA_HASH : RETURN_LOC : WS
+requires:
    ; path-condition
    andBool #isValid({SIGS_BUF}, I, TX_DATA_HASH, {DATA_BUF}, S, MSG_SENDER, {EVAL})
EVAL: true
+ensures:
    andBool selectRange(M2, TX_DATA_LOC        , 32      ) ==K #buf(32, TX_DATA_LEN)
    andBool selectRange(M2, TX_DATA_LOC +Int 32, TX_DATA_LEN) ==K #buf(TX_DATA_LEN, TX_DATA)
    andBool selectRange(M2, SIGS_LOC        , 32      ) ==K #buf(32, SIGS_LEN)
    andBool selectRange(M2, SIGS_LOC +Int 32, SIGS_LEN) ==K #buf(SIGS_LEN, SIGS)
  //andBool selectRange(M2, 64              , 32      ) ==K #buf(32, NEXT_LOC)
  //andBool #asWord(selectRange(M2, 64, 32)) ==Int NEXT_LOC +Int 32
    andBool #asWord(selectRange(M2, 64, 32)) >=Int NEXT_LOC


[checkSignatures-loop-body-success-trusted]
pc: {PC_LOOP_HEAD} +Int 1 => {PC_LOOP_HEAD}
gas: #gas(INITGAS, NONMEMGAS, MEMGAS) => #gas(INITGAS, NONMEMGAS +Int NONMEMGAS_USAGE_SINGLE_LOOP, MEMGAS +Int (Cmem(BYZANTIUM, MEM_USAGE_SINGLE_LOOP) -Int Cmem(BYZANTIUM, MU)))
MEM_RHS:
    storeRange(storeRange(storeRange(storeRange(storeRange(_,
      TX_DATA_LOC        , 32         , #buf(32, TX_DATA_LEN)),
      TX_DATA_LOC +Int 32, TX_DATA_LEN, #buf(TX_DATA_LEN, TX_DATA)),
      SIGS_LOC           , 32         , #buf(32, SIGS_LEN)),
      SIGS_LOC +Int 32   , SIGS_LEN   , #buf(SIGS_LEN, SIGS)),
      64                 , 32         , #buf(32, NEW_NEXT_LOC))
ensures:
    andBool NEW_NEXT_LOC >=Int NEXT_LOC
    ; assumption
    andBool #rangeAddress(select(S, #hashedLocation({COMPILER}, {OWNERS}, #signer({SIGS_BUF}, I +Int 1, TX_DATA_HASH))))
    andBool #rangeAddress(#signer({SIGS_BUF}, I +Int 1, TX_DATA_HASH))
    andBool SIGS_LOC +Int (65 *Int (I +Int 1) +Int 65) +Int 32 <Int pow256
    andBool #range(SIGS_LOC +Int 32 +Int #ceil32(SIGS_LEN) <= NEW_NEXT_LOC < 2 ^Int 32)
EVAL: false
attribute: [trusted, matching(#gas,storeRange,#buf)]


[checkSignatures-loop-body-success-v0]
+requires:
    ; v == 0
    andBool #sigV({SIGS_BUF}, I) ==Int 0
    andBool #rangeUInt(256, #sigS({SIGS_BUF}, I))
    andBool #rangeUInt(256, SIGS_LOC +Int #sigS({SIGS_BUF}, I))
    ; TODO: what if SIGS_LOC +Int S_I +Int 32 overflows? It will read content before the content of signature.
    andBool #rangeUInt(256, {DYNAMIC_START})
    ; read CONTRACT_SIG_LEN
    andBool SIGS_LOC +Int 32 <=Int {DYNAMIC_START}
    andBool {DYNAMIC_START} +Int 32 <=Int SIGS_LOC +Int 32 +Int SIGS_LEN
    ; read CONTRACT_SIG
    andBool SIGS_LOC +Int 32 <=Int {DYNAMIC_START} +Int 32
    andBool {DYNAMIC_START} +Int 32 +Int {CONTRACT_SIG_LEN} <=Int SIGS_LOC +Int 32 +Int SIGS_LEN
    ; read 64
    andBool 96 <Int NEXT_LOC +Int #ceil32(TX_DATA_LEN) +Int 132 +Int {CONTRACT_SIG_LEN}
    ; read TX_DATA_LEN
    andBool TX_DATA_LOC +Int 32                  <Int {TRAILING_ZERO_START}
    ; read TX_DATA
    andBool TX_DATA_LOC +Int 32 +Int TX_DATA_LEN <Int {TRAILING_ZERO_START}
    ; read SIGS_LEN
    andBool SIGS_LOC +Int 32                     <Int {TRAILING_ZERO_START}
    ; read SIGS
    andBool SIGS_LOC +Int 32 +Int SIGS_LEN       <Int {TRAILING_ZERO_START}
    andBool 0 <Int #extCodeSize({CURRENT_OWNER})
    andBool #callSuccess(18677, {CURRENT_OWNER})
    andBool #callResult(18677, {CURRENT_OWNER}) ==K 1
dynamic_start: SIGS_LOC +Int #sigS({SIGS_BUF}, I) +Int 32
contract_sig_len: #asWord(#bufSeg({SIGS_BUF}, #sigS({SIGS_BUF}, I), 32))
trailing_zero_start: NEXT_LOC +Int #ceil32(TX_DATA_LEN) +Int 132 +Int {CONTRACT_SIG_LEN}

[copy-trusted]
k: #execute ~> _
output: _
statusCode: _
callStack: _
this: #PROXY_ID
msg_sender: _
callData: _
callValue: 0
wordStack: INDEX : SOURCE_START : DEST_START : SOURCE_LEN : SOURCE_LEN : SOURCE_START : DEST_START : WS => GARBAGE_VALUE : DEST_END : WS
localMem: INIT_MEM => storeRange(storeRange(INIT_MEM,
                          DEST_START                , SOURCE_LEN                         , SOURCE_BUF),
                          DEST_START +Int SOURCE_LEN, #ceil32(SOURCE_LEN) -Int SOURCE_LEN, #buf(#ceil32(SOURCE_LEN) -Int SOURCE_LEN, 0))
pc: PC_START => PC_START +Int 72
gas: #gas(INITGAS,
          NONMEMGAS => NONMEMGAS +Int #loopGas(PC_START, PC_START +Int 72),
          MEMGAS => MEMGAS +Int (Cmem(BYZANTIUM, FINAL_MEM_USAGE) -Int Cmem(BYZANTIUM, MU)))
memoryUsed: #memoryUsageUpdate(MU, _, _) => FINAL_MEM_USAGE
log: _
refund: _
coinbase: _
+requires:
    andBool DEST_END        ==K DEST_START +Int #ceil32(SOURCE_LEN)
    andBool SOURCE_BUF      ==K selectRange(INIT_MEM, SOURCE_START, SOURCE_LEN)
    andBool FINAL_MEM_USAGE ==K #memoryUsageUpdate(MU, DEST_START, #ceil32(SOURCE_LEN))
+attribute: [trusted, matching(#gas,#memoryUsageUpdate)]

[copy-trusted-data]
+requires:
    andBool PC_START ==Int 18467

[copy-trusted-contractSig]
+requires:
    andBool PC_START ==Int 18569

[checkSignatures-loop-body-success-v1]
+requires:
    andBool select(S, #hashedLocation({COMPILER}, {APPROVED_HASHES}, {CURRENT_OWNER} TX_DATA_HASH)) ==Int APPROVED
    andBool #rangeUInt(256, APPROVED)
    ; v == 1
    andBool #sigV({SIGS_BUF}, I) ==Int 1

[checkSignatures-loop-body-success-v1-owner]
+requires:
    andBool MSG_SENDER ==Int {CURRENT_OWNER}

[checkSignatures-loop-body-success-v1-not-owner]
proxy_storage: S => store(S, #hashedLocation({COMPILER}, {APPROVED_HASHES}, {CURRENT_OWNER} TX_DATA_HASH), 0)
refund: _ => _
+requires:
    andBool MSG_SENDER =/=Int {CURRENT_OWNER}
    andBool APPROVED =/=Int 0

[checkSignatures-loop-body-success-v_else]
+requires:
    andBool #sigV({SIGS_BUF}, I) =/=Int 0
    andBool #sigV({SIGS_BUF}, I) =/=Int 1



[checkSignatures-loop-body-failure]
pc: {PC_LOOP_HEAD} => {PC_FUN_END}
WORD_STACK_RHS: RETURN_LOC : 0 /* return value */ : WS

[checkSignatures-loop-body-failure-trusted]
pc: {PC_LOOP_HEAD} +Int 1 => {PC_FUN_END}
+requires:
    andBool notBool #isValid({SIGS_BUF}, I, TX_DATA_HASH, {DATA_BUF}, S, MSG_SENDER, {EVAL})
EVAL: false
attribute: [trusted, matching(#gas,storeRange,#buf)]

[checkSignatures-loop-body-failure-v0]
+requires:
    ; v == 0
    andBool #sigV({SIGS_BUF}, I) ==Int 0
    andBool #rangeUInt(256, #sigS({SIGS_BUF}, I))
    andBool #rangeUInt(256, SIGS_LOC +Int #sigS({SIGS_BUF}, I))
    ; TODO: what if SIGS_LOC +Int S_I +Int 32 overflows? It will read content before the content of signature.
    andBool #rangeUInt(256, {DYNAMIC_START})
    ; read CONTRACT_SIG_LEN
    andBool SIGS_LOC +Int 32 <=Int {DYNAMIC_START}
    andBool {DYNAMIC_START} +Int 32 <=Int SIGS_LOC +Int 32 +Int SIGS_LEN
    ; read CONTRACT_SIG
    andBool SIGS_LOC +Int 32 <=Int {DYNAMIC_START} +Int 32
    andBool {DYNAMIC_START} +Int 32 +Int {CONTRACT_SIG_LEN} <=Int SIGS_LOC +Int 32 +Int SIGS_LEN
    ; read 64
    andBool 96 <Int NEXT_LOC +Int #ceil32(TX_DATA_LEN) +Int 132 +Int {CONTRACT_SIG_LEN}
    ; read TX_DATA_LEN
    andBool TX_DATA_LOC +Int 32                  <Int {TRAILING_ZERO_START}
    ; read TX_DATA
    andBool TX_DATA_LOC +Int 32 +Int TX_DATA_LEN <Int {TRAILING_ZERO_START}
    ; read SIGS_LEN
    andBool SIGS_LOC +Int 32                     <Int {TRAILING_ZERO_START}
    ; read SIGS
    andBool SIGS_LOC +Int 32 +Int SIGS_LEN       <Int {TRAILING_ZERO_START}
    andBool 0 <Int #extCodeSize({CURRENT_OWNER})
    andBool #callSuccess(18677, {CURRENT_OWNER})
dynamic_start: SIGS_LOC +Int #sigS({SIGS_BUF}, I) +Int 32
contract_sig_len: #asWord(#bufSeg({SIGS_BUF}, #sigS({SIGS_BUF}, I), 32))
trailing_zero_start: NEXT_LOC +Int #ceil32(TX_DATA_LEN) +Int 132 +Int {CONTRACT_SIG_LEN}

[checkSignatures-loop-body-failure-v0-1]
+requires:
    andBool #callResult(18677, {CURRENT_OWNER}) ==K 0

[checkSignatures-loop-body-failure-v0-2]
+requires:
    andBool #callResult(18677, {CURRENT_OWNER}) ==K 1
    andBool ( {CURRENT_OWNER} <=Int LAST_OWNER
       orBool {INIT_CURRENT_OWNER} ==Int 0 )

[checkSignatures-loop-body-failure-v1]
+requires:
    ; v == 1
    andBool #sigV({SIGS_BUF}, I) ==Int 1

[checkSignatures-loop-body-failure-v1-owner]
+requires:
    andBool MSG_SENDER ==Int {CURRENT_OWNER}
    andBool ( {CURRENT_OWNER} <=Int LAST_OWNER
       orBool {INIT_CURRENT_OWNER} ==Int 0 )

[checkSignatures-loop-body-failure-v1-not-owner]
+requires:
    andBool MSG_SENDER =/=Int {CURRENT_OWNER}
    andBool select(S, #hashedLocation({COMPILER}, {APPROVED_HASHES}, {CURRENT_OWNER} TX_DATA_HASH)) ==Int APPROVED
    andBool #rangeUInt(256, APPROVED)

[checkSignatures-loop-body-failure-v1-not-owner-approved]
proxy_storage: S => store(S, #hashedLocation({COMPILER}, {APPROVED_HASHES}, {CURRENT_OWNER} TX_DATA_HASH), 0)
refund: _ => _
+requires:
    andBool APPROVED =/=Int 0
    andBool ( {CURRENT_OWNER} <=Int LAST_OWNER
       orBool {INIT_CURRENT_OWNER} ==Int 0 )

[checkSignatures-loop-body-failure-v1-not-owner-not-approved]
+requires:
    ; andBool APPROVED ==Int 0
    andBool select(S, #hashedLocation({COMPILER}, {APPROVED_HASHES}, {CURRENT_OWNER} TX_DATA_HASH)) ==Int 0

[checkSignatures-loop-body-failure-v_else]
+requires:
    andBool #sigV({SIGS_BUF}, I) =/=Int 0
    andBool #sigV({SIGS_BUF}, I) =/=Int 1

[checkSignatures-loop-body-failure-v_else-ecrecEmpty]
+requires:
    andBool #ecrecEmpty(#ecrecData({SIGS_BUF}, I, TX_DATA_HASH))

[checkSignatures-loop-body-failure-v_else-not-ecrecEmpty]
+requires:
    andBool notBool #ecrecEmpty(#ecrecData({SIGS_BUF}, I, TX_DATA_HASH))
    andBool ( {CURRENT_OWNER} <=Int LAST_OWNER
       orBool {INIT_CURRENT_OWNER} ==Int 0 )


[checkSignatures-loop-body-exception-v0]
k: (#execute => #halt) ~> _
statusCode: _ => EVMC_REVERT
WORD_STACK_RHS: _
pc: {PC_LOOP_HEAD} => 18693
+requires:
    ; v == 0
    andBool #sigV({SIGS_BUF}, I) ==Int 0
    andBool #rangeUInt(256, #sigS({SIGS_BUF}, I))
    andBool #rangeUInt(256, SIGS_LOC +Int #sigS({SIGS_BUF}, I))
    ; TODO: what if SIGS_LOC +Int S_I +Int 32 overflows? It will read content before the content of signature.
    andBool #rangeUInt(256, {DYNAMIC_START})
    ; read CONTRACT_SIG_LEN
    andBool SIGS_LOC +Int 32 <=Int {DYNAMIC_START}
    andBool {DYNAMIC_START} +Int 32 <=Int SIGS_LOC +Int 32 +Int SIGS_LEN
    ; read CONTRACT_SIG
    andBool SIGS_LOC +Int 32 <=Int {DYNAMIC_START} +Int 32
    andBool {DYNAMIC_START} +Int 32 +Int {CONTRACT_SIG_LEN} <=Int SIGS_LOC +Int 32 +Int SIGS_LEN
    ; read 64
    andBool 96 <Int NEXT_LOC +Int #ceil32(TX_DATA_LEN) +Int 132 +Int {CONTRACT_SIG_LEN}
    ; read TX_DATA_LEN
    andBool TX_DATA_LOC +Int 32                  <Int {TRAILING_ZERO_START}
    ; read TX_DATA
    andBool TX_DATA_LOC +Int 32 +Int TX_DATA_LEN <Int {TRAILING_ZERO_START}
    ; read SIGS_LEN
    andBool SIGS_LOC +Int 32                     <Int {TRAILING_ZERO_START}
    ; read SIGS
    andBool SIGS_LOC +Int 32 +Int SIGS_LEN       <Int {TRAILING_ZERO_START}
    andBool 0 <Int #extCodeSize({CURRENT_OWNER})
    andBool #callFailure(18677, {CURRENT_OWNER})
dynamic_start: SIGS_LOC +Int #sigS({SIGS_BUF}, I) +Int 32
contract_sig_len: #asWord(#bufSeg({SIGS_BUF}, #sigS({SIGS_BUF}, I), 32))
trailing_zero_start: NEXT_LOC +Int #ceil32(TX_DATA_LEN) +Int 132 +Int {CONTRACT_SIG_LEN}
ensures:

; external call to checkSignatures should not change the state
[checkSignatures_external]
k: (#execute => #halt) ~> _
output: _ => .WordStack
statusCode: _ => EVMC_SUCCESS
callStack: _
this: #PROXY_ID
msg_sender: _
callData: #abiCallData("checkSignatures", (
            #bytes32(_),
            #bytes(_),
            #bytes(_),
            #bool(_) ))
callValue: _
memoryUsed: 0 => _
gas: #gas(INITGAS, 0, 0) => _
log: _
refund: _
coinbase: _
proxy_storage: _:Map
pc: 0 => {STOP_EXTERNAL_CALL}
wordStack: .WordStack => _
localMem: _ => _

[execTransaction]
k: (#execute => #halt) ~> _
callStack: _
this: #PROXY_ID
msg_sender: MSG_SENDER
callData: #abiCallData("execTransaction", (
            #address(TO),
            #uint256(VALUE),
            #bytes(#buf(DATA_LEN, DATA)),
            ; Enum.Operation operation, represented as uint8
            #uint8(OPERATION),
            #uint256(SAFE_TX_GAS),
            #uint256(DATA_GAS),
            #uint256(GAS_PRICE),
            #address(GAS_TOKEN),
            #address(REFUND_RECEIVER),
            #bytes(#buf(SIGS_LEN, SIGS)) ))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(INITGAS, 0, 0) => _
memoryUsed: 0 => _
log: _
refund: _ => _
coinbase: _ => _
proxy_storage:
    store(store(store(M1, #hashedLocation({COMPILER}, {THRESHOLD}, .IntList),        THRESHOLD),
                          #hashedLocation({COMPILER}, {NONCE}, .IntList),            NONCE => {NEW_NONCE}),
                          #hashedLocation({COMPILER}, {DOMAIN_SEPARATOR}, .IntList), DOMAIN_SEPARATOR)
NEW_NONCE: NONCE +Int 1
proxy_origstorage: store(M2, #hashedLocation({COMPILER}, {NONCE}, .IntList),         ORIG_NONCE)
+requires:
    andBool #range(0 <= CD < 1023)

    ; Range
    andBool #rangeAddress(MSG_SENDER)
    andBool #rangeAddress(TO)
    andBool #rangeUInt(256, VALUE)
    andBool #rangeUInt(256, DATA_LEN)
    andBool #rangeUInt(8  , OPERATION)
    ; enum Enum.Call
    andBool OPERATION ==Int 0
    andBool #rangeUInt(256, SAFE_TX_GAS)
    andBool #rangeUInt(256, DATA_GAS)
    andBool #rangeUInt(256, GAS_PRICE)
    andBool #rangeAddress(GAS_TOKEN)
    andBool #rangeAddress(REFUND_RECEIVER)
    andBool #rangeUInt(256, SIGS_LEN)
    andBool #rangeUInt(256, THRESHOLD)
    andBool #rangeUInt(256, NONCE)
    andBool #rangeBytes(32, DOMAIN_SEPARATOR)
    andBool #rangeUInt(256, ORIG_NONCE)

    andBool #range(1 <= THRESHOLD < 2 ^Int 32)
    andBool DATA_LEN <Int 2 ^Int 16
    andBool SIGS_LEN <Int 2 ^Int 16
    andBool NONCE    <Int maxUInt256

[execTransaction-checkSigs-exception]
output: _ => _
statusCode: _ => EVMC_REVERT
log: _ => _
NEW_NONCE: NONCE
+requires:
    ; enough signatures but exception
    andBool SIGS_LEN >=Int THRESHOLD *Int 65
    andBool #checkSignaturesException

[execTransaction-checkSigs0]
output: _ => _
statusCode: _ => EVMC_REVERT
NEW_NONCE: NONCE
+requires:
    ; not enough signaures or invalid signatures
    andBool ( SIGS_LEN <Int THRESHOLD *Int 65
       orBool notBool #enoughValidSigs )

[execTransaction-checkSigs1]
+requires:
    ; enough signatures
    andBool THRESHOLD *Int 65 <=Int SIGS_LEN
    ; valid signatures
    andBool #enoughValidSigs

[execTransaction-checkSigs1-gas0]
output: _ => _
statusCode: _ => EVMC_REVERT
+requires:
    // gasleft() < safeTxGas
    andBool SAFE_TX_GAS >Int  #gas(INITGAS, 9 *Int (DATA_LEN up/Int 32) +Int 3 *Int (SIGS_LEN up/Int 32) +Int #checkSigsGasNonMem +Int Csstore(BYZANTIUM, NONCE +Int 1, NONCE, ORIG_NONCE) +Int 2903, Cmem(BYZANTIUM, #checkSigsFinalMemUsed(#memoryUsageUpdate(5, #ceil32(DATA_LEN) +Int 674 +Int SIGS_LEN, 32))))

[execTransaction-checkSigs1-gas1]
+requires:
    // gasleft() >= safeTxGas
    andBool SAFE_TX_GAS <=Int  #gas(INITGAS, 9 *Int (DATA_LEN up/Int 32) +Int 3 *Int (SIGS_LEN up/Int 32) +Int #checkSigsGasNonMem +Int Csstore(BYZANTIUM, NONCE +Int 1, NONCE, ORIG_NONCE) +Int 2903, Cmem(BYZANTIUM, #checkSigsFinalMemUsed(#memoryUsageUpdate(5, #ceil32(DATA_LEN) +Int 674 +Int SIGS_LEN, 32))))

[execTransaction-checkSigs1-gas1-safetxgas0-gasprice0]
+requires:
    andBool SAFE_TX_GAS ==Int 0
    andBool GAS_PRICE ==Int 0

[execTransaction-checkSigs1-gas1-safetxgas0-gasprice0-call0]
output: _ => #buf(32, 0)
statusCode: _ => EVMC_SUCCESS
log: _:List ( .List => ListItem(#abiEventLog(#PROXY_ID, "ExecutionFailed", #bytes32({TX_HASH_DATA}))) )
+requires:
    andBool CALL_PC ==Int 22225
    andBool #callFailure(CALL_PC, TO)
TX_HASH_DATA: keccak(25 : 1 : #encodeArgs(#bytes32(DOMAIN_SEPARATOR), #bytes32({SAFE_TX_HASH})))
SAFE_TX_HASH: keccak(#encodeArgs(#bytes32(#parseHexWord({SAFE_TX_TYPEHASH})),
                                 #address(TO),
                                 #uint256(VALUE),
                                 #bytes32(keccak(#buf(DATA_LEN, DATA))),
                                 #uint8(OPERATION),
                                 #uint256(SAFE_TX_GAS),
                                 #uint256(DATA_GAS),
                                 #uint256(GAS_PRICE),
                                 #address(GAS_TOKEN),
                                 #address(REFUND_RECEIVER),
                                 #uint256(NONCE) ))

[execTransaction-checkSigs1-gas1-safetxgas0-gasprice0-call1]
output: _ => #buf(32, 1)
statusCode: _ => EVMC_SUCCESS
+requires:
    andBool CALL_PC ==Int 22225
    andBool #callSuccess(CALL_PC, TO)

[execTransaction-checkSigs1-gas1-safetxgas0-gasprice0-call1-to]
proxy_bal: PROXY_BAL => PROXY_BAL -Int VALUE
acct_to_bal: ACCT_TO_BAL => ACCT_TO_BAL +Int VALUE
+requires:
    andBool TO ==Int #EXEC_ACCT_TO
    andBool VALUE <=Int PROXY_BAL
    andBool ACCT_TO_BAL +Int VALUE <Int pow256

[execTransaction-checkSigs1-gas1-safetxgas0-gasprice1]
+requires:
    andBool SAFE_TX_GAS ==Int 0
    andBool 0 <Int GAS_PRICE

[execTransaction-checkSigs1-gas1-safetxgas0-gasprice1-call0]
k: (#execute => #handlePaymentSpecApplied) ~> _
output: _ => _
statusCode: _ => _
pc: 0 => 19729
log: _:List ( .List => ListItem(#abiEventLog(#PROXY_ID, "ExecutionFailed", #bytes32({TX_HASH_DATA}))) )
+requires:
    andBool CALL_PC ==Int 22225
    andBool #callFailure(CALL_PC, TO)
TX_HASH_DATA: keccak(25 : 1 : #encodeArgs(#bytes32(DOMAIN_SEPARATOR), #bytes32({SAFE_TX_HASH})))
SAFE_TX_HASH: keccak(#encodeArgs(#bytes32(#parseHexWord({SAFE_TX_TYPEHASH})),
                                 #address(TO),
                                 #uint256(VALUE),
                                 #bytes32(keccak(#buf(DATA_LEN, DATA))),
                                 #uint8(OPERATION),
                                 #uint256(SAFE_TX_GAS),
                                 #uint256(DATA_GAS),
                                 #uint256(GAS_PRICE),
                                 #address(GAS_TOKEN),
                                 #address(REFUND_RECEIVER),
                                 #uint256(NONCE) ))

[execTransaction-checkSigs1-gas1-safetxgas0-gasprice1-call1]
+requires:
    andBool CALL_PC ==Int 22225
    andBool #callSuccess(CALL_PC, TO)

[execTransaction-checkSigs1-gas1-safetxgas0-gasprice1-call1-to]
k: (#execute => #handlePaymentSpecApplied) ~> _
output: _ => _
statusCode: _ => _
pc: 0 => 19729
proxy_bal: PROXY_BAL => PROXY_BAL -Int VALUE
acct_to_bal: ACCT_TO_BAL => ACCT_TO_BAL +Int VALUE
+requires:
    andBool CALL_PC ==Int 22225
    andBool #callSuccess(CALL_PC, TO)
    andBool TO ==Int #EXEC_ACCT_TO
    andBool VALUE <=Int PROXY_BAL
    andBool ACCT_TO_BAL +Int VALUE <Int pow256

[execTransaction-checkSigs1-gas1-safetxgas1]
+requires:
    andBool 0 <Int SAFE_TX_GAS

[execTransaction-checkSigs1-gas1-safetxgas1-call0]
log: _:List ( .List => ListItem(#abiEventLog(#PROXY_ID, "ExecutionFailed", #bytes32({TX_HASH_DATA}))) )
+requires:
    andBool CALL_PC ==Int 22225
    andBool #callFailure(CALL_PC, TO)

TX_HASH_DATA: keccak(25 : 1 : #encodeArgs(#bytes32(DOMAIN_SEPARATOR), #bytes32({SAFE_TX_HASH})))
SAFE_TX_HASH: keccak(#encodeArgs(#bytes32(#parseHexWord({SAFE_TX_TYPEHASH})),
                                 #address(TO),
                                 #uint256(VALUE),
                                 #bytes32(keccak(#buf(DATA_LEN, DATA))),
                                 #uint8(OPERATION),
                                 #uint256(SAFE_TX_GAS),
                                 #uint256(DATA_GAS),
                                 #uint256(GAS_PRICE),
                                 #address(GAS_TOKEN),
                                 #address(REFUND_RECEIVER),
                                 #uint256(NONCE) ))

[execTransaction-checkSigs1-gas1-safetxgas1-call0-to]
+requires:
    andBool TO ==Int #EXEC_ACCT_TO

[execTransaction-checkSigs1-gas1-safetxgas1-call0-to-gasprice0]
output: _ => #buf(32, 0)
statusCode: _ => EVMC_SUCCESS
+requires:
    andBool GAS_PRICE ==Int 0

[execTransaction-checkSigs1-gas1-safetxgas1-call0-to-gasprice1]
k: (#execute => #handlePaymentSpecApplied) ~> _
output: _ => _
statusCode: _ => _
pc: 0 => 19729
+requires:
    andBool 0 <Int GAS_PRICE

[execTransaction-checkSigs1-gas1-safetxgas1-call1]
+requires:
    andBool CALL_PC ==Int 22225
    andBool #callSuccess(CALL_PC, TO)

[execTransaction-checkSigs1-gas1-safetxgas1-call1-to]
proxy_bal: PROXY_BAL => PROXY_BAL -Int VALUE
acct_to_bal: ACCT_TO_BAL => ACCT_TO_BAL +Int VALUE
+requires:
    andBool TO ==Int #EXEC_ACCT_TO
    andBool VALUE <=Int PROXY_BAL
    andBool ACCT_TO_BAL +Int VALUE <Int pow256

[execTransaction-checkSigs1-gas1-safetxgas1-call1-to-gasprice0]
output: _ => #buf(32, 1)
statusCode: _ => EVMC_SUCCESS
+requires:
    andBool GAS_PRICE ==Int 0

[execTransaction-checkSigs1-gas1-safetxgas1-call1-to-gasprice1]
k: (#execute => #handlePaymentSpecApplied) ~> _
output: _ => _
statusCode: _ => _
pc: 0 => 19729
+requires:
    andBool 0 <Int GAS_PRICE

;
; OwnerManager
;

[addOwnerWithThreshold]
k: (#execute => #halt) ~> _
callStack: _
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(STARTGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _ => _
coinbase: _ => _
output: _ => _
this: #PROXY_ID
msg_sender: MSG_SENDER
callData: #abiCallData("addOwnerWithThreshold", (#address(OWNER), #uint256(NEW_THRESHOLD)))
callValue: 0
proxy_storage:
    M1:Map => M2:Map
+requires:
    ; Storage
    andBool select(M1, #hashedLocation({COMPILER}, {OWNERS},     #SENTINEL)) ==Int INIT_SENTINEL
    andBool select(M1, #hashedLocation({COMPILER}, {OWNERS},     OWNER))     ==Int INIT_OWNER
    andBool select(M1, #hashedLocation({COMPILER}, {THRESHOLD},  .IntList))  ==Int THRESHOLD
    andBool select(M1, #hashedLocation({COMPILER}, {OWNERCOUNT}, .IntList))  ==Int OWNERCOUNT
    ; Range
    andBool #rangeAddress(  OWNER)
    andBool #rangeAddress(  INIT_SENTINEL)
    andBool #rangeAddress(  INIT_OWNER)
    andBool #rangeAddress(  MSG_SENDER)
    andBool #rangeUInt(256, NEW_THRESHOLD)
    andBool #rangeUInt(256, THRESHOLD)
    andBool #rangeUInt(256, OWNERCOUNT)
+ensures:

[addOwnerWithThreshold-success]
statusCode: _ => EVMC_SUCCESS
+requires:
    ; requirements from code
    ; authorized
    andBool MSG_SENDER ==Int #PROXY_ID
    ; Owner address cannot be null
    andBool OWNER     =/=Int 0
    andBool OWNER     =/=Int #SENTINEL
    ; No duplicate owners allowed
    andBool INIT_OWNER ==Int 0
    ; The hashes are different (the hash2 lemma is not enough)
    andBool #hashedLocation({COMPILER}, {OWNERS}, #SENTINEL) =/=Int #hashedLocation({COMPILER}, {OWNERS}, OWNER)
    ; Avoid overflow
    andBool OWNERCOUNT +Int 1 <Int pow256
+ensures:
    andBool select(M2, #hashedLocation({COMPILER}, {OWNERS},     #SENTINEL)) ==Int OWNER
    andBool select(M2, #hashedLocation({COMPILER}, {OWNERS},     OWNER))     ==Int INIT_SENTINEL
    andBool select(M2, #hashedLocation({COMPILER}, {OWNERCOUNT}, .IntList))  ==Int OWNERCOUNT +Int 1

[addOwnerWithThreshold-success-1]
log: _:List ( .List => ListItem(#abiEventLog(MSG_SENDER, "AddedOwner", #address(OWNER))) )
+requires:
    andBool THRESHOLD ==Int NEW_THRESHOLD
+ensures:
    andBool select(M2, #hashedLocation({COMPILER}, {THRESHOLD}, .IntList)) ==Int THRESHOLD
    andBool M2 ==IMap M1 except (
        SetItem(#hashedLocation({COMPILER}, {OWNERS}, #SENTINEL))
        SetItem(#hashedLocation({COMPILER}, {OWNERS}, OWNER))
        SetItem(#hashedLocation({COMPILER}, {OWNERCOUNT}, .IntList))
        .Set )

[addOwnerWithThreshold-success-2]
log: _:List ( .List =>
        ListItem(#abiEventLog(MSG_SENDER, "AddedOwner",       #address(OWNER)))
        ListItem(#abiEventLog(MSG_SENDER, "ChangedThreshold", #uint256(NEW_THRESHOLD))) )
+requires:
    andBool THRESHOLD     =/=Int NEW_THRESHOLD
    ; Requirements from code
    ; Validate that threshold is smaller than number of owners
    andBool NEW_THRESHOLD <=Int OWNERCOUNT +Int 1
    ; There has to be at least one safe owner
    andBool NEW_THRESHOLD >=Int 1
+ensures:
    andBool select(M2, #hashedLocation({COMPILER}, {THRESHOLD}, .IntList)) ==Int NEW_THRESHOLD
    andBool M2 ==IMap M1 except (
        SetItem(#hashedLocation({COMPILER}, {OWNERS}, #SENTINEL))
        SetItem(#hashedLocation({COMPILER}, {OWNERS}, OWNER))
        SetItem(#hashedLocation({COMPILER}, {OWNERCOUNT}, .IntList))
        SetItem(#hashedLocation({COMPILER}, {THRESHOLD}, .IntList))
        .Set )

[addOwnerWithThreshold-failure]
+ensures:
    andBool M2 ==IMap M1 except (
        SetItem(#hashedLocation({COMPILER}, {OWNERS}, #SENTINEL))
        SetItem(#hashedLocation({COMPILER}, {OWNERS}, OWNER))
        SetItem(#hashedLocation({COMPILER}, {OWNERCOUNT}, .IntList))
        SetItem(#hashedLocation({COMPILER}, {THRESHOLD}, .IntList))
        .Set )

[addOwnerWithThreshold-failure-1]
log: _
statusCode: _ => EVMC_REVERT

[addOwnerWithThreshold-failure-1-a]
+requires:
    ; Property to verify does not hold
    andBool MSG_SENDER =/=Int #PROXY_ID

[addOwnerWithThreshold-failure-1-b]
+requires:
    ; Property to verify
    andBool MSG_SENDER ==Int #PROXY_ID
    ; Requirements from code do not hold
    andBool (   OWNER      ==Int 0
        orBool  OWNER      ==Int #SENTINEL
        orBool  INIT_OWNER =/=Int 0 )

[addOwnerWithThreshold-failure-2]
statusCode: _ => EVMC_REVERT
log: _ => _
+requires:
    ; Property to verify
    andBool MSG_SENDER ==Int #PROXY_ID
    ; Requirements from code
    ; Owner address cannot be null
    andBool OWNER     =/=Int 0
    andBool OWNER     =/=Int #SENTINEL
    ; No duplicate owners allowed
    andBool INIT_OWNER ==Int 0
    ; The hashes are different (the hash2 lemma is not enough)
    andBool #hashedLocation({COMPILER}, {OWNERS}, #SENTINEL) =/=Int #hashedLocation({COMPILER}, {OWNERS}, OWNER)
    ; Avoid overflow
    andBool OWNERCOUNT +Int 1 <Int pow256
    andBool THRESHOLD     =/=Int NEW_THRESHOLD
    ; Requirements from code do not hold
    andBool ( NEW_THRESHOLD  >Int  OWNERCOUNT +Int 1
        orBool NEW_THRESHOLD ==Int 0 )

[addOwnerWithThreshold-failure-3]
log: _ => _
+requires:
    ; Property to verify
    andBool MSG_SENDER ==Int #PROXY_ID
    ; Requirements from code
    ; Owner address cannot be null
    andBool OWNER     =/=Int 0
    andBool OWNER     =/=Int #SENTINEL
    ; No duplicate owners allowed
    andBool INIT_OWNER ==Int 0
    ; The hashes are different (the hash2 lemma is not enough)
    andBool #hashedLocation({COMPILER}, {OWNERS}, #SENTINEL) =/=Int #hashedLocation({COMPILER}, {OWNERS}, OWNER)
    ; Overflow
    andBool OWNERCOUNT +Int 1 >=Int pow256

[addOwnerWithThreshold-failure-3-a]
statusCode: _ => EVMC_SUCCESS
+requires:
    andBool THRESHOLD ==Int NEW_THRESHOLD
+ensures:
    andBool select(M2, #hashedLocation({COMPILER}, {OWNERS},     #SENTINEL)) ==Int OWNER
    andBool select(M2, #hashedLocation({COMPILER}, {OWNERS},     OWNER))     ==Int INIT_SENTINEL
    andBool select(M2, #hashedLocation({COMPILER}, {OWNERCOUNT}, .IntList))  ==Int OWNERCOUNT +Word 1
    andBool select(M2, #hashedLocation({COMPILER}, {THRESHOLD}, .IntList))   ==Int THRESHOLD

[addOwnerWithThreshold-failure-3-b]
statusCode: _ => EVMC_REVERT
+requires:
    andBool THRESHOLD =/=Int NEW_THRESHOLD
    ; The requirements specified in the function changeThreshold cannot hold in the case of overflow,
    ; as OWNERCOUNT + 1 = 0, and both requirements cannot hold at the same time
    ;   Requirements from code:
    ;   Validate that threshold is smaller than number of owners
    ;   andBool NEW_THRESHOLD <=Int OWNERCOUNT
    ;   There has to be at least one safe owner
    ;   andBool NEW_THRESHOLD >=Int 1

[removeOwner]
k: (#execute => #halt) ~> _
output: _ => _
callStack: _
this: #PROXY_ID
msg_sender: MSG_SENDER
callData: #abiCallData("removeOwner", (#address(PREV_OWNER),
                                       #address(OWNER),
                                       #uint256(NEW_THRESHOLD)))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(STARTGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _ => _
coinbase: _ => _
proxy_storage:
    M1:Map => M2:Map
+requires:
    ; storage
    andBool select(M1, #hashedLocation({COMPILER}, {OWNERS}, OWNER))        ==Int INIT_OWNER
    andBool select(M1, #hashedLocation({COMPILER}, {OWNERS}, PREV_OWNER))   ==Int INIT_PREV_OWNER
    andBool select(M1, #hashedLocation({COMPILER}, {THRESHOLD}, .IntList))  ==Int THRESHOLD
    andBool select(M1, #hashedLocation({COMPILER}, {OWNERCOUNT}, .IntList)) ==Int OWNERCOUNT
    ; Contract invariant
    andBool OWNERCOUNT >=Int 1
    ; Range
    andBool #rangeAddress(  MSG_SENDER)
    andBool #rangeAddress(  PREV_OWNER)
    andBool #rangeAddress(  OWNER)
    andBool #rangeAddress(  INIT_OWNER)
    andBool #rangeAddress(  INIT_PREV_OWNER)
    andBool #rangeUInt(256, NEW_THRESHOLD)
    andBool #rangeUInt(256, THRESHOLD)
    andBool #rangeUInt(256, OWNERCOUNT)
ensures:

[removeOwner-success]
statusCode: _ => EVMC_SUCCESS
+requires:
    ; Property to verify
    andBool MSG_SENDER ==Int #PROXY_ID
    ; Requirements from code
    ; Only allow to remove an owner, if threshold can still be reached.
    andBool OWNERCOUNT -Int 1 >=Int NEW_THRESHOLD
    ; Validate owner address and check that it corresponds to owner index
    andBool OWNER =/=Int 0
    andBool OWNER =/=Int #SENTINEL
    andBool INIT_PREV_OWNER ==Int OWNER
    ; Path condition
    andBool OWNER =/=Int PREV_OWNER     // implied from 'owners[prevOwner] == owner' and 'owner != SENTINEL_OWNERS'
+ensures:
   andBool select(M2, #hashedLocation({COMPILER}, {OWNERS}, OWNER))         ==Int 0
   andBool select(M2, #hashedLocation({COMPILER}, {OWNERS}, PREV_OWNER))    ==Int INIT_OWNER
   andBool select(M2, #hashedLocation({COMPILER}, {OWNERCOUNT}, .IntList))  ==Int OWNERCOUNT -Int 1
   andBool M1 ==IMap M2 except (
        SetItem(#hashedLocation({COMPILER}, {OWNERS}, OWNER))
        SetItem(#hashedLocation({COMPILER}, {OWNERS}, PREV_OWNER))
        SetItem(#hashedLocation({COMPILER}, {THRESHOLD}, .IntList))
        SetItem(#hashedLocation({COMPILER}, {OWNERCOUNT}, .IntList))
        .Set)

[removeOwner-success-1]
log: _:List ( .List => ListItem(#abiEventLog(#PROXY_ID, "RemovedOwner", #address(OWNER))) )
+requires:
    ; Requirements from code
    ; Threshold is unchanged
    andBool THRESHOLD ==Int NEW_THRESHOLD
+ensures:
    andBool select(M2, #hashedLocation({COMPILER}, {THRESHOLD}, .IntList))   ==Int THRESHOLD

[removeOwner-success-2]
log: _:List ( .List => ListItem(#abiEventLog(#PROXY_ID, "RemovedOwner", #address(OWNER)))
                       ListItem(#abiEventLog(#PROXY_ID, "ChangedThreshold", #uint256(NEW_THRESHOLD))) )
+requires:
    ; Requirements from code
    ; Threshold is changed.
    andBool THRESHOLD =/=Int NEW_THRESHOLD
    ; Requirements from changeThreshold
    ; Validate that threshold is smaller than number of owners
    ; andBool NEW_THRESHOLD <=Int OWNERCOUNT -Int 1 // already in the pre-condition
    ; There has to be at least one Safe owner
    andBool NEW_THRESHOLD >=Int 1
+ensures:
   andBool select(M2, #hashedLocation({COMPILER}, {THRESHOLD}, .IntList))   ==Int NEW_THRESHOLD

[removeOwner-failure]
statusCode: _ => EVMC_REVERT
+ensures:
   andBool M1 ==IMap M2 except (
        SetItem(#hashedLocation({COMPILER}, {OWNERS}, OWNER))
        SetItem(#hashedLocation({COMPILER}, {OWNERS}, PREV_OWNER))
        SetItem(#hashedLocation({COMPILER}, {THRESHOLD}, .IntList))
        SetItem(#hashedLocation({COMPILER}, {OWNERCOUNT}, .IntList))
        .Set)

[removeOwner-failure-1]
log: _

[removeOwner-failure-1-a]
+requires:
    ; Property to verify doesn't hold
    andBool MSG_SENDER =/=Int #PROXY_ID

[removeOwner-failure-1-b]
+requires:
    ; Property to verify
    andBool MSG_SENDER ==Int #PROXY_ID
    ; Requirements from code that don't hold
    andBool ( OWNERCOUNT -Int 1 <Int NEW_THRESHOLD
       orBool OWNER ==Int 0
       orBool OWNER ==Int #SENTINEL
       orBool INIT_PREV_OWNER =/=Int OWNER )

[removeOwner-failure-2]
log: _ => _
+requires:
    ; Property to verify
    andBool MSG_SENDER ==Int #PROXY_ID
    ; Requirements from code
    ; Only allow to remove an owner, if threshold can still be reached.
    andBool OWNERCOUNT -Int 1 >=Int NEW_THRESHOLD
    ; Validate owner address and check that it corresponds to owner index
    andBool OWNER =/=Int 0
    andBool OWNER =/=Int #SENTINEL
    andBool INIT_PREV_OWNER ==Int OWNER
    ; Path condition
    andBool OWNER =/=Int PREV_OWNER     // implied from 'owners[prevOwner] == owner' and 'owner != SENTINEL_OWNERS'
    ; Threshold is changed
    andBool THRESHOLD =/=Int NEW_THRESHOLD
    ; Requirements from code that don't hold
    ; andBool NEW_THRESHOLD >Int OWNERCOUNT -Int 1 // negation of this req. in the pre-condition
    andBool NEW_THRESHOLD ==Int 0

[swapOwner]
k: (#execute => #halt) ~> _
output: _ => _
callStack: _
this: #PROXY_ID
msg_sender: MSG_SENDER
callData: #abiCallData("swapOwner", (#address(PREV_OWNER), #address(OLD_OWNER), #address(NEW_OWNER)))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(STARTGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _ => _
coinbase: _ => _
proxy_storage:
    M1:Map => M2:Map
+requires:
    ; storage
    andBool INIT_PREV_OWNER ==Int select(M1:Map, #hashedLocation({COMPILER}, {OWNERS}, PREV_OWNER))
    andBool INIT_OLD_OWNER  ==Int select(M1:Map, #hashedLocation({COMPILER}, {OWNERS}, OLD_OWNER))
    andBool INIT_NEW_OWNER  ==Int select(M1:Map, #hashedLocation({COMPILER}, {OWNERS}, NEW_OWNER))
    ; Range
    andBool #rangeAddress(MSG_SENDER)
    andBool #rangeAddress(PREV_OWNER)
    andBool #rangeAddress(OLD_OWNER)
    andBool #rangeAddress(NEW_OWNER)
    andBool #rangeAddress(INIT_PREV_OWNER)
    andBool #rangeAddress(INIT_OLD_OWNER)
    andBool #rangeAddress(INIT_NEW_OWNER)
ensures:
   andBool M1 ==IMap M2 except (
        SetItem(#hashedLocation({COMPILER}, {OWNERS}, PREV_OWNER))
        SetItem(#hashedLocation({COMPILER}, {OWNERS}, OLD_OWNER))
        SetItem(#hashedLocation({COMPILER}, {OWNERS}, NEW_OWNER))
       .Set)

[swapOwner-success]
statusCode: _ => EVMC_SUCCESS
log: _:List ( .List => ListItem(#abiEventLog(#PROXY_ID, "RemovedOwner", #address(OLD_OWNER)))
                       ListItem(#abiEventLog(#PROXY_ID, "AddedOwner",   #address(NEW_OWNER))) )
+requires:
    ; requirements from code
    ; authorized
    andBool MSG_SENDER ==Int #PROXY_ID
    ; Owner address cannot be null.
    andBool NEW_OWNER =/=Int 0
    andBool NEW_OWNER =/=Int #SENTINEL
    ; No duplicate owners allowed.
    andBool INIT_NEW_OWNER ==Int 0
    ; Validate oldOwner address and check that it corresponds to owner index
    andBool OLD_OWNER =/=Int 0
    andBool OLD_OWNER =/=Int #SENTINEL
    andBool INIT_PREV_OWNER ==Int OLD_OWNER
    ; path condition
    ; All owners are different
    andBool PREV_OWNER =/=Int OLD_OWNER  // implied from `owners[prevOwner] == oldOwner` (implying `prevOwner != oldOwner` or `prevOwner == oldOwner == SENTINEL_OWNERS`) and `oldOwner != SENTINEL_OWNERS`
    andBool PREV_OWNER =/=Int NEW_OWNER  // implied from `owners[prevOwner] == oldOwner != address(0)` and `owners[newOwner] == address(0)`
    andBool OLD_OWNER  =/=Int NEW_OWNER  // implied from `owners[prevOwner] == oldOwner` (implying `owners[oldOwner] != address(0)`) and `owners[newOwner] == address(0)`
+ensures:
   andBool select(M2, #hashedLocation({COMPILER}, {OWNERS}, PREV_OWNER)) ==Int NEW_OWNER
   andBool select(M2, #hashedLocation({COMPILER}, {OWNERS}, OLD_OWNER))  ==Int 0
   andBool select(M2, #hashedLocation({COMPILER}, {OWNERS}, NEW_OWNER))  ==Int INIT_OLD_OWNER

[swapOwner-failure]
statusCode: _ => EVMC_REVERT
log: _

[swapOwner-failure-1]
+requires:
    ; requirements from code won't hold
    ; authorized
    andBool MSG_SENDER =/=Int #PROXY_ID

[swapOwner-failure-2]
+requires:
    ; requirements from code won't hold
    ; authorized
    andBool MSG_SENDER ==Int #PROXY_ID
    ; Owner address cannot be null.
    andBool ( NEW_OWNER ==Int 0
       orBool NEW_OWNER ==Int #SENTINEL
       ; No duplicate owners allowed.
       orBool INIT_NEW_OWNER =/=Int 0
       ; Validate oldOwner address and check that it corresponds to owner index
       orBool OLD_OWNER ==Int 0
       orBool OLD_OWNER ==Int #SENTINEL
       orBool INIT_PREV_OWNER =/=Int OLD_OWNER )

;
; ModuleManager
;

[enableModule]
k: (#execute => #halt) ~> _
output: _ => _
callStack: _
this: #PROXY_ID
msg_sender: MSG_SENDER
callData: #abiCallData("enableModule", #address(MODULE))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(STARTGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _ => _
coinbase: _ => _
proxy_storage:
    M1:Map => M2:Map
+requires:
    ; storage
    andBool select(M1, #hashedLocation({COMPILER}, {MODULES}, #SENTINEL)) ==Int INIT_SENTINEL
    andBool select(M1, #hashedLocation({COMPILER}, {MODULES}, MODULE))    ==Int INIT_MODULE
    ; Range
    andBool #rangeAddress(MSG_SENDER)
    andBool #rangeAddress(MODULE)
    andBool #rangeAddress(INIT_MODULE)
    andBool #rangeAddress(INIT_SENTINEL)
    ; Contract invariant

[enableModule-success]
statusCode: _ => EVMC_SUCCESS
log: _:List ( .List => ListItem(#abiEventLog(#PROXY_ID, "EnabledModule", #address(MODULE))) )
+requires:
    ; Requirements from code
    ; Module address cannot be null or sentinel.
    andBool MODULE =/=Int 0
    andBool MODULE =/=Int #SENTINEL
    ; Module cannot be added twice.
    andBool INIT_MODULE ==Int 0
    ; Property to verify
    andBool MSG_SENDER ==Int #PROXY_ID
    ; the hash2 lemma is not enough here, since the SENTINEL location is fully evaluated: 92458281274488595289803937127152923398167637295201432141969818930235769911599
    andBool #hashedLocation({COMPILER}, {MODULES}, MODULE) =/=Int #hashedLocation({COMPILER}, {MODULES}, #SENTINEL)
ensures:
    andBool select(M2, #hashedLocation({COMPILER}, {MODULES}, #SENTINEL)) ==Int MODULE
    andBool select(M2, #hashedLocation({COMPILER}, {MODULES}, MODULE))    ==Int INIT_SENTINEL
    andBool M1 ==IMap M2 except (
         SetItem(#hashedLocation({COMPILER}, {MODULES}, MODULE))
         SetItem(#hashedLocation({COMPILER}, {MODULES}, #SENTINEL))
         .Set)

[enableModule-failure]
statusCode: _ => EVMC_REVERT
log: _

[enableModule-failure-1]
+requires:
    andBool MSG_SENDER =/=Int #PROXY_ID

[enableModule-failure-2]
+requires:
    andBool MSG_SENDER ==Int #PROXY_ID
    andBool ( MODULE ==Int 0
       orBool MODULE ==Int #SENTINEL
       orBool INIT_MODULE =/=Int 0 )

[disableModule]
k: (#execute => #halt) ~> _
output: _ => _
callStack: _
this: #PROXY_ID
msg_sender: MSG_SENDER
callData: #abiCallData("disableModule", (#address(PREV_MODULE), #address(MODULE)))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(STARTGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _ => _
coinbase: _ => _
proxy_storage:
    M1:Map => M2:Map
+requires:
    ; storage
    andBool select(M1, #hashedLocation({COMPILER}, {MODULES}, MODULE))      ==Int INIT_MODULE
    andBool select(M1, #hashedLocation({COMPILER}, {MODULES}, PREV_MODULE)) ==Int INIT_PREV_MODULE
    ; Range
    andBool #rangeAddress(MSG_SENDER)
    andBool #rangeAddress(PREV_MODULE)
    andBool #rangeAddress(MODULE)
    andBool #rangeAddress(INIT_MODULE)
    andBool #rangeAddress(INIT_PREV_MODULE)
    ; Contract invariant

[disableModule-success]
statusCode: _ => EVMC_SUCCESS
log: _:List ( .List => ListItem(#abiEventLog(#PROXY_ID, "DisabledModule", #address(MODULE))) )
+requires:
    ; Requirements from code
    ; Validate module address and check that it corresponds to module index.
    andBool MODULE =/=Int 0
    andBool MODULE =/=Int #SENTINEL
    andBool INIT_PREV_MODULE ==Int MODULE
    ; Path condition
    andBool MODULE =/=Int PREV_MODULE  // implied from 'modules[prevModule] == module' and 'module != SENTINEL_MODULES'
    ; Property to verify
    andBool MSG_SENDER ==Int #PROXY_ID
ensures:
    andBool select(M2, #hashedLocation({COMPILER}, {MODULES}, MODULE))      ==Int 0
    andBool select(M2, #hashedLocation({COMPILER}, {MODULES}, PREV_MODULE)) ==Int INIT_MODULE
    andBool M1 ==IMap M2 except (
         SetItem(#hashedLocation({COMPILER}, {MODULES}, MODULE))
         SetItem(#hashedLocation({COMPILER}, {MODULES}, PREV_MODULE))
         .Set)

[disableModule-failure]
statusCode: _ => EVMC_REVERT
log: _

[disableModule-failure-1]
+requires:
    andBool MSG_SENDER =/=Int #PROXY_ID

[disableModule-failure-2]
+requires:
    andBool MSG_SENDER ==Int #PROXY_ID
    andBool ( MODULE ==Int 0
       orBool MODULE ==Int #SENTINEL
       orBool INIT_PREV_MODULE =/=Int MODULE )

[execTransactionFromModule]
k: (#execute => #halt) ~> _
output: _ => _
log: _
callStack: _
this: #PROXY_ID
msg_sender: MSG_SENDER
callData: #abiCallData("execTransactionFromModule", (
            #address(TO),
            #uint256(VALUE),
            #bytes(#buf(DATA_LEN, DATA)),
            #uint8(OPERATION)))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(STARTGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _ => _
coinbase: _ => _
proxy_storage:
    M1:Map => M2:Map
+requires:
    ; storage
    andBool select(M1, #hashedLocation({COMPILER}, {MODULES}, MSG_SENDER)) ==Int INIT_MSG_SENDER
    ; Range
    andBool #rangeAddress(MSG_SENDER)
    andBool #rangeAddress(TO)
    andBool #rangeUInt(256, VALUE)
    andBool #rangeUInt(256, DATA_LEN)
    ; enum Enum.Operation, 3 possible values encoded to 0-2.
    andBool #range(0 <= OPERATION <= 2)
    andBool #rangeUInt(256, INIT_MSG_SENDER)
    ; Contract invariant

[execTransactionFromModule-failure]
statusCode: _ => EVMC_REVERT
output: _ => _
+requires:
    ; only added modules can execute the transaction
    andBool INIT_MSG_SENDER ==Int 0

;
; MasterCopy
;

[changeMasterCopy]
k: (#execute => #halt) ~> _
output: _ => _
log: _
callStack: _
this: #PROXY_ID
msg_sender: MSG_SENDER
callData: #abiCallData("changeMasterCopy", #address(NEW_MASTER_COPY))
callValue: 0
wordStack: .WordStack => _
localMem: .Map => _
pc: 0 => _
gas: #gas(STARTGAS, 0, 0) => _
memoryUsed: 0 => _
refund: _ => _
coinbase: _ => _
proxy_storage:
    M1:Map => M2:Map
+requires:
    ; storage
    andBool select(M1, #hashedLocation({COMPILER}, {MASTER_COPY}, .IntList)) ==Int MASTER_COPY
    ; Range
    andBool #rangeAddress(MSG_SENDER)
    andBool #rangeAddress(MASTER_COPY)
    andBool #rangeAddress(NEW_MASTER_COPY)
    ; Contract invariant

[changeMasterCopy-success]
statusCode: _ => EVMC_SUCCESS
+requires:
    ; Path condition
    andBool NEW_MASTER_COPY =/=Int 0
    ; Property to verify
    andBool MSG_SENDER ==Int #PROXY_ID
ensures:
    andBool select(M2, #hashedLocation({COMPILER}, {MASTER_COPY}, .IntList)) ==Int NEW_MASTER_COPY
    andBool M1 ==IMap M2 except (
         SetItem(#hashedLocation({COMPILER}, {MASTER_COPY}, .IntList))
         .Set)

[changeMasterCopy-failure]
statusCode: _ => EVMC_REVERT

[changeMasterCopy-failure-1]
+requires:
    andBool MSG_SENDER =/=Int #PROXY_ID

[changeMasterCopy-failure-2]
+requires:
    andBool MSG_SENDER ==Int #PROXY_ID
    andBool NEW_MASTER_COPY ==Int 0



[pgm]
compiler: "Solidity"
; address masterCopy
master_copy: 0
; mapping (address => address) internal modules
modules: 1
; mapping(address => address) internal owners
owners: 2
; uint256 ownerCount
ownercount: 3
; uint256 internal threshold
threshold: 4
; uint256 public nonce
nonce: 5
; bytes32 public domainSeparator
domain_separator: 6
; mapping(bytes32 => uint256) signedMessage
signed_message: 7
; mapping(address => mapping(bytes32 => uint256)) approvedHashes
approved_hashes: 8
safe_tx_typehash: "0x14d461bc7412367e924637b363c7bf29b8f47e2f84869f4426e5633d8af47b20"
; external call to private internal functions should not work
stop_external_call: 407
master_copy_code: ""
proxy_code: "0x60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634555d5c91461008b5780635c60da1b146100b6575b73ffffffffffffffffffffffffffffffffffffffff600054163660008037600080366000845af43d6000803e6000811415610086573d6000fd5b3d6000f35b34801561009757600080fd5b506100a061010d565b6040518082815260200191505060405180910390f35b3480156100c257600080fd5b506100cb610116565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006002905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690509056fea165627a7a723058201cddd95839fb6a2721e9db6df2726cacc48f77a2b18ba97008f236afad1ada7f0029"
