[root]
k: (#execute => #halt) ~> _
schedule: BYZANTIUM
gas: 1000000 => _
balance: 0
log: _
refund: _
storage: _:Map
origStorage: _
callDepth: CD
requires:
    andBool #range(0 <= CD < 1023)

; callData is set in subspecs
[ecrecT]
statusCode: _ => EVMC_SUCCESS
+requires:
    // Range
    andBool #rangeAddress(      A1 )
    andBool #rangeBytes( 32,    P1 )
    andBool #rangeUInt( 8,      A2V )
    andBool #rangeBytes( 32,    P3 )
    andBool #rangeBytes( 32,    P4 )
    andBool #rangeAddress(      A3 )

    andBool ECREC_DATA ==K #encodeArgs( #bytes32(P1), #uint8(A2V), #bytes32(P3), #bytes32(P4) )
    andBool A2 ==Int #symEcrec( ECREC_DATA )
    andBool notBool #ecrecEmpty( ECREC_DATA )

[ecrecT-false]
output: _ => #encodeArgs( #bool(0) )
+requires:
    andBool (A1 >=Int A2 orBool A2 >=Int A3 )

; SPEC fails on old K. Requires abstraction of #symEcrec into fresh var in implication Z3 query.
; #symEcrec must not have [smtlib], otherwise test is pointless.
; function ecrecImplication(address a1, bytes32 p1, uint8 a2v, bytes32 p3, bytes32 p4, address a3)
[ecrecT-false-implication]
callData: #abiCallData("ecrecImplication", #address(A1), #bytes32(P1), #uint8(A2V), #bytes32(P3), #bytes32(P4), #address(A3))

; SPEC fails on old K. Requires abstraction of #symEcrec into fresh var in constraint Z3 query.
; function ecrecConstraint(address a1, bytes32 p1, uint8 a2v, bytes32 p3, bytes32 p4, address a3)
[ecrecT-false-constraint]
callData: #abiCallData("ecrecConstraint", #address(A1), #bytes32(P1), #uint8(A2V), #bytes32(P3), #bytes32(P4), #address(A3))

; Passes because B is RHS-only and is existentially quantified in Z3 query.
; Requires smt prelude option: "(set-option :smt.mbqi true)"
[rhsOnlyVar]
k: hash1(A:Int) => hash1(B)
statusCode: EVMC_SUCCESS
callData: _
output: _

; Will fail if #getKLabelString doesn't handle properly variable arguments,
; because then #getKLabelString(K) ==String "foo" will evaluate to false.
; Interacts with lemma:
;    rule 0 <=Int X => true
;       requires 0 <Int X
[test-getKLabelString]
k: #halt ~> (0 <=Int X => false) ~> K
statusCode: EVMC_SUCCESS
callData: _
output: _
requires:
    andBool #getKLabelString(K) ==String "foo"
    andBool X <Int 0

; FIXME: test passes at the moment, meaning we can prove from false everything.
; Should not be allowed because it can hide a bug in builtin functions.
;[test-false-requires]
;k: (#halt => _) ~> X
;statusCode: EVMC_SUCCESS
;callData: _
;output: _
;requires: andBool X >Int 0 andBool notBool X >Int 0 // false requires
;ensures: X ==Int 0

[pgm]
compiler: "Solidity"
code: "0x60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632700eb07146100515780636f78f1e714610103575b600080fd5b34801561005d57600080fd5b506100e9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600019169060200190929190803560ff16906020019092919080356000191690602001909291908035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506101b5565b604051808215151515815260200191505060405180910390f35b34801561010f57600080fd5b5061019b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600019169060200190929190803560ff16906020019092919080356000191690602001909291908035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102bf565b604051808215151515815260200191505060405180910390f35b600080600187878787604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af115801561022f573d6000803e3d6000fd5b5050506020604051035190508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161080156102a157508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16105b156102af57600191506102b4565b600091505b509695505050505050565b600080600187878787604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1158015610339573d6000803e3d6000fd5b5050506020604051035190508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161080156103ab57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16105b91505096955050505050505600a165627a7a72305820427c1711df779990ff475888933b7530111bd097440564a979c15c9c1ecdebb10029"
