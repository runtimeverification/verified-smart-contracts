; ERC20-EVM Specification Template Parameters
; For more details, refer to README.md.

[root]
schedule: CONSTANTINOPLE
gas: #gas(INITGAS, 0, 0) => _
callData: _ => _
origStorage: STORAGE
commandVars: .Map  => _

; Essentially test that storage is unchanged, log is unchanged, output size is 32.
[balanceOf]
k:     saveEthereum V_CONF_BEFORE
    ~> #mkCallShortcut V_CONF_BEFORE CALLER_ID ACCT_ID
                       #abiCallData("balanceOf", #address(OWNER))       V_OUT
    ~> #assert #sizeWordStackExp(getVar V_OUT) ==S 32
    => .
statusCode: _ => EVMC_SUCCESS
output: _ => _
log: _
refund: _
storage: STORAGE
requires:
    andBool #rangeAddress(OWNER)
ensures:

[transfer]
refund: _ => _
requires:
    andBool #rangeAddress(TO_ID)
    andBool #rangeUInt(256, VALUE)
    andBool #rangeUInt(256, BAL_FROM)
    andBool #rangeUInt(256, BAL_TO)

[transfer-success]
statusCode: _ => EVMC_SUCCESS
output: _ => #buf(32, 1)
log: _:List ( .List => ListItem(#abiEventLog(ACCT_ID, "Transfer", #indexed(#address(CALLER_ID)), #indexed(#address(TO_ID)), #uint256(VALUE))) )

[transfer-success-1]
    ; precondition
k:     saveEthereum V_CONF_BEFORE
    ~> #mkCallShortcut V_CONF_BEFORE CALLER_ID ACCT_ID
                       #abiCallData("balanceOf", #address(CALLER_ID))       V_CALLER_BAL_BEFORE
    ~> #mkCallShortcut V_CONF_BEFORE CALLER_ID ACCT_ID
                       #abiCallData("balanceOf", #address(TO_ID))           V_TO_BAL_BEFORE
    ~> #mkCallShortcut V_CONF_BEFORE CALLER_ID ACCT_ID
                       #abiCallData("balanceOf", #address(ANY_OTHER_ADDR))  V_ANY_OTHER_BAL_BEFORE
    ~> #mkCallShortcut V_CONF_BEFORE CALLER_ID ACCT_ID
                       #abiCallData("allowance", #address(ANY_ADDR_1), #address(ANY_ADDR_2))  V_ANY_ALLOWANCE_BEFORE
    ~> #assume (getVar V_CALLER_BAL_BEFORE) ==S #buf(32, BAL_FROM)
    ~> #assume (getVar V_TO_BAL_BEFORE)     ==S #buf(32, BAL_TO)
    ; tested function call
    ~> #mkCallShortcut V_CONF_BEFORE CALLER_ID ACCT_ID
                           #abiCallData("transfer", #address(TO_ID), #uint256(VALUE))  V_TRANSFER_OUT
    ~> saveEthereum V_CONF_AFTER
    ; retrieving postcondition data
    ~> #mkCallShortcut V_CONF_AFTER CALLER_ID ACCT_ID
                       #abiCallData("balanceOf", #address(CALLER_ID))       V_CALLER_BAL_AFTER
    ~> #mkCallShortcut V_CONF_AFTER CALLER_ID ACCT_ID
                       #abiCallData("balanceOf", #address(TO_ID))           V_TO_BAL_AFTER
    ~> #mkCallShortcut V_CONF_AFTER CALLER_ID ACCT_ID
                       #abiCallData("balanceOf", #address(ANY_OTHER_ADDR))  V_ANY_OTHER_BAL_AFTER
    ~> #mkCallShortcut V_CONF_AFTER CALLER_ID ACCT_ID
                       #abiCallData("allowance", #address(ANY_ADDR_1), #address(ANY_ADDR_2))  V_ANY_ALLOWANCE_AFTER
    ; postcondition
    ~> restoreEthereum V_CONF_AFTER
    ~> #assert (getVar V_CALLER_BAL_AFTER)     ==S  #buf(32, BAL_FROM -Int VALUE)
    ~> #assert (getVar V_TO_BAL_AFTER)         ==S  #buf(32, BAL_TO   +Int VALUE)
    ; check that balances other than FROM and TO are unchanged, and all allowances are unchanged
    ~> #assert (getVar V_ANY_OTHER_BAL_BEFORE) ==S  (getVar V_ANY_OTHER_BAL_AFTER)
    ~> #assert (getVar V_ANY_ALLOWANCE_BEFORE) ==S  (getVar V_ANY_ALLOWANCE_AFTER)
    => .
storage: STORAGE => _
+requires:
    andBool CALLER_ID =/=Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool BAL_TO +Int VALUE <Int (2 ^Int 256)
    andBool TO_ID =/=Int 0
    ; SOLAR
    ; todo can be replaced with some "var Id" declaration if using program parser
    andBool V_CONF_BEFORE             ==K String2Id("V_CONF_BEFORE")
    andBool V_CONF_AFTER              ==K String2Id("V_CONF_AFTER")
    andBool V_CALLER_BAL_BEFORE       ==K String2Id("V_CALLER_BAL_BEFORE")
    andBool V_TO_BAL_BEFORE           ==K String2Id("V_TO_BAL_BEFORE")
    andBool V_CALLER_BAL_AFTER        ==K String2Id("V_CALLER_BAL_AFTER")
    andBool V_TO_BAL_AFTER            ==K String2Id("V_TO_BAL_AFTER")
    andBool V_TRANSFER_OUT            ==K String2Id("V_TRANSFER_OUT")
    ; generic accounts for testing unchanged storage values
    andBool #rangeAddress(ANY_ADDR_1)
    andBool #rangeAddress(ANY_ADDR_2)
    andBool V_ANY_ALLOWANCE_BEFORE    ==K String2Id("V_ANY_ALLOWANCE_BEFORE")
    andBool V_ANY_ALLOWANCE_AFTER     ==K String2Id("V_ANY_ALLOWANCE_AFTER")
    andBool #rangeAddress(ANY_OTHER_ADDR)
    andBool ANY_OTHER_ADDR =/=Int CALLER_ID
    andBool ANY_OTHER_ADDR =/=Int TO_ID
    andBool V_ANY_OTHER_BAL_BEFORE    ==K String2Id("V_ANY_OTHER_BAL_BEFORE")
    andBool V_ANY_OTHER_BAL_AFTER     ==K String2Id("V_ANY_OTHER_BAL_AFTER")
ensures:

[transfer-success-2]
storage: M
origStorage:
    M
+requires:
    andBool select(M, #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID)) ==Int BAL_FROM
    andBool CALLER_ID ==Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool TO_ID =/=Int 0
ensures:

[transfer-failure]
output: _ => _
log: _

[transfer-failure-1]
storage: M1 => M2
origStorage:
    M1
+requires:
    andBool select(M1, #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID)) ==Int BAL_FROM
    andBool select(M1, #hashedLocation({COMPILER}, {_BALANCES}, TO_ID))     ==Int BAL_TO

[transfer-failure-1-a]
statusCode: _ => EVMC_REVERT
+requires:
    andBool CALLER_ID =/=Int TO_ID
    andBool ( VALUE >Int BAL_FROM
     orBool   TO_ID ==Int 0 )
ensures:
    ensures M2 ==IMap M1

[transfer-failure-1-b]
statusCode: _ => EVMC_INVALID_INSTRUCTION
+requires:
    andBool CALLER_ID =/=Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool TO_ID =/=Int 0
    andBool BAL_TO +Int VALUE >=Int (2 ^Int 256)
ensures:
    ensures M2 ==IMap M1
        except (SetItem(#hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID)) .Set)

[transfer-failure-2]
statusCode: _ => EVMC_REVERT
storage: M
origStorage: _
+requires:
    andBool select(M, #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID)) ==Int BAL_FROM
    andBool CALLER_ID ==Int TO_ID
    andBool ( VALUE >Int BAL_FROM
     orBool   TO_ID ==Int 0 )
ensures:

[pgm]
compiler: "Solidity"
; Zeppelin ERC20 bytecode
code: "0x60606040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063095ea7b31461009357806318160ddd146100ed57806323b872dd14610116578063661884631461018f57806370a08231146101e9578063a9059cbb14610236578063d73dd62314610290578063dd62ed3e146102ea575b600080fd5b341561009e57600080fd5b6100d3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610356565b604051808215151515815260200191505060405180910390f35b34156100f857600080fd5b610100610448565b6040518082815260200191505060405180910390f35b341561012157600080fd5b610175600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610452565b604051808215151515815260200191505060405180910390f35b341561019a57600080fd5b6101cf600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061080c565b604051808215151515815260200191505060405180910390f35b34156101f457600080fd5b610220600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a9d565b6040518082815260200191505060405180910390f35b341561024157600080fd5b610276600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ae5565b604051808215151515815260200191505060405180910390f35b341561029b57600080fd5b6102d0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d04565b604051808215151515815260200191505060405180910390f35b34156102f557600080fd5b610340600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f00565b6040518082815260200191505060405180910390f35b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600154905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561048f57600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156104dc57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561056757600080fd5b6105b8826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f8790919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061064b826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fa090919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061071c82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f8790919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083111561091d576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109b1565b6109308382610f8790919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610b2257600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610b6f57600080fd5b610bc0826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f8790919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c53826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fa090919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000610d9582600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fa090919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000828211151515610f9557fe5b818303905092915050565b6000808284019050838110151515610fb457fe5b80915050929150505600a165627a7a7230582058550344abe30ea80d7004da1407b11319bd56cc09cfbbc9ca9a7c80adacd5a30029"
