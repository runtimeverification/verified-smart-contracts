[approve]
statusCode: _ => SC
output: _ => NEW_OUTPUT
callData: #abiCallData("approve", #address(SPENDER), #uint256(VALUE))
log: OLD_LOG => NEW_LOG
refund: _ => _
storage: M1 => M2
origStorage: M1
requires:
    // types
    andBool #rangeAddress(SPENDER)
    andBool #rangeUInt(256, VALUE)
    // let-bindings
    andBool OLD_ALLOWANCE ==Int select(M1, #hashedLocation({COMPILER}, {_ALLOWANCES}, CALLER_ID SPENDER))
ensures:
    andBool (
        (
            // return true
            SC ==K EVMC_SUCCESS
            andBool NEW_OUTPUT ==K #buf(32, 1)
            andBool NEW_LOG    ==K OLD_LOG ListItem(#abiEventLog(ACCT_ID, "Approval", #indexed(#address(CALLER_ID)), #indexed(#address(SPENDER)), #uint256(VALUE)))
            andBool M2 ==IMap M1 [ #hashedLocation({COMPILER}, {_ALLOWANCES}, CALLER_ID SPENDER) <- VALUE ]
        ) orBool (
            // revert
            SC =/=K EVMC_SUCCESS
            // pre-conditions
            {EXTRA_PRE_CONDITIONS}
        ) orBool (
            // return false
            SC ==K EVMC_SUCCESS andBool NEW_OUTPUT ==K #buf(32, 0)
            andBool OLD_LOG ==K NEW_LOG
            andBool M1 ==IMap M2
            // pre-conditions
            {EXTRA_PRE_CONDITIONS}
        )
    )
EXTRA_PRE_CONDITIONS:
    andBool (
        (
            CALLER_ID ==Int 0
        ) orBool (
            SPENDER ==Int 0
        ) orBool (
            VALUE ==Int 0
        ) orBool (
            VALUE =/=Int 0 andBool OLD_ALLOWANCE =/=Int 0   /* mitigates the ERC20 spend/approval race condition */
        ) orBool (
            ACCT_ID ==Int SPENDER /* 04_chainlink, non-ERC20-compliant */
        )
    )
