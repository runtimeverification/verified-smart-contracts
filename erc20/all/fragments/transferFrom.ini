[transferFrom]
callData: #abiCallData("transferFrom", #address(FROM_ID), #address(TO_ID), #uint256(VALUE))
refund: _ => _
requires:
    // types
    andBool #rangeAddress(FROM_ID)
    andBool #rangeAddress(TO_ID)
    andBool #rangeUInt(256, VALUE)
    andBool #rangeUInt(256, BAL_FROM)
    andBool #rangeUInt(256, BAL_TO)
    andBool #rangeUInt(256, ALLOW)
    // let-bindings
    andBool BAL_FROM ==Int select(M1, #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID))
    andBool BAL_TO   ==Int select(M1, #hashedLocation({COMPILER}, {_BALANCES},   TO_ID))
    andBool ALLOW    ==Int select(M1, #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID))
    // no hash collision
    andBool #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) =/=Int #hashedLocation({COMPILER}, {_BALANCES}, FROM_ID)
    andBool #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) =/=Int #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)

[transferFrom-success]
statusCode: _ => SC
output: _ => NEW_OUTPUT
log: OLD_LOG => NEW_LOG
storage: M1 => M2
origStorage: M1
+requires:
    andBool VALUE <=Int BAL_FROM
    andBool VALUE <=Int ALLOW
ensures:
    andBool (
        (
            // return true
            SC ==K EVMC_SUCCESS
            andBool NEW_OUTPUT ==K #buf(32, 1)
            andBool (
                (
                    NEW_LOG ==K OLD_LOG ListItem(#abiEventLog(ACCT_ID, "Transfer", #indexed(#address(FROM_ID)), #indexed(#address(TO_ID)), #uint256(VALUE)))
                ) orBool (
                    /* openzeppelin, transferFrom as transfer followed by approve */
                    NEW_LOG ==K OLD_LOG ListItem(#abiEventLog(ACCT_ID, "Transfer", #indexed(#address(FROM_ID)), #indexed(#address(TO_ID)), #uint256(VALUE)))
                                        ListItem(#abiEventLog(ACCT_ID, "Approval", #indexed(#address(FROM_ID)), #indexed(#address(CALLER_ID)), #uint256(ALLOW -Int VALUE)))
                )
            )
            {STORAGE_UPDATE}
        ) orBool (
            // revert
            SC =/=K EVMC_SUCCESS
            // pre-conditions
            {EXTRA_PRE_CONDITIONS}
        ) orBool (
            // return false
            SC ==K EVMC_SUCCESS andBool NEW_OUTPUT ==K #buf(32, 0)
            andBool OLD_LOG ==K NEW_LOG
            andBool M1 ==IMap M2
            // pre-conditions
            {EXTRA_PRE_CONDITIONS}
        )
    )
EXTRA_PRE_CONDITIONS:
    andBool (
        (
            CALLER_ID ==Int 0
        ) orBool (
            FROM_ID ==Int 0
        ) orBool (
            TO_ID ==Int 0
        ) orBool (
            VALUE ==Int 0  /* hkg, non-ERC20-compliant */
        ) orBool (
            BAL_TO +Int VALUE >=Int (2 ^Int 256)
        ) orBool (
            ACCT_ID ==Int TO_ID /* 04_chainlink, non-ERC20-compliant */
        )
    )

[transferFrom-success-regular]
+requires:
    // conditions
    andBool FROM_ID =/=Int TO_ID
STORAGE_UPDATE:
    andBool select(M2, #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID))           ==Int BAL_FROM -Int VALUE
    andBool select(M2, #hashedLocation({COMPILER}, {_BALANCES},   TO_ID))             ==Int BAL_TO   +Int VALUE
    andBool (
        (
            select(M2, #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID)) ==Int ALLOW    -Int VALUE
            andBool M1 ==IMap M2 except
              (SetItem(#hashedLocation({COMPILER}, {_BALANCES},   FROM_ID))
               SetItem(#hashedLocation({COMPILER}, {_BALANCES},   TO_ID))
               SetItem(#hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID)) .Set)
        ) orBool (
            /* consensys, for infinite allowance */
            ALLOW ==Int maxUInt256
            andBool M1 ==IMap M2 except
              (SetItem(#hashedLocation({COMPILER}, {_BALANCES},   FROM_ID))
               SetItem(#hashedLocation({COMPILER}, {_BALANCES},   TO_ID)) .Set)
        )
    )

[transferFrom-success-regular-overflow]
+requires:
    // conditions
    andBool BAL_TO +Int VALUE <Int (2 ^Int 256)

[transferFrom-success-self]
+requires:
    // conditions
    andBool FROM_ID ==Int TO_ID
STORAGE_UPDATE:
    andBool (
        (
            select(M2, #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID)) ==Int ALLOW -Int VALUE
            andBool M1 ==IMap M2 except
              (SetItem(#hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID)) .Set)
        ) orBool (
            /* consensys, for infinite allowance */
            ALLOW ==Int maxUInt256 andBool M1 ==IMap M2
        )
    )

[transferFrom-failure]
statusCode: _ => SC
output: _ => NEW_OUTPUT
log: OLD_LOG => NEW_LOG
storage: M1 => M2
origStorage: M1
+requires:
    andBool ( VALUE >Int BAL_FROM
       orBool VALUE >Int ALLOW )
ensures:
    andBool (
        (
            // revert
            SC =/=K EVMC_SUCCESS
        ) orBool (
            // return false
            SC ==K EVMC_SUCCESS andBool NEW_OUTPUT ==K #buf(32, 0)
            andBool OLD_LOG ==K NEW_LOG
            andBool M1 ==IMap M2
        )
    )
