[approve]
+k: ~> #assume {FULL_REQUIRES}
    ; precondition
    ~> #mkCallShortcut V_CONF_BEFORE CALLER_ID ACCT_ID
                       #abiCallData("balanceOf", #address(ANY_ADDR))                                V_ANY_BAL_BEFORE
    ~> #mkCallShortcut V_CONF_BEFORE CALLER_ID ACCT_ID
                       #abiCallData("allowance", #address(CALLER_ID), #address(SPENDER))            V_ALLOWANCE_BEFORE
    ~> #mkCallShortcut V_CONF_BEFORE CALLER_ID ACCT_ID
                       #abiCallData("allowance", #address(ANY_NONCALLER), #address(ANY_NONSPENDER)) V_OTHER_ALLOWANCE_BEFORE
    ~> #assume #var(V_ALLOWANCE_BEFORE) ==S #buf(32, ALLOWANCE_BEFORE)
    ; tested function call
    ~> #mkCallShortcut V_CONF_BEFORE CALLER_ID ACCT_ID
                           #abiCallData("approve", #address(SPENDER), #uint256(VALUE))              V_APPROVE_OUT
    ~> #saveEthereum V_CONF_AFTER
    ; retrieving postcondition data
    ~> #mkCallShortcut V_CONF_AFTER CALLER_ID ACCT_ID
                       #abiCallData("balanceOf", #address(ANY_ADDR))                                V_ANY_BAL_AFTER
    ~> #mkCallShortcut V_CONF_AFTER CALLER_ID ACCT_ID
                       #abiCallData("allowance", #address(CALLER_ID), #address(SPENDER))            V_ALLOWANCE_AFTER
    ~> #mkCallShortcut V_CONF_AFTER CALLER_ID ACCT_ID
                       #abiCallData("allowance", #address(ANY_NONCALLER), #address(ANY_NONSPENDER)) V_OTHER_ALLOWANCE_AFTER
    ; postcondition
    ~> #restoreEthereum V_CONF_AFTER
    ; we use #assume instead of #assert here, to bind ALLOWANCE_AFTER and refer it from postcondition
    ~> #assume #var(V_ALLOWANCE_AFTER)           ==S  #buf(32, ALLOWANCE_AFTER)
    ; check that balances are unchanged and allowances for other account pairs are unchanged
    ~> #assert #var(V_ANY_BAL_BEFORE)            ==S  #var(V_ANY_BAL_AFTER)
    ~> #assert #var(V_OTHER_ALLOWANCE_BEFORE)    ==S  #var(V_OTHER_ALLOWANCE_AFTER)
    ~> #assert {FULL_ENSURES}
    => .
FULL_REQUIRES: true
    ; types
    andBool #rangeAddress(SPENDER)
    andBool #rangeUInt(256, VALUE)
    ; SOLAR vars
    andBool V_CONF_AFTER                ==K String2Id("V_CONF_AFTER")
    andBool #rangeAddress(ANY_ADDR)
    andBool V_ANY_BAL_BEFORE            ==K String2Id("V_ANY_BAL_BEFORE")
    andBool V_ALLOWANCE_BEFORE          ==K String2Id("V_ALLOWANCE_BEFORE")
    andBool #rangeAddress(ANY_NONCALLER)
    andBool #rangeAddress(ANY_NONSPENDER)
    andBool ANY_NONCALLER               =/=Int CALLER_ID
    andBool ANY_NONSPENDER              =/=Int SPENDER
    andBool V_OTHER_ALLOWANCE_BEFORE    ==K String2Id("V_OTHER_ALLOWANCE_BEFORE")
    andBool V_APPROVE_OUT               ==K String2Id("V_APPROVE_OUT")
    andBool V_ANY_BAL_AFTER             ==K String2Id("V_ANY_BAL_AFTER")
    andBool V_ALLOWANCE_AFTER           ==K String2Id("V_ALLOWANCE_AFTER")
    andBool V_OTHER_ALLOWANCE_AFTER     ==K String2Id("V_OTHER_ALLOWANCE_AFTER")
FULL_ENSURES: true
    &&S (
        (
            ; return true
                (#getStatusCode ==S EVMC_SUCCESS)
            &&S (#getOutput     ==S #buf(32, 1))
            &&S (#getLog        ==S (#var(V_OLD_LOG) +List ListItem(#abiEventLog(ACCT_ID, "Approval", #indexed(#address(CALLER_ID)), #indexed(#address(SPENDER)), #uint256(VALUE)))))
            &&S (ALLOWANCE_AFTER ==Int VALUE)
        ) ||S (
            ; revert
            (#getStatusCode =/=S EVMC_SUCCESS)
            ; pre-conditions
            {EXTRA_PRE_CONDITIONS}
        ) ||S (
            ; return false
                ((#getStatusCode     ==S EVMC_SUCCESS) &&S (#getOutput ==S #buf(32, 0)))
            &&S (#var(V_OLD_LOG)     ==S #getLog)
            &&S (#var(V_OLD_STORAGE) ==S #getStorage(ACCT_ID))
            ; pre-conditions
            {EXTRA_PRE_CONDITIONS}
        )
    )
EXTRA_PRE_CONDITIONS:
    &&S (
        (
            CALLER_ID ==Int 0
        ) orBool (
            SPENDER ==Int 0
        ) orBool (
            VALUE ==Int 0
        ) orBool (
            VALUE =/=Int 0 andBool ALLOWANCE_BEFORE =/=Int 0   /* mitigates the ERC20 spend/approval race condition */
        ) orBool (
            ACCT_ID ==Int SPENDER /* 04_chainlink, non-ERC20-compliant */
        )
    )
