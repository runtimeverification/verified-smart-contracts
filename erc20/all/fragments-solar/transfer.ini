[transfer]
callData: #abiCallData("transfer", #address(TO_ID), #uint256(VALUE))
refund: _ => _
requires:
    // types
    andBool #rangeAddress(TO_ID)
    andBool #rangeUInt(256, VALUE)
    andBool #rangeUInt(256, BAL_FROM)
    andBool #rangeUInt(256, BAL_TO)
    // let-bindings
    andBool BAL_FROM ==Int select(M1, #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID))
    andBool BAL_TO   ==Int select(M1, #hashedLocation({COMPILER}, {_BALANCES}, TO_ID))

[transfer-success]
statusCode: _ => SC
output: _ => NEW_OUTPUT
log: OLD_LOG => NEW_LOG
storage: M1 => M2
origStorage: M1
+requires:
    andBool VALUE <=Int BAL_FROM
ensures:
    andBool (
        (
            // return true
            SC ==K EVMC_SUCCESS
            andBool NEW_OUTPUT ==K #buf(32, 1)
            andBool NEW_LOG    ==K OLD_LOG ListItem(#abiEventLog(ACCT_ID, "Transfer", #indexed(#address(CALLER_ID)), #indexed(#address(TO_ID)), #uint256(VALUE)))
            {STORAGE_UPDATE}
        ) orBool (
            // revert
            SC =/=K EVMC_SUCCESS
            // pre-conditions
            {EXTRA_PRE_CONDITIONS}
        ) orBool (
            // return false
            SC ==K EVMC_SUCCESS andBool NEW_OUTPUT ==K #buf(32, 0)
            andBool OLD_LOG ==K NEW_LOG
            andBool M1 ==IMap M2
            // pre-conditions
            {EXTRA_PRE_CONDITIONS}
        )
    )
EXTRA_PRE_CONDITIONS:
    andBool (
        (
            CALLER_ID ==Int 0
        ) orBool (
            TO_ID ==Int 0
        ) orBool (
            VALUE ==Int 0  /* hkg, non-ERC20-compliant */
        ) orBool (
            BAL_TO +Int VALUE >=Int (2 ^Int 256)
        ) orBool (
            ACCT_ID ==Int TO_ID /* 04_chainlink, non-ERC20-compliant */
        )
    )

[transfer-success-regular]
+requires:
    // conditions
    andBool CALLER_ID =/=Int TO_ID
STORAGE_UPDATE:
    andBool select(M2, #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID)) ==Int BAL_FROM -Int VALUE
    andBool select(M2, #hashedLocation({COMPILER}, {_BALANCES}, TO_ID))     ==Int BAL_TO   +Int VALUE
    andBool M1 ==IMap M2 except
      (SetItem(#hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID))
       SetItem(#hashedLocation({COMPILER}, {_BALANCES}, TO_ID)) .Set)

[transfer-success-regular-overflow]
+requires:
    // conditions
    andBool BAL_TO +Int VALUE <Int (2 ^Int 256)

[transfer-success-self]
+requires:
    // conditions
    andBool CALLER_ID ==Int TO_ID
STORAGE_UPDATE:
    andBool M1 ==IMap M2

[transfer-failure]
statusCode: _ => SC
output: _ => NEW_OUTPUT
log: OLD_LOG => NEW_LOG
storage: M1 => M2
origStorage: M1
+requires:
    andBool VALUE >Int BAL_FROM
ensures:
    andBool (
        (
            // revert
            SC =/=K EVMC_SUCCESS
        ) orBool (
            // return false
            SC ==K EVMC_SUCCESS andBool NEW_OUTPUT ==K #buf(32, 0)
            andBool OLD_LOG ==K NEW_LOG
            andBool M1 ==IMap M2
        )
    )
