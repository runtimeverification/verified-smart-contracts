[transferFrom]
refund: _ => _
requires:
    ; types
    andBool #rangeAddress(FROM_ID)
    andBool #rangeAddress(TO_ID)
    andBool #rangeUInt(256, VALUE)
    andBool #rangeUInt(256, BAL_FROM)
    andBool #rangeUInt(256, BAL_TO)
    andBool #rangeUInt(256, ALLOW)
    ; SOLAR
    andBool V_CONF_BEFORE             ==K String2Id("V_CONF_BEFORE")
    andBool V_CONF_AFTER              ==K String2Id("V_CONF_AFTER")
    andBool V_BAL_FROM_BEFORE         ==K String2Id("V_BAL_FROM_BEFORE")
    andBool V_BAL_TO_BEFORE           ==K String2Id("V_BAL_TO_BEFORE")
    andBool V_BAL_FROM_AFTER          ==K String2Id("V_BAL_FROM_AFTER")
    andBool V_BAL_TO_AFTER            ==K String2Id("V_BAL_TO_AFTER")
    andBool V_ALLOWANCE_BEFORE        ==K String2Id("V_ALLOWANCE_BEFORE")
    andBool V_ALLOWANCE_AFTER         ==K String2Id("V_ALLOWANCE_AFTER")
    andBool V_TRANSFER_OUT            ==K String2Id("V_TRANSFER_OUT")
    ; generic accounts for testing unchanged storage values
    andBool #rangeAddress(ANY_NON_FROM)
    andBool #rangeAddress(ANY_NON_CALLER)
    andBool ANY_NON_FROM =/=Int FROM_ID
    andBool ANY_NON_CALLER =/=Int CALLER_ID
    andBool V_ANY_OTH_ALLOWANCE_BEFORE  ==K String2Id("V_ANY_OTH_ALLOWANCE_BEFORE")
    andBool V_ANY_OTH_ALLOWANCE_AFTER   ==K String2Id("V_ANY_OTH_ALLOWANCE_AFTER")
    andBool #rangeAddress(ANY_OTHER_ADDR)
    andBool ANY_OTHER_ADDR =/=Int FROM_ID
    andBool ANY_OTHER_ADDR =/=Int TO_ID
    andBool V_ANY_OTHER_BAL_BEFORE      ==K String2Id("V_ANY_OTHER_BAL_BEFORE")
    andBool V_ANY_OTHER_BAL_AFTER       ==K String2Id("V_ANY_OTHER_BAL_AFTER")

[transferFrom-success]
    ; precondition
k:     saveEthereum V_CONF_BEFORE
    ~> #mkCallShortcut V_CONF_BEFORE CALLER_ID ACCT_ID
                       #abiCallData("balanceOf", #address(FROM_ID))         V_BAL_FROM_BEFORE
    ~> #mkCallShortcut V_CONF_BEFORE CALLER_ID ACCT_ID
                       #abiCallData("balanceOf", #address(TO_ID))           V_BAL_TO_BEFORE
    ~> #mkCallShortcut V_CONF_BEFORE CALLER_ID ACCT_ID
                       #abiCallData("balanceOf", #address(ANY_OTHER_ADDR))  V_ANY_OTHER_BAL_BEFORE
    ~> #mkCallShortcut V_CONF_BEFORE CALLER_ID ACCT_ID
                       #abiCallData("allowance", #address(FROM_ID), #address(CALLER_ID))  V_ALLOWANCE_BEFORE
    ~> #mkCallShortcut V_CONF_BEFORE CALLER_ID ACCT_ID
                       #abiCallData("allowance", #address(ANY_NON_FROM), #address(ANY_NON_CALLER))  V_ANY_OTH_ALLOWANCE_BEFORE
    ~> #assume (getVar V_BAL_FROM_BEFORE)   ==S #buf(32, BAL_FROM)
    ~> #assume (getVar V_BAL_TO_BEFORE)     ==S #buf(32, BAL_TO)
    ~> #assume (getVar V_ALLOWANCE_BEFORE)  ==S #buf(32, ALLOW)
    ; tested function call
    ~> #mkCallShortcut V_CONF_BEFORE CALLER_ID ACCT_ID
                           #abiCallData("transferFrom", #address(FROM_ID), #address(TO_ID), #uint256(VALUE))  V_TRANSFER_OUT
    ~> saveEthereum V_CONF_AFTER
    ; retrieving postcondition data
    ~> #mkCallShortcut V_CONF_AFTER CALLER_ID ACCT_ID
                       #abiCallData("balanceOf", #address(FROM_ID))         V_BAL_FROM_AFTER
    ~> #mkCallShortcut V_CONF_AFTER CALLER_ID ACCT_ID
                       #abiCallData("balanceOf", #address(TO_ID))           V_BAL_TO_AFTER
    ~> #mkCallShortcut V_CONF_AFTER CALLER_ID ACCT_ID
                       #abiCallData("balanceOf", #address(ANY_OTHER_ADDR))  V_ANY_OTHER_BAL_AFTER
    ~> #mkCallShortcut V_CONF_AFTER CALLER_ID ACCT_ID
                       #abiCallData("allowance", #address(FROM_ID), #address(CALLER_ID))  V_ALLOWANCE_AFTER
    ~> #mkCallShortcut V_CONF_AFTER CALLER_ID ACCT_ID
                       #abiCallData("allowance", #address(ANY_NON_FROM), #address(ANY_NON_CALLER))  V_ANY_OTH_ALLOWANCE_AFTER
    ; postcondition
    ~> restoreEthereum V_CONF_AFTER
    ~> #assume (getVar V_BAL_FROM_AFTER)            ==S  #buf(32, BAL_FROM_AFTER)
    ~> #assume (getVar V_BAL_TO_AFTER)              ==S  #buf(32, BAL_TO_AFTER)
    ~> #assume (getVar V_ALLOWANCE_AFTER)           ==S  #buf(32, ALLOWANCE_AFTER)
    ; check that balances other than FROM and TO are unchanged, and all other allowances are unchanged
    ~> #assert (getVar V_ANY_OTHER_BAL_BEFORE)      ==S  (getVar V_ANY_OTHER_BAL_AFTER)
    ~> #assert (getVar V_ANY_OTH_ALLOWANCE_BEFORE)  ==S  (getVar V_ANY_OTH_ALLOWANCE_AFTER)
    => .
statusCode: _ => SC
output: _ => NEW_OUTPUT
log: OLD_LOG => NEW_LOG
storage: STORAGE1 => STORAGE2
+requires:
    andBool VALUE <=Int BAL_FROM
    andBool VALUE <=Int ALLOW
ensures:
    andBool (
        (
            // return true
            SC ==K EVMC_SUCCESS
            andBool NEW_OUTPUT ==K #buf(32, 1)
            andBool (
                (
                    NEW_LOG ==K OLD_LOG ListItem(#abiEventLog(ACCT_ID, "Transfer", #indexed(#address(FROM_ID)), #indexed(#address(TO_ID)), #uint256(VALUE)))
                ) orBool (
                    /* openzeppelin, transferFrom as transfer followed by approve */
                    NEW_LOG ==K OLD_LOG ListItem(#abiEventLog(ACCT_ID, "Transfer", #indexed(#address(FROM_ID)), #indexed(#address(TO_ID)), #uint256(VALUE)))
                                        ListItem(#abiEventLog(ACCT_ID, "Approval", #indexed(#address(FROM_ID)), #indexed(#address(CALLER_ID)), #uint256(ALLOW -Int VALUE)))
                )
            )
            {STORAGE_UPDATE}
        ) orBool (
            // revert
            SC =/=K EVMC_SUCCESS
            // pre-conditions
            {EXTRA_PRE_CONDITIONS}
        ) orBool (
            // return false
            SC ==K EVMC_SUCCESS andBool NEW_OUTPUT ==K #buf(32, 0)
            andBool OLD_LOG ==K NEW_LOG
            andBool STORAGE1 ==IMap STORAGE2
            // pre-conditions
            {EXTRA_PRE_CONDITIONS}
        )
    )
EXTRA_PRE_CONDITIONS:
    andBool (
        (
            CALLER_ID ==Int 0
        ) orBool (
            FROM_ID ==Int 0
        ) orBool (
            TO_ID ==Int 0
        ) orBool (
            VALUE ==Int 0  /* hkg, non-ERC20-compliant */
        ) orBool (
            BAL_TO +Int VALUE >=Int (2 ^Int 256)
        ) orBool (
            ACCT_ID ==Int TO_ID /* 04_chainlink, non-ERC20-compliant */
        )
    )

[transferFrom-success-regular]
+requires:
    // conditions
    andBool FROM_ID =/=Int TO_ID
STORAGE_UPDATE:
    andBool BAL_FROM_AFTER           ==Int BAL_FROM -Int VALUE
    andBool BAL_TO_AFTER             ==Int BAL_TO   +Int VALUE
    andBool (
        (
            ALLOWANCE_AFTER          ==Int ALLOW    -Int VALUE
        ) orBool (
            /* consensys, for infinite allowance */
                    ALLOW            ==Int maxUInt256
            andBool ALLOWANCE_AFTER  ==Int maxUInt256
        )
    )

[transferFrom-success-regular-overflow]
+requires:
    // conditions
    andBool BAL_TO +Int VALUE <Int pow256

[transferFrom-success-self]
+requires:
    // conditions
    andBool FROM_ID ==Int TO_ID
STORAGE_UPDATE:
    andBool BAL_FROM_AFTER           ==Int BAL_FROM
    andBool BAL_TO_AFTER             ==Int BAL_TO
    andBool (
        (
            ALLOWANCE_AFTER          ==Int ALLOW -Int VALUE
        ) orBool (
            /* consensys, for infinite allowance */
            ALLOW ==Int maxUInt256 andBool STORAGE1 ==IMap STORAGE2
        )
    )

[transferFrom-failure]
k:     saveEthereum V_CONF_BEFORE
    ~> #mkCallShortcut V_CONF_BEFORE CALLER_ID ACCT_ID
                       #abiCallData("balanceOf", #address(FROM_ID))         V_BAL_FROM_BEFORE
    ~> #mkCallShortcut V_CONF_BEFORE CALLER_ID ACCT_ID
                       #abiCallData("allowance", #address(FROM_ID), #address(CALLER_ID))  V_ALLOWANCE_BEFORE
    ~> #assume (getVar V_BAL_FROM_BEFORE)   ==S #buf(32, BAL_FROM)
    ~> #assume (getVar V_ALLOWANCE_BEFORE)  ==S #buf(32, ALLOW)
    ; tested function call
    ~> #mkCallShortcut V_CONF_BEFORE CALLER_ID ACCT_ID
                           #abiCallData("transferFrom", #address(FROM_ID), #address(TO_ID), #uint256(VALUE))  V_TRANSFER_OUT
    => .
statusCode: _ => SC
output: _ => NEW_OUTPUT
log: OLD_LOG => NEW_LOG
storage: STORAGE1 => STORAGE2
+requires:
    andBool ( VALUE >Int BAL_FROM
       orBool VALUE >Int ALLOW )
ensures:
    andBool (
        (
            // revert
            SC =/=K EVMC_SUCCESS
        ) orBool (
            // return false
            SC ==K EVMC_SUCCESS andBool NEW_OUTPUT ==K #buf(32, 0)
            andBool OLD_LOG ==K NEW_LOG
            andBool STORAGE1 ==IMap STORAGE2
        )
    )
