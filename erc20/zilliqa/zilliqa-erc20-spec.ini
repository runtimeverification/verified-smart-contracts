; ERC20-EVM Specification Template Parameters
; For more details, refer to README.md.

[totalSupply]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(TOTAL, 32)
callData: #abiCallData("totalSupply", .TypedArgs)
gas: {GASCAP} => _
log: _
refund: _
storage:
    #hashedLocation({COMPILER}, {_TOTALSUPPLY}, .IntList) |-> TOTAL
    _:Map
requires:
    andBool 0 <=Int TOTAL     andBool TOTAL     <Int (2 ^Int 256)

[balanceOf]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(BAL, 32)
callData: #abiCallData("balanceOf", #address(OWNER))
gas: {GASCAP} => _
log: _
refund: _
storage:
    #hashedLocation({COMPILER}, {_BALANCES}, OWNER) |-> BAL
    _:Map
requires:
    andBool 0 <=Int OWNER     andBool OWNER     <Int (2 ^Int 160)
    andBool 0 <=Int BAL       andBool BAL       <Int (2 ^Int 256)

[allowance]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(ALLOWANCE, 32)
callData: #abiCallData("allowance", #address(OWNER), #address(SPENDER))
gas: {GASCAP} => _
log: _
refund: _
storage:
    #hashedLocation({COMPILER}, {_ALLOWANCES}, OWNER SPENDER) |-> ALLOWANCE
    _:Map
requires:
    andBool 0 <=Int OWNER     andBool OWNER     <Int (2 ^Int 160)
    andBool 0 <=Int SPENDER   andBool SPENDER   <Int (2 ^Int 160)
    andBool 0 <=Int ALLOWANCE andBool ALLOWANCE <Int (2 ^Int 256)

[approve]
k: #execute => #halt
callData: #abiCallData("approve", #address(SPENDER), #uint256(VALUE))
gas: {GASCAP} => _
refund: _ => _
storage:
    (#hashedLocation({COMPILER}, 3, .IntList) |->
      #stWord(OWNER PAUSED_PUBLIC PAUSED_OWNER_ADMIN, 20 1 1))
requires:
    andBool #rangeAddress(SPENDER)
    andBool #rangeUInt(256, VALUE)
    andBool #range(0 <= PAUSED_PUBLIC <= 1)
    andBool #range(0 <= PAUSED_OWNER_ADMIN <= 1)
    andBool #rangeAddress(OWNER)
    // invariant
    andBool OWNER =/=Int 0

[approve-success]
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(1, 32)
log: _:List ( .List => ListItem(#abiEventLog(ACCT_ID, "Approval", #indexed(#address(CALLER_ID)), #indexed(#address(SPENDER)), #uint256(VALUE))) )
+storage:
    #hashedLocation({COMPILER}, {_ALLOWANCES}, CALLER_ID SPENDER) |-> (_:Int => VALUE)

[approve-success-1]
+storage:
    _:Map
+requires:
    andBool PAUSED_PUBLIC ==Int 0


[approve-success-2]
+storage:
    (#hashedLocation({COMPILER}, {_ADMIN}, .IntList) |-> ADMIN)
    _:Map
+requires:
    andBool #rangeAddress(ADMIN)

    andBool PAUSED_PUBLIC ==Int 1
    andBool PAUSED_OWNER_ADMIN ==Int 0
    andBool (CALLER_ID ==Int ADMIN orBool CALLER_ID ==Int OWNER )

[transfer]
callData: #abiCallData("transfer", #address(TO_ID), #uint256(VALUE))
gas: {GASCAP} => _
refund: _ => _
storage:
    (#hashedLocation({COMPILER}, 3, .IntList) |->
      #stWord(OWNER PAUSED_PUBLIC PAUSED_OWNER_ADMIN, 20 1 1))
requires:
    andBool #rangeAddress(TO_ID)
    andBool #rangeUInt(256, VALUE)
    andBool #range(0 <= PAUSED_PUBLIC <= 1)
    andBool #range(0 <= PAUSED_OWNER_ADMIN <= 1)
    andBool #rangeAddress(OWNER)
    andBool #rangeUInt(256, BAL_FROM)
    andBool #rangeUInt(256, BAL_TO)
    // invariant
    andBool OWNER =/=Int 0

[transfer-success]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(1, 32)
log: _:List ( .List => ListItem(#abiEventLog(ACCT_ID, "Transfer", #indexed(#address(CALLER_ID)), #indexed(#address(TO_ID)), #uint256(VALUE))) )
+storage:
    (#hashedLocation({COMPILER}, {_ADMIN}, .IntList) |-> ADMIN)
+requires:
    andBool #rangeAddress(ADMIN)

 // whenNotPaused
    andBool (PAUSED_PUBLIC ==Int 0
    orBool  (PAUSED_PUBLIC ==Int 1
             andBool PAUSED_OWNER_ADMIN ==Int 0
             andBool (CALLER_ID ==Int ADMIN orBool CALLER_ID ==Int OWNER)))
 // validDestination
    andBool TO_ID =/=Int 0
    andBool TO_ID =/=Int ACCT_ID

[transfer-success-1]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> (BAL_FROM => BAL_FROM -Int VALUE)
    #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)     |-> (BAL_TO   => BAL_TO   +Int VALUE)
    _:Map
+requires:
    andBool CALLER_ID =/=Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool BAL_TO +Int VALUE <=Int maxUInt256

[transfer-success-2]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> BAL_FROM
    _:Map
+requires:
    andBool CALLER_ID ==Int TO_ID
    andBool VALUE <=Int BAL_FROM

[transfer-failure]
k: #execute => #halt
output: _ => _
log: _

[transfer-failure-1]
+storage:
    #hashedLocation({COMPILER}, {_ADMIN}, .IntList) |-> ADMIN
+requires:
    andBool #rangeAddress(ADMIN)
 // whenNotPaused
    andBool (PAUSED_PUBLIC ==Int 0
    orBool  (PAUSED_PUBLIC ==Int 1
             andBool PAUSED_OWNER_ADMIN ==Int 0
             andBool (CALLER_ID ==Int ADMIN orBool CALLER_ID ==Int OWNER)))
 // validDestination
    andBool TO_ID =/=Int 0
    andBool TO_ID =/=Int ACCT_ID

[transfer-failure-1-a]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> BAL_FROM
    #hashedLocation({COMPILER}, {_BALANCES}, TO_ID) |->  BAL_TO
    _:Map
statusCode: _ => EVMC_REVERT
+requires:
    andBool CALLER_ID =/=Int TO_ID
    andBool ( VALUE >Int BAL_FROM
     orBool   TO_ID ==Int 0 )

[transfer-failure-1-b]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> (BAL_FROM => _)
    #hashedLocation({COMPILER}, {_BALANCES}, TO_ID) |->  BAL_TO
    _:Map
statusCode: _ => EVMC_INVALID_INSTRUCTION
+requires:
    andBool CALLER_ID =/=Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool TO_ID =/=Int 0
    andBool BAL_TO +Int VALUE >Int maxUInt256

[transfer-failure-1-c]
statusCode: _ => EVMC_REVERT
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> BAL_FROM
    _:Map
+requires:
    andBool CALLER_ID ==Int TO_ID
    andBool VALUE >Int BAL_FROM
    //orBool   TO_ID ==Int 0

;[Transfer-failure-2]
;whenNotPaused, validDestination

[transferFrom]
callData: #abiCallData("transferFrom", #address(FROM_ID), #address(TO_ID), #uint256(VALUE))
gas: {GASCAP} => _
refund: _ => _
storage:
    (#hashedLocation({COMPILER}, 3, .IntList) |->
      #stWord(OWNER PAUSED_PUBLIC PAUSED_OWNER_ADMIN, 20 1 1))
requires:
    andBool #rangeAddress(FROM_ID)
    andBool #rangeAddress(TO_ID)
    andBool #rangeUInt(256, VALUE)
    andBool #range(0 <= PAUSED_PUBLIC <= 1)
    andBool #range(0 <= PAUSED_OWNER_ADMIN <= 1)
    andBool #rangeAddress(OWNER)
    andBool #rangeUInt(256, BAL_FROM)
    andBool #rangeUInt(256, BAL_TO)
    andBool #rangeUInt(256, ALLOW)
    // invariant
    andBool OWNER =/=Int 0

[transferFrom-success]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(1, 32)
log: _:List ( .List => ListItem(#abiEventLog(ACCT_ID, "Transfer", #indexed(#address(FROM_ID)), #indexed(#address(TO_ID)), #uint256(VALUE))) )
+storage:
    (#hashedLocation({COMPILER}, {_ADMIN}, .IntList) |-> ADMIN)
+requires:
    andBool #rangeAddress(ADMIN)

 // whenNotPaused
    andBool (PAUSED_PUBLIC ==Int 0
    orBool  (PAUSED_PUBLIC ==Int 1
             andBool PAUSED_OWNER_ADMIN ==Int 0
             andBool (CALLER_ID ==Int ADMIN orBool CALLER_ID ==Int OWNER)))
 // validDestination
    andBool TO_ID =/=Int 0
    andBool TO_ID =/=Int ACCT_ID

[transferFrom-success-1]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> (BAL_FROM => BAL_FROM -Int VALUE)
    #hashedLocation({COMPILER}, {_BALANCES},   TO_ID)             |-> (BAL_TO   => BAL_TO   +Int VALUE)
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> (ALLOW    => ALLOW    -Int VALUE)
    _:Map
+requires:
    andBool FROM_ID =/=Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool BAL_TO +Int VALUE <=Int maxUInt256
    andBool VALUE <=Int ALLOW
    andBool TO_ID =/=Int 0

[transferFrom-success-2]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> (ALLOW => ALLOW -Int VALUE)
    _:Map
+requires:
    andBool FROM_ID ==Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool VALUE <=Int ALLOW
    andBool TO_ID =/=Int 0

[transferFrom-failure]
k: #execute => #halt
output: _ => _
log: _

[transferFrom-failure-1]
+storage:
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> ALLOW
    #hashedLocation({COMPILER}, {_ADMIN}, .IntList) |-> ADMIN
+requires:
    andBool #rangeAddress(ADMIN)
 // whenNotPaused
    andBool (PAUSED_PUBLIC ==Int 0
    orBool  (PAUSED_PUBLIC ==Int 1
             andBool PAUSED_OWNER_ADMIN ==Int 0
             andBool (CALLER_ID ==Int ADMIN orBool CALLER_ID ==Int OWNER)))
 // validDestination
    andBool TO_ID =/=Int 0
    andBool TO_ID =/=Int ACCT_ID

[transferFrom-failure-1-a]
statusCode: _ => EVMC_REVERT
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID) |-> (BAL_FROM => _)
    #hashedLocation({COMPILER}, {_BALANCES},   TO_ID)   |-> (BAL_TO   => _)
    _:Map
+requires:
    andBool FROM_ID =/=Int TO_ID
    andBool ( VALUE >Int BAL_FROM
     orBool   VALUE >Int ALLOW
     orBool   TO_ID ==Int 0 )

[transferFrom-failure-1-b]
statusCode: _ => EVMC_INVALID_INSTRUCTION
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID) |-> (BAL_FROM => _)
    #hashedLocation({COMPILER}, {_BALANCES},   TO_ID)   |-> (BAL_TO   => _)
    _:Map
+requires:
    andBool FROM_ID =/=Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool VALUE <=Int ALLOW
    andBool TO_ID =/=Int 0
    andBool BAL_TO +Int VALUE >Int maxUInt256

[transferFrom-failure-1-c]
statusCode: _ => EVMC_REVERT
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID) |-> BAL_FROM
    _:Map
+requires:
    andBool FROM_ID ==Int TO_ID
    andBool ( VALUE >Int BAL_FROM
     orBool   VALUE >Int ALLOW
     orBool   TO_ID ==Int 0 )

;[transferFrom-failure-2]
;whenNotPaused, validDestination

[pause]
k: #execute => #halt
callData: #abiCallData("pause", #bool(NEW_PAUSED_PUBLIC), #bool(NEW_PAUSED_OWNER_ADMIN))
gas: {GASCAP} => _
statusCode: _ => EVMC_SUCCESS
output: _ => _
refund: _ => _
log: _ => _
storage:
    (#hashedLocation({COMPILER}, 3, .IntList) |-> (
      #stWord(OWNER PAUSED_PUBLIC PAUSED_OWNER_ADMIN, 20 1 1)
      =>
      #stWord(OWNER NEW_PAUSED_PUBLIC NEW_PAUSED_OWNER_ADMIN, 20 1 1)))
requires:
    andBool #rangeAddress(OWNER)
    andBool #rangeBool(PAUSED_PUBLIC)
    andBool #rangeBool(PAUSED_OWNER_ADMIN)
    andBool #rangeBool(NEW_PAUSED_PUBLIC)
    andBool #rangeBool(NEW_PAUSED_OWNER_ADMIN)
    // invariant
    andBool OWNER =/=Int 0

    andBool CALLER_ID ==Int OWNER
    //andBool (NEW_PAUSED_PUBLIC ==Int 1 orBool NEW_PAUSED_OWNER_ADMIN ==Int 0)

; need a clever method to deal with bools
[pause-1]
+requires:
    andBool NEW_PAUSED_PUBLIC ==Int 1

[pause-2]
+requires:
    andBool NEW_PAUSED_PUBLIC ==Int 0
    andBool NEW_PAUSED_OWNER_ADMIN ==Int 0


[transferOwnership]
k: #execute => #halt
callData: #abiCallData("transferOwnership", #address(NEW_OWNER))
gas: {GASCAP} => _
statusCode: _ => EVMC_SUCCESS
output: _ => _
refund: _ => _
log: _ => _
storage:
    (#hashedLocation({COMPILER}, 3, .IntList) |-> (
      #stWord(OWNER PAUSED_PUBLIC PAUSED_OWNER_ADMIN, 20 1 1)
      =>
      #stWord(NEW_OWNER PAUSED_PUBLIC PAUSED_OWNER_ADMIN, 20 1 1)))

requires:
    andBool #rangeAddress(NEW_OWNER)
    andBool #rangeAddress(OWNER)
    andBool #range(0 <= PAUSED_PUBLIC <= 1)
    andBool #range(0 <= PAUSED_OWNER_ADMIN <= 1)
    // invariant
    andBool OWNER =/=Int 0

    andBool NEW_OWNER =/=Int 0
    andBool CALLER_ID ==Int OWNER

[pgm]
compiler: "Solidity"
gasCap: 100000
_totalsupply: 0
_balances: 1
_allowances: 2
_pausedPublic: 3
_pausedPublicOffset: 20
_pausedOwnerAdmin: 3
_pausedOwnerAdminOffset: 21
_admin: 4
_owner: 3
code:"0x60606040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610122578063095ea7b3146101b057806318160ddd1461020a57806323b872dd1461023357806324bb7c26146102ac578063313ce567146102d957806342966c681461030857806364779ad714610343578063661884631461037057806370a08231146103ca57806379cc6790146104175780638da5cb5b146104715780638f283970146104c657806395d89b41146104ff578063a9059cbb1461058d578063d73dd623146105e7578063db0e16f114610641578063dd62ed3e14610683578063ddeb5094146106ef578063f2fde38b1461071f578063f851a44014610758575b600080fd5b341561012d57600080fd5b6101356107ad565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017557808201518184015260208101905061015a565b50505050905090810190601f1680156101a25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101bb57600080fd5b6101f0600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506107e6565b604051808215151515815260200191505060405180910390f35b341561021557600080fd5b61021d6108e4565b6040518082815260200191505060405180910390f35b341561023e57600080fd5b610292600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108ea565b604051808215151515815260200191505060405180910390f35b34156102b757600080fd5b6102bf610979565b604051808215151515815260200191505060405180910390f35b34156102e457600080fd5b6102ec61098c565b604051808260ff1660ff16815260200191505060405180910390f35b341561031357600080fd5b6103296004808035906020019091905050610991565b604051808215151515815260200191505060405180910390f35b341561034e57600080fd5b610356610b00565b604051808215151515815260200191505060405180910390f35b341561037b57600080fd5b6103b0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b13565b604051808215151515815260200191505060405180910390f35b34156103d557600080fd5b610401600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c11565b6040518082815260200191505060405180910390f35b341561042257600080fd5b610457600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c5a565b604051808215151515815260200191505060405180910390f35b341561047c57600080fd5b610484610c80565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104d157600080fd5b6104fd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ca6565b005b341561050a57600080fd5b610512610dc2565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610552578082015181840152602081019050610537565b50505050905090810190601f16801561057f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561059857600080fd5b6105cd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610dfb565b604051808215151515815260200191505060405180910390f35b34156105f257600080fd5b610627600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e88565b604051808215151515815260200191505060405180910390f35b341561064c57600080fd5b610681600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f86565b005b341561068e57600080fd5b6106d9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110cf565b6040518082815260200191505060405180910390f35b34156106fa57600080fd5b61071d600480803515159060200190919080351515906020019091905050611156565b005b341561072a57600080fd5b610756600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611284565b005b341561076357600080fd5b61076b6113dc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6040805190810160405280600781526020017f5a696c6c6971610000000000000000000000000000000000000000000000000081525081565b6000600360149054906101000a900460ff16156108d257600360159054906101000a900460ff1615156108cc57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806108bc5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156108c757600080fd5b6108d1565b600080fd5b5b6108dc8383611402565b905092915050565b60005481565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561092957600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561096457600080fd5b61096f8585856114f4565b9150509392505050565b600360149054906101000a900460ff1681565b600c81565b60006109e582600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115f490919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a3d826000546115f490919063ffffffff16565b6000819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050919050565b600360159054906101000a900460ff1681565b6000600360149054906101000a900460ff1615610bff57600360159054906101000a900460ff161515610bf957600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610be95750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610bf457600080fd5b610bfe565b600080fd5b5b610c09838361160d565b905092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610c678333846108ea565b1515610c6f57fe5b610c7882610991565b905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d0257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec660405160405180910390a380600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6040805190810160405280600381526020017f5a494c000000000000000000000000000000000000000000000000000000000081525081565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e3a57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e7557600080fd5b610e7f848461189e565b91505092915050565b6000600360149054906101000a900460ff1615610f7457600360159054906101000a900460ff161515610f6e57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610f5e5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610f6957600080fd5b610f73565b600080fd5b5b610f7e838361199c565b905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fe257600080fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156110af57600080fd5b6102c65a03f115156110c057600080fd5b50505060405180519050505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111b257600080fd5b600015158215151480156111ca575060011515811515145b1515156111d657600080fd5b81600360146101000a81548160ff02191690831515021790555080600360156101000a81548160ff0219169083151502179055507fa14d191ca4f53bfcf003c65d429362010a2d3d68bc0c50cce4bdc0fccf661fb082604051808215151515815260200191505060405180910390a17fc77636fc4a62a1fa193ef538c0b7993a1313a0d9c0a9173058cebcd3239ef7b581604051808215151515815260200191505060405180910390a15050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112e057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561131c57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600360149054906101000a900460ff16156115e057600360159054906101000a900460ff1615156115da57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806115ca5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156115d557600080fd5b6115df565b600080fd5b5b6115eb848484611b98565b90509392505050565b600082821115151561160257fe5b818303905092915050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083111561171e576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506117b2565b61173183826115f490919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600360149054906101000a900460ff161561198a57600360159054906101000a900460ff16151561198457600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806119745750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561197f57600080fd5b611989565b600080fd5b5b6119948383611f57565b905092915050565b6000611a2d82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461217b90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611bd557600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611c2357600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611cae57600080fd5b611d0082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115f490919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d9582600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461217b90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e6782600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115f490919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611f9457600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611fe257600080fd5b61203482600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115f490919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120c982600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461217b90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600080828401905083811015151561218f57fe5b80915050929150505600a165627a7a72305820c1f24b373dafcef4df00bf14bd9631b401ed35d1b8020cc70376b368043c2db40029"
