; ERC20-EVM Specification Template Parameters
; For more details, refer to README.md

[totalSupply]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(TOTAL, 32)
callData: #abiCallData("totalSupply", .TypedArgs)
gas: {GASCAP} => _
log: _
refund: _
storage:
    #hashedLocation({COMPILER}, {_TOTALSUPPLY}, .IntList) |-> TOTAL
    _:Map
requires:
    andBool 0 <=Int TOTAL     andBool TOTAL     <Int (2 ^Int 256)

[balanceOf]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(BAL, 32)
callData: #abiCallData("balanceOf", #address(OWNER))
gas: {GASCAP} => _
log: _
refund: _
storage:
    #hashedLocation({COMPILER}, {_BALANCES}, OWNER) |-> BAL
    _:Map
requires:
    andBool 0 <=Int OWNER     andBool OWNER     <Int (2 ^Int 160)
    andBool 0 <=Int BAL       andBool BAL       <Int (2 ^Int 256)

[allowance]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(ALLOWANCE, 32)
callData: #abiCallData("allowance", #address(OWNER), #address(SPENDER))
gas: {GASCAP} => _
log: _
refund: _
storage:
    #hashedLocation({COMPILER}, {_ALLOWANCES}, OWNER SPENDER) |-> ALLOWANCE
    _:Map
requires:
    andBool 0 <=Int OWNER     andBool OWNER     <Int (2 ^Int 160)
    andBool 0 <=Int SPENDER   andBool SPENDER   <Int (2 ^Int 160)
    andBool 0 <=Int ALLOWANCE andBool ALLOWANCE <Int (2 ^Int 256)

[approve]
callData: #abiCallData("approve", #address(SPENDER), #uint256(VALUE))
gas: {GASCAP} => _
log:  _ => _
refund: _ => _
storage:
    #hashedLocation({COMPILER}, {_STOPPED}, .IntList) |-> STOPPED
    #hashedLocation({COMPILER}, {_LOCKADDRESS}, CALLER_ID ) |-> LOCK_ADDR
    #hashedLocation({COMPILER}, {_UNLOCKADDRESS}, CALLER_ID ) |-> UNLOCK_ADDR
    _:Map
requires:
    andBool 0 <=Int SPENDER   andBool SPENDER   <Int (2 ^Int 160)
    andBool 0 <=Int VALUE     andBool VALUE     <Int (2 ^Int 256)
    andBool 0 <=Int STOPPED   andBool STOPPED   <Int (2 ^Int 256)
    andBool 0 <=Int LOCK_ADDR   andBool LOCK_ADDR   <Int (2 ^Int 256)
    andBool 0 <=Int UNLOCK_ADDR   andBool UNLOCK_ADDR   <Int (2 ^Int 256)


[approve-success]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(1, 32)
+storage:
    #hashedLocation({COMPILER}, {_ALLOWANCES}, CALLER_ID SPENDER) |-> (ALLOWANCE => VALUE)
+requires:
    andBool STOPPED ==Int 0
    andBool UNLOCK_ADDR ==Int 1
    andBool LOCK_ADDR ==Int 0

[approve-failure]
k: #execute => #halt
statusCode: _ => EVMC_INVALID_INSTRUCTION
output: _ => _

[approve-failure-a]
+requires:
    andBool STOPPED ==Int 1 <<Int ({_OFFS} *Int 8)

[approve-failure-b]
+requires:
    andBool CALLER_ID ==Int 0

[approve-failure-c]
statusCode: _ => EVMC_REVERT
+storage:
    #hashedLocation({COMPILER}, {_ALLOWANCES}, CALLER_ID SPENDER) |-> ALLOWANCE 
+requires:
    andBool STOPPED ==Int 0 
    andBool CALLER_ID =/=Int 0
    andBool (   VALUE =/=Int 0
                andBool ALLOWANCE =/=Int 0 )

[transfer]
callData: #abiCallData("transfer", #address(TO_ID), #uint256(VALUE))
log: _ => _
gas: {GASCAP} => _
refund: _ => _
storage:
    #hashedLocation({COMPILER}, {_STOPPED}, .IntList) |-> STOPPED
requires:
    andBool 0 <=Int TO_ID     andBool TO_ID     <Int (2 ^Int 160)
    andBool 0 <=Int VALUE     andBool VALUE     <Int (2 ^Int 256)
    andBool 0 <=Int BAL_FROM  andBool BAL_FROM  <Int (2 ^Int 256)
    andBool 0 <=Int BAL_TO    andBool BAL_TO    <Int (2 ^Int 256)
    andBool 0 <=Int STOPPED   andBool STOPPED   <Int (2 ^Int 256)

[transfer-success]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(1, 32)

[transfer-success-1]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> (BAL_FROM => BAL_FROM -Int VALUE)
    #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)     |-> (BAL_TO   => BAL_TO   +Int VALUE)
    _:Map
+requires:
    andBool CALLER_ID =/=Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool BAL_TO +Int VALUE <Int (2 ^Int 256)
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0

[transfer-success-2]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> BAL_FROM
    _:Map
+requires:
    andBool CALLER_ID ==Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0
    andBool BAL_FROM +Int VALUE ==Int BAL_FROM

[transfer-failure]
k: #execute => #halt
statusCode: _ => EVMC_INVALID_INSTRUCTION
output: _ => _

[transfer-failure-1]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> (BAL_FROM => _)
    #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)     |->  BAL_TO
    _:Map
+requires:
    andBool CALLER_ID =/=Int TO_ID


[transfer-failure-1-a]
statusCode: _ => EVMC_REVERT
+requires:
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0
    andBool VALUE >Int BAL_FROM


[transfer-failure-1-b]
statusCode: _ => EVMC_REVERT
+requires:
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0
    andBool BAL_TO +Int VALUE >=Int (2 ^Int 256)

[transfer-failure-1-c]
+requires:
    andBool STOPPED ==Int 1 <<Int ({_OFFS} *Int 8)

[transfer-failure-1-d]
+requires:
    andBool CALLER_ID ==Int 0

[transfer-failure-2]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> BAL_FROM
    _:Map
+requires:
    andBool CALLER_ID ==Int TO_ID

[transfer-failure-2-a]
statusCode: _ => EVMC_REVERT
+requires:
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0
    andBool VALUE >Int BAL_FROM

[transfer-failure-2-b]
+requires:
    andBool STOPPED ==Int 1 <<Int ({_OFFS} *Int 8)

[transfer-failure-2-c]
+requires:
    andBool CALLER_ID ==Int 0


[transferFrom]
callData: #abiCallData("transferFrom", #address(FROM_ID), #address(TO_ID), #uint256(VALUE))
gas: {GASCAP} => _
refund: _ => _
storage:
    #hashedLocation({COMPILER}, {_STOPPED}, .IntList) |-> STOPPED
requires:
    andBool 0 <=Int FROM_ID   andBool FROM_ID   <Int (2 ^Int 160)
    andBool 0 <=Int TO_ID     andBool TO_ID     <Int (2 ^Int 160)
    andBool 0 <=Int VALUE     andBool VALUE     <Int (2 ^Int 256)
    andBool 0 <=Int BAL_FROM  andBool BAL_FROM  <Int (2 ^Int 256)
    andBool 0 <=Int BAL_TO    andBool BAL_TO    <Int (2 ^Int 256)
    andBool 0 <=Int ALLOW     andBool ALLOW     <Int (2 ^Int 256)
    andBool 0 <=Int STOPPED   andBool STOPPED   <Int (2 ^Int 256)

[transferFrom-success]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(1, 32)
log: _ => _

[transferFrom-success-1]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> (BAL_FROM => BAL_FROM -Int VALUE)
    #hashedLocation({COMPILER}, {_BALANCES},   TO_ID)             |-> (BAL_TO   => BAL_TO   +Int VALUE)
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> (ALLOW    => ALLOW    -Int VALUE)
    _:Map
+requires:
    andBool FROM_ID =/=Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool BAL_TO +Int VALUE <Int (2 ^Int 256)
    andBool VALUE <=Int ALLOW
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0

[transferFrom-success-2]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> (ALLOW => ALLOW -Int VALUE)
    _:Map
+requires:
    andBool FROM_ID ==Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool VALUE <=Int ALLOW
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0
    andBool BAL_FROM +Int VALUE ==Int BAL_FROM

[transferFrom-failure]
k: #execute => #halt
statusCode: _ => EVMC_INVALID_INSTRUCTION
output: _ => _
log: _ => _

[transferFrom-failure-1]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> (BAL_FROM => _)  // BAL_FROM
    #hashedLocation({COMPILER}, {_BALANCES},   TO_ID)             |-> (BAL_TO   => _)  // BAL_TO
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> (ALLOW => _)
    _:Map
+requires:
    andBool FROM_ID =/=Int TO_ID

[transferFrom-failure-1-a]
statusCode: _ => EVMC_REVERT
+requires:
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0
    andBool VALUE >Int BAL_FROM


[transferFrom-failure-1-b]
statusCode: _ => EVMC_REVERT
+requires:
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0
    andBool BAL_TO +Int VALUE >=Int (2 ^Int 256)

[transferFrom-failure-1-c]
statusCode: _ => EVMC_REVERT
+requires:
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0
    andBool VALUE >Int ALLOW

[transferFrom-failure-1-d]
+requires:
    andBool STOPPED ==Int 1 <<Int ({_OFFS} *Int 8)

[transferFrom-failure-1-e]
+requires:
    andBool CALLER_ID ==Int 0

[transferFrom-failure-2]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> ALLOW
    _:Map
+requires:
    andBool FROM_ID ==Int TO_ID

[transferFrom-failure-2-a]
statusCode: _ => EVMC_REVERT
+requires:
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0
    andBool VALUE >Int BAL_FROM

[transferFrom-failure-2-b]
statusCode: _ => EVMC_REVERT
+requires:
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0
    andBool VALUE >Int ALLOW

[transferFrom-failure-2-c]
+requires:
    andBool STOPPED ==Int 1 <<Int ({_OFFS} *Int 8)

[transferFrom-failure-2-d]
+requires:
    andBool CALLER_ID ==Int 0

[pgm]
compiler: "Solidity"
gasCap: 100000
_totalsupply: 6
_balances: 4
_allowances: 5
_stopped: 1
_offs: 1
_lockaddress: 3
_unlockaddress: 2
code:"0x606060405236156100fa576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063095ea7b3146100ff57806318160ddd1461015957806323b872dd146101825780633a764462146101fb57806360805e5a146102105780636ad5b3ea146102545780636c4eca27146102a95780636d1b229d146102d657806370a08231146102f95780638da5cb5b14610346578063a9059cbb1461039b578063cb7bba39146103f5578063d8270dce14610446578063dd62ed3e1461046f578063e2a9ca4c146104db578063ec4a79cf146104f0578063f226003114610541578063f83d08ba14610585575b600080fd5b341561010a57600080fd5b61013f600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105b2565b604051808215151515815260200191505060405180910390f35b341561016457600080fd5b61016c61076c565b6040518082815260200191505060405180910390f35b341561018d57600080fd5b6101e1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610777565b604051808215151515815260200191505060405180910390f35b341561020657600080fd5b61020e610bc3565b005b341561021b57600080fd5b610252600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080351515906020019091905050610c6a565b005b341561025f57600080fd5b610267610d92565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102b457600080fd5b6102bc610db8565b604051808215151515815260200191505060405180910390f35b34156102e157600080fd5b6102f76004808035906020019091905050610dca565b005b341561030457600080fd5b610330600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610fa6565b6040518082815260200191505060405180910390f35b341561035157600080fd5b610359610ff0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103a657600080fd5b6103db600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611016565b604051808215151515815260200191505060405180910390f35b341561040057600080fd5b61042c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506112c7565b604051808215151515815260200191505060405180910390f35b341561045157600080fd5b6104596112e7565b6040518082815260200191505060405180910390f35b341561047a57600080fd5b6104c5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506112ed565b6040518082815260200191505060405180910390f35b34156104e657600080fd5b6104ee611375565b005b34156104fb57600080fd5b610527600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061141c565b604051808215151515815260200191505060405180910390f35b341561054c57600080fd5b610583600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035151590602001909190505061143c565b005b341561059057600080fd5b6105986115c1565b604051808215151515815260200191505060405180910390f35b60006001809054906101000a900460ff16151561062257600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561062157600080fd5b5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561067957600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b5b5b92915050565b600060065490505b90565b60006001809054906101000a900460ff1615156107e757600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156107e657600080fd5b5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561083e57600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561088c57600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561091757600080fd5b6109a682600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115d490919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a7882600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115d490919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b0d82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115ee90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b5b5b9392505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610c2057600080fd5b60018060016101000a81548160ff0219169083151502179055507feb2cf4fc9168a2d848de8c48d73f2b6e32ef3b25eb1e730b673209b002bca01d60405160405180910390a15b5b565b3373ffffffffffffffffffffffffffffffffffffffff16600160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610cc657600080fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f5c42a6eb70f030b267ab6ddbc362cfe8dbe7cc3b42c590692fa695c58aeaca2b8282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15b5b5050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001809054906101000a900460ff1681565b6001809054906101000a900460ff161515610e3857600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610e3757600080fd5b5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610e8657600080fd5b610ed881600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115d490919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f30816006546115d490919063ffffffff16565b6006819055507f1af5163f80e79b5e554f61e1d052084d3a3fe1166e42a265798c4e2ddce8ffa23382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b50565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b600160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001809054906101000a900460ff16151561108657600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561108557600080fd5b5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156110dd57600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561112b57600080fd5b61117d82600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115d490919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061121282600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115ee90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b5b5b92915050565b60036020528060005260406000206000915054906101000a900460ff1681565b60005481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515156113d257600080fd5b60006001806101000a81548160ff0219169083151502179055507feb2cf4fc9168a2d848de8c48d73f2b6e32ef3b25eb1e730b673209b002bca01d60405160405180910390a15b5b565b60026020528060005260406000206000915054906101000a900460ff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561149857600080fd5b8173ffffffffffffffffffffffffffffffffffffffff16600160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156114f557600080fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fcaf46096bdd957e9271a7e46a00ff61870b80644805049e7ea814162a2b606bc8282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15b5b5050565b600160009054906101000a900460ff1681565b60006115e28383111561160d565b81830390505b92915050565b60008082840190506116028482101561160d565b8091505b5092915050565b80151561161957600080fd5b5b505600a165627a7a723058206166f4bd6306457c9889d259b73b19683729f8462a8ab5263e3551c97722a0810029"