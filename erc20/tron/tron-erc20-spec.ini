; ERC20-EVM Specification Template Parameters
; For more details, refer to README.md

[totalSupply]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(TOTAL, 32)
callData: #abiCallData("totalSupply", .TypedArgs)
gas: {GASCAP} => _
log: _
refund: _
storage:
    #hashedLocation({COMPILER}, {_totalsupply}, .IntList) |-> TOTAL
    _:Map
requires:
    andBool 0 <=Int TOTAL     andBool TOTAL     <Int (2 ^Int 256)

[balanceOf]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(BAL, 32)
callData: #abiCallData("balanceOf", #address(OWNER))
gas: {GASCAP} => _
log: _
refund: _
storage:
    #hashedLocation({COMPILER}, {_BALANCES}, OWNER) |-> BAL
    _:Map
requires:
    andBool 0 <=Int OWNER     andBool OWNER     <Int (2 ^Int 160)
    andBool 0 <=Int BAL       andBool BAL       <Int (2 ^Int 256)

[allowance]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(ALLOWANCE, 32)
callData: #abiCallData("allowance", #address(OWNER), #address(SPENDER))
gas: {GASCAP} => _
log: _
refund: _
storage:
    #hashedLocation({COMPILER}, {_ALLOWANCES}, OWNER SPENDER) |-> ALLOWANCE
    _:Map
requires:
    andBool 0 <=Int OWNER     andBool OWNER     <Int (2 ^Int 160)
    andBool 0 <=Int SPENDER   andBool SPENDER   <Int (2 ^Int 160)
    andBool 0 <=Int ALLOWANCE andBool ALLOWANCE <Int (2 ^Int 256)

[approve]
callData: #abiCallData("approve", #address(SPENDER), #uint256(VALUE))
gas: {GASCAP} => _
log:  _ => _
refund: _ => _
storage:
    #hashedLocation({COMPILER}, {_STOPPED}, .IntList) |-> STOPPED
    _:Map
requires:
    andBool 0 <=Int SPENDER   andBool SPENDER   <Int (2 ^Int 160)
    andBool 0 <=Int VALUE     andBool VALUE     <Int (2 ^Int 256)
    andBool 0 <=Int STOPPED   andBool STOPPED   <Int (2 ^Int 256)


[approve-success]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(1, 32)
+storage:
    #hashedLocation({COMPILER}, {_ALLOWANCES}, CALLER_ID SPENDER) |-> (ALLOWANCE => VALUE)
+requires:
    andBool STOPPED ==Int 0 
    andBool CALLER_ID =/=Int 0
    andBool (   VALUE ==Int 0
                orBool ALLOWANCE ==Int 0    )

[approve-failure]
k: #execute => #halt
statusCode: _ => EVMC_INVALID_INSTRUCTION
output: _ => _

[approve-failure-a]
+requires:
    andBool STOPPED ==Int 1 <<Int ({_OFFS} *Int 8)

[approve-failure-b]
+requires:
    andBool CALLER_ID ==Int 0

[approve-failure-c]
statusCode: _ => EVMC_REVERT
+storage:
    #hashedLocation({COMPILER}, {_ALLOWANCES}, CALLER_ID SPENDER) |-> ALLOWANCE 
+requires:
    andBool STOPPED ==Int 0 
    andBool CALLER_ID =/=Int 0
    andBool (   VALUE =/=Int 0
                andBool ALLOWANCE =/=Int 0 )

[transfer]
callData: #abiCallData("transfer", #address(TO_ID), #uint256(VALUE))
log: _ => _
gas: {GASCAP} => _
refund: _ => _
storage:
    #hashedLocation({COMPILER}, {_STOPPED}, .IntList) |-> STOPPED
requires:
    andBool 0 <=Int TO_ID     andBool TO_ID     <Int (2 ^Int 160)
    andBool 0 <=Int VALUE     andBool VALUE     <Int (2 ^Int 256)
    andBool 0 <=Int BAL_FROM  andBool BAL_FROM  <Int (2 ^Int 256)
    andBool 0 <=Int BAL_TO    andBool BAL_TO    <Int (2 ^Int 256)
    andBool 0 <=Int STOPPED   andBool STOPPED   <Int (2 ^Int 256)

[transfer-success]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(1, 32)

[transfer-success-1]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> (BAL_FROM => BAL_FROM -Int VALUE)
    #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)     |-> (BAL_TO   => BAL_TO   +Int VALUE)
    _:Map
+requires:
    andBool CALLER_ID =/=Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool BAL_TO +Int VALUE <Int (2 ^Int 256)
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0

[transfer-success-2]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> BAL_FROM
    _:Map
+requires:
    andBool CALLER_ID ==Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0
    andBool BAL_FROM +Int VALUE ==Int BAL_FROM

[transfer-failure]
k: #execute => #halt
statusCode: _ => EVMC_INVALID_INSTRUCTION
output: _ => _

[transfer-failure-1]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> (BAL_FROM => _)
    #hashedLocation({COMPILER}, {_BALANCES}, TO_ID)     |->  BAL_TO
    _:Map
+requires:
    andBool CALLER_ID =/=Int TO_ID


[transfer-failure-1-a]
statusCode: _ => EVMC_REVERT
+requires:
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0
    andBool VALUE >Int BAL_FROM


[transfer-failure-1-b]
statusCode: _ => EVMC_REVERT
+requires:
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0
    andBool BAL_TO +Int VALUE >=Int (2 ^Int 256)

[transfer-failure-1-c]
+requires:
    andBool STOPPED ==Int 1 <<Int ({_OFFS} *Int 8)

[transfer-failure-1-d]
+requires:
    andBool CALLER_ID ==Int 0

[transfer-failure-2]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES}, CALLER_ID) |-> BAL_FROM
    _:Map
+requires:
    andBool CALLER_ID ==Int TO_ID

[transfer-failure-2-a]
statusCode: _ => EVMC_REVERT
+requires:
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0
    andBool VALUE >Int BAL_FROM

[transfer-failure-2-b]
+requires:
    andBool STOPPED ==Int 1 <<Int ({_OFFS} *Int 8)

[transfer-failure-2-c]
+requires:
    andBool CALLER_ID ==Int 0


[transferFrom]
callData: #abiCallData("transferFrom", #address(FROM_ID), #address(TO_ID), #uint256(VALUE))
gas: {GASCAP} => _
refund: _ => _
storage:
    #hashedLocation({COMPILER}, {_STOPPED}, .IntList) |-> STOPPED
requires:
    andBool 0 <=Int FROM_ID   andBool FROM_ID   <Int (2 ^Int 160)
    andBool 0 <=Int TO_ID     andBool TO_ID     <Int (2 ^Int 160)
    andBool 0 <=Int VALUE     andBool VALUE     <Int (2 ^Int 256)
    andBool 0 <=Int BAL_FROM  andBool BAL_FROM  <Int (2 ^Int 256)
    andBool 0 <=Int BAL_TO    andBool BAL_TO    <Int (2 ^Int 256)
    andBool 0 <=Int ALLOW     andBool ALLOW     <Int (2 ^Int 256)
    andBool 0 <=Int STOPPED   andBool STOPPED   <Int (2 ^Int 256)

[transferFrom-success]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => #asByteStackInWidth(1, 32)
log: _ => _

[transferFrom-success-1]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> (BAL_FROM => BAL_FROM -Int VALUE)
    #hashedLocation({COMPILER}, {_BALANCES},   TO_ID)             |-> (BAL_TO   => BAL_TO   +Int VALUE)
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> (ALLOW    => ALLOW    -Int VALUE)
    _:Map
+requires:
    andBool FROM_ID =/=Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool BAL_TO +Int VALUE <Int (2 ^Int 256)
    andBool VALUE <=Int ALLOW
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0

[transferFrom-success-2]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> (ALLOW => ALLOW -Int VALUE)
    _:Map
+requires:
    andBool FROM_ID ==Int TO_ID
    andBool VALUE <=Int BAL_FROM
    andBool VALUE <=Int ALLOW
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0
    andBool BAL_FROM +Int VALUE ==Int BAL_FROM

[transferFrom-failure]
k: #execute => #halt
statusCode: _ => EVMC_INVALID_INSTRUCTION
output: _ => _
log: _ => _

[transferFrom-failure-1]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> (BAL_FROM => _)  // BAL_FROM
    #hashedLocation({COMPILER}, {_BALANCES},   TO_ID)             |-> (BAL_TO   => _)  // BAL_TO
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> (ALLOW => _)
    _:Map
+requires:
    andBool FROM_ID =/=Int TO_ID

[transferFrom-failure-1-a]
statusCode: _ => EVMC_REVERT
+requires:
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0
    andBool VALUE >Int BAL_FROM


[transferFrom-failure-1-b]
statusCode: _ => EVMC_REVERT
+requires:
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0
    andBool BAL_TO +Int VALUE >=Int (2 ^Int 256)

[transferFrom-failure-1-c]
statusCode: _ => EVMC_REVERT
+requires:
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0
    andBool VALUE >Int ALLOW

[transferFrom-failure-1-d]
+requires:
    andBool STOPPED ==Int 1 <<Int ({_OFFS} *Int 8)

[transferFrom-failure-1-e]
+requires:
    andBool CALLER_ID ==Int 0

[transferFrom-failure-2]
+storage:
    #hashedLocation({COMPILER}, {_BALANCES},   FROM_ID)           |-> BAL_FROM
    #hashedLocation({COMPILER}, {_ALLOWANCES}, FROM_ID CALLER_ID) |-> ALLOW
    _:Map
+requires:
    andBool FROM_ID ==Int TO_ID

[transferFrom-failure-2-a]
statusCode: _ => EVMC_REVERT
+requires:
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0
    andBool VALUE >Int BAL_FROM

[transferFrom-failure-2-b]
statusCode: _ => EVMC_REVERT
+requires:
    andBool STOPPED ==Int 0
    andBool CALLER_ID =/=Int 0
    andBool VALUE >Int ALLOW

[transferFrom-failure-2-c]
+requires:
    andBool STOPPED ==Int 1 <<Int ({_OFFS} *Int 8)

[transferFrom-failure-2-d]
+requires:
    andBool CALLER_ID ==Int 0

[pgm]
compiler: "Solidity"
gasCap: 100000
_totalsupply: 5
_balances: 3
_allowances: 4
_stopped: 6
_offs: 0
code:"0x606060405236156100ce576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d357806307da68f514610162578063095ea7b31461017757806318160ddd146101d157806323b872dd146101fa578063313ce5671461027357806342966c681461029c57806370a08231146102bf57806375f12b211461030c57806395d89b4114610339578063a9059cbb146103c8578063be9a655514610422578063c47f002714610437578063dd62ed3e14610494575b600080fd5b34156100de57600080fd5b6100e6610500565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101275780820151818401525b60208101905061010b565b50505050905090810190601f1680156101545780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016d57600080fd5b61017561059e565b005b341561018257600080fd5b6101b7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610616565b604051808215151515815260200191505060405180910390f35b34156101dc57600080fd5b6101e46107dd565b6040518082815260200191505060405180910390f35b341561020557600080fd5b610259600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506107e3565b604051808215151515815260200191505060405180910390f35b341561027e57600080fd5b610286610b20565b6040518082815260200191505060405180910390f35b34156102a757600080fd5b6102bd6004808035906020019091905050610b26565b005b34156102ca57600080fd5b6102f6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c4c565b6040518082815260200191505060405180910390f35b341561031757600080fd5b61031f610c64565b604051808215151515815260200191505060405180910390f35b341561034457600080fd5b61034c610c77565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561038d5780820151818401525b602081019050610371565b50505050905090810190601f1680156103ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103d357600080fd5b610408600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d15565b604051808215151515815260200191505060405180910390f35b341561042d57600080fd5b610435610f3c565b005b341561044257600080fd5b610492600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610fb4565b005b341561049f57600080fd5b6104ea600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611029565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105965780601f1061056b57610100808354040283529160200191610596565b820191906000526020600020905b81548152906001019060200180831161057957829003601f168201915b505050505081565b3373ffffffffffffffffffffffffffffffffffffffff16600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156105f757fe5b6001600660006101000a81548160ff0219169083151502179055505b5b565b6000600660009054906101000a900460ff1615151561063157fe5b3373ffffffffffffffffffffffffffffffffffffffff1660001415151561065457fe5b60008214806106df57506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156106ea57600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b5b5b92915050565b60055481565b6000600660009054906101000a900460ff161515156107fe57fe5b3373ffffffffffffffffffffffffffffffffffffffff1660001415151561082157fe5b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561086f57600080fd5b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401101515156108fe57600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561098957600080fd5b81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b5b5b9392505050565b60025481565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610b7457600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600360008073ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555060003373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b50565b60036020528060005260406000206000915090505481565b600660009054906101000a900460ff1681565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d0d5780601f10610ce257610100808354040283529160200191610d0d565b820191906000526020600020905b815481529060010190602001808311610cf057829003601f168201915b505050505081565b6000600660009054906101000a900460ff16151515610d3057fe5b3373ffffffffffffffffffffffffffffffffffffffff16600014151515610d5357fe5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610da157600080fd5b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110151515610e3057600080fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b5b5b92915050565b3373ffffffffffffffffffffffffffffffffffffffff16600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610f9557fe5b6000600660006101000a81548160ff0219169083151502179055505b5b565b3373ffffffffffffffffffffffffffffffffffffffff16600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561100d57fe5b806000908051906020019061102392919061104e565b505b5b50565b6004602052816000526040600020602052806000526040600020600091509150505481565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061108f57805160ff19168380011785556110bd565b828001600101855582156110bd579182015b828111156110bc5782518255916020019190600101906110a1565b5b5090506110ca91906110ce565b5090565b6110f091905b808211156110ec5760008160009055506001016110d4565b5090565b905600a165627a7a72305820766691a3329cad3c202c24120721595eb3a37ca005c101148ce0c341ed8579550029"